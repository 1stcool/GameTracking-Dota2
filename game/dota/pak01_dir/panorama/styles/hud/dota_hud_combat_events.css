DOTACombatEvents
{
	/* Flip the container vertically so that the scroll offset is measured from the bottom,
	   not the top. This is so that it remains constant when a new line is added or
	   the container grows/shrinks. */
	transform: scaleY( -1.0 );
	height: 385px;
	overflow: noclip clip;
}

DOTACombatEvents.RevealCollapsed
{
	overflow: noclip scroll;
}

#ToastLinesWrapper
{
    overflow: noclip noclip;
}

#ToastManager
{
	flow-children: down;
	overflow: noclip noclip;
	/* Reverse the transform done in DOTACombatEvents so the lines are rightside up */
    transform: scaleY( -1.0 );
}

#ToastManager.RevealCollapsed
{
	
}

VerticalScrollBar
{
	horizontal-align: left;
}

.HUDFlipped #ToastManager
{
	margin-right: 0px;
	//margin-left: 20px;
}

@define toastExitDuration: 0.2s;

#ToastManager > .ToastPanel
{
	opacity: 0.0;
	transform: translateX( -40px );

	transition-property: opacity, transform;
	transition-duration: toastExitDuration;
    animation-name: CombatEvent;
    animation-duration: .41s;
}

.HUDFlipped #ToastManager > .ToastPanel
{
	transform: translateX( 40px );
}

@keyframes 'CombatEvent'
{
    0%
    {
        pre-transform-scale2d: .2;
        opacity: 0;
    }

    50%
    {
        pre-transform-scale2d: 1.5;
        opacity: 1;
    }

    100%
    {
        pre-transform-scale2d: 1;
        opacity: 1;
    }
}

#ToastManager > .ToastPanel.Collapse
{
	visibility: collapse;
	transition-duration: 0s;
}

#ToastManager > .ToastPanel.ToastVisible
{
	opacity: 1.0;
	transform: none;
}

#ToastManager.SkipTransition > .ToastPanel
{
	transition-duration: 0s;
}

#ToastManager.RevealCollapsed > .ToastPanel.Collapse,
#ToastManager.RevealCollapsed > .ToastPanel
{
	visibility: visible;
	opacity: 1.0;
	transform: translateX( 0px );
	transition-duration: 0s;
}

DOTACombatEventRow.event_dota_player_kill.LocalPlayerKiller
{
    sound: "notification.self.kill";
}

DOTACombatEventRow.event_dota_player_kill.LocalPlayerVictim
{
    sound: "notification.self.death";
}

DOTACombatEventRow.event_dota_player_kill.AllyEvent
{
    sound: "notification.teammate.kill";
}

DOTACombatEventRow.event_dota_player_kill.EnemyEvent
{
    sound: "notification.teammate.death";
}


