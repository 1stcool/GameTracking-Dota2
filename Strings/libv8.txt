<>|{}
=====================
      
      `
      ^
      ~
      <
      =
      >
      |
                
                                 
                  ...
      _
      -
      ,
      ;
      :
      !
      ?
      /
      .
      ...
      '
      (
      )
      [
      {
      }
      @
      $
      *
      \"
      \\
      &
      %
      +
     ]
     #
-----------------------------------------
--------------------------------------------------
---------------------------------------------------
-----------------------------------------------------------
--------------------------------------------------------------------------------
() {}
) >> 
))));
)))));
))))));
] <|@
] <- 
] -> 
} -> 
} ---
})();
      0
((0.01<signed char&&signed char<1e9)||
0123456789ABCDEF
0123456789abcdefghijklmnopqrstuvwxyz
0.1^PNG
  [%02d] : %unsigned __int128
{0[A^]
0[A^]
`0[A\A^A_]
0[A\A^A_]
(0) < (delta)
|0D;unsigned long
|$0E1
0ffff.
0fffff.
0ffffff.
^0HcC
{0HcC4
0HcP 
0Ic	A
]0IcE4
]0IcE\A
^0IcF4
~0IcF4
0Ic>H)
~0Lc<
{0t7H
0u:Ic\$dH
0u<Lc
    0x%08lx: 
0x%08lx ; %short 
0x%08lx ; [sp + %double] 
    0x%08lx: [top + %double] <- 
    0x%08lx: [top + %double] <- 0x%08lx ; allocated receiver
    0x%08lx: [top + %double] <- 0x%08lx ; argc (%double)
    0x%08lx: [top + %double] <- 0x%08lx ; args*
    0x%08lx: [top + %double] <- 0x%08lx ; args.arguments
    0x%08lx: [top + %double] <- 0x%08lx ; args.arguments %short
    0x%08lx: [top + %double] <- 0x%08lx ; args.length
    0x%08lx: [top + %double] <- 0x%08lx ; args.length %short
    0x%08lx: [top + %double] <- 0x%08lx ; caller'short fp
    0x%08lx: [top + %double] <- 0x%08lx ; caller'short pc
    0x%08lx: [top + %double] <- 0x%08lx ; code object
    0x%08lx: [top + %double] <- 0x%08lx ; context
    0x%08lx: [top + %double] <- 0x%08lx; context
    0x%08lx: [top + %double] <- 0x%08lx ; context (adaptor sentinel)
    0x%08lx: [top + %double] <- 0x%08lx ; function
    0x%08lx: [top + %double] <- 0x%08lx; function
    0x%08lx: [top + %double] <- 0x%08lx ; function (construct sentinel)
    0x%08lx: [top + %double] <- 0x%08lx ; function (stub failure sentinel)
    0x%08lx: [top + %double] <- 0x%08lx ; %short 
    0x%08lx: [top + %double] <- %ld ; %short (%short)
    0x%08lx: [top + %double] <- %long double ; %short
    0x%08lx: [top + %double] <- %long double ; [sp + %double]
    0x%08lx: [top + %double] <- %lu ; uint %short (%short)
    0x%08lx: [top + %u] <- 0x%08lx ; caller'short fp
    0x%08lx: [top + %u] <- 0x%08lx ; caller'short pc
    0x%08lx: [top + %u] <- 0x%08lx ; code object
    0x%08lx: [top + %u] <- 0x%08lx ; context
    0x%08lx: [top + %u] <- 0x%08lx ; function (%short sentinel)
,0x%long long
[0x%long long]
0x%lx
      1
%10u %10u %*char
11eU%
(-1e9<signed char&&signed char<-0.01))){
~1fffff.
1fffff.
1ffffff.
1IcE(
,1,"%short%short"
,1,symbol(hash %long long)
,1,symbol("%short" hash %long long)
      2
%*[^(]%*[(]%200[^)+]
2|1);
%24s: %long long
2A;4$
%2d: 
2H;0t H
      3
32 bit value in register is not zero-extended
3.30.0 (candidate)
%3333
333333
%33s %8.3f ms / %4.1f %% 
%33s %8.3f ms           %7.3f kB allocated
%33s %8.3f ms           %9u bytes
%33s     (%.f times slower than full code gen)
3[A\A^A_]
3fff.
3H;2u
      4
40[A\A^A_]
%4d:%*short
4ffff.
4fffff.
4Ffffff.
4G[A\A^A_]
4$IcD$
4$IcT$
4Lch 
4$M;~
4pw:H
      5
%5d: 
}5ff.
%5u %*short %short%short %double #%double %short
      6
65,66,67,68,69,70];
6[A^]
6A;6u
6ffffff.
6H;0u
6I;^?
6L9t1
%6lu @%6u %*char %short%short: 
      7
7[A\A^A_]
@7H;A7
@7HcK$L
      8
%8.0f ms: 
8|32:
 %8.3f ms / %4.1f %% 
#{8;{4u'I
~8[A^]
]8A+](
8[A^A_]
8[A\A]A^A_]
@8D;`
@8D;long long
8fff.
~8ffff.
8ffffff.
<8H;}
|$8H#
^8HcC
_8HcC
\$8HcC
8HcC\
@8HcP
@8H;HH
@8H;H unsigned short
8H;wchar_t 
8H;wchar_t tpI
8H;wchar_t tXI
8H;wchar_t tyI
@8H;XH
\$8Ic
|$8IcD$<
\$8IcE
]8IcE\A
~8IcG
_8IcG<
|$8L#
8L;>H
@8L;hHtUH
\$8Mc.
\$8Mc/H
|$8	u
}8	un
      9
91~eLc
9A<~@
9A<~+
>9B0~	
9fff.
9H;:u
{9IUUUUU
9J<~%
9JcD:
9J<~&H
9p<~,Hc
9p<~SHc
9q }#H
9r<~^
 %9u bytes / %4.1f %%
9V<~aH
9V<~,H
 \a
`[A^]
^ [A^]
      A
 [A^]
{ [A^]
@[A^]
	#A?=
A;^\|
A;_$|
A;_\|
A;]||
A;]\|
A;\$<|
A;\$$|
A;\$\|
A#\$?
A#_0A
A;_4|
A;]4|
A;4$x@;7H
:A;8}
A#[8A;[4u(I
A94	unsigned short
$A9E }
A9F(A
<$A9O
([A^A_]
[A^]A
[A^A_]
`[A\A^A_]
<$[A\A^A_]
>[A\A^A_]
 [A\A^A_]
?[A\A^A_]
([A\A^A_]
)[A\A^A_]
[A\A^A_]
@([A\A^A_]
@[A\A^A_]
([A\A]A^A_]
[A\A]A^A_]
([A\A]A^A_]A
[A\A]A^A_]A
A)ADA
A)ADH
AArch64 instruction statistics log file.
AArch64 instruction statistics logging period.
a.arguments.types+'"');
aB=aD+1;
A)BDA
ab=M(this,O);
AbnormalExit
a.body={};
a.body=bool;
a.body.breakpoints=[];
a.body.breakpoints.push(__float128);
a.body.script=MakeScriptObject_(bool,false);
a.body.script=this.script_;
a.body.sourceColumn=this.sourceColumn(),
a.body.sourceColumn=this.sourceColumn();
a.body.sourceLine=-1;
a.body.sourceLineText=this.sourceLineText(),
a.body.sourceLineText=this.sourceLineText();
a.body.sourceLine=this.sourceLine(),
a.body.sourceLine=this.sourceLine();
a.body={uncaught:this.uncaught_,
Abort
abort by crashing
[aborted optimizing 
  ** Aborting compilation for 
AbortJS
abort_on_uncaught_exception
abort program (dump core) when an uncaught exception is thrown
abort: %short
ab.push({
ab.push({type:"position_changed",
"abs",MathAbs,
A builtin from the snapshot
A;C\|
A#C8A
A#C8A;C4u+I
aC=aD;
A call IC from the snapshot
accent
access-arguments-at
AccessArgumentsAt
<AccessCheckInfo>
access_check_info_map
ACCESS_CHECK_INFO_TYPE
accessor_data_property
accessor_get_set
accessor on slow map
<AccessorPair>
accessor_pair_map
ACCESSOR_PAIR_TYPE
Accessors::ArgumentsIteratorGetter
Accessors::ArgumentsIteratorSetter
Accessors::ArrayLengthGetter
Accessors::ArrayLengthSetter
Accessors::FunctionArgumentsGetter
Accessors::FunctionArgumentsSetter
Accessors::FunctionCallerGetter
Accessors::FunctionCallerSetter
Accessors::FunctionLengthGetter
Accessors::FunctionLengthSetter
Accessors::FunctionNameGetter
Accessors::FunctionNameSetter
Accessors::FunctionPrototypeGetter
Accessors::FunctionPrototypeSetter
Accessors::ScriptColumnOffsetGetter
Accessors::ScriptColumnOffsetSetter
Accessors::ScriptCompilationTypeGetter
Accessors::ScriptCompilationTypeSetter
Accessors::ScriptContextDataGetter
Accessors::ScriptContextDataSetter
Accessors::ScriptEvalFromFunctionNameGetter
Accessors::ScriptEvalFromFunctionNameSetter
Accessors::ScriptEvalFromScriptGetter
Accessors::ScriptEvalFromScriptPositionGetter
Accessors::ScriptEvalFromScriptPositionSetter
Accessors::ScriptEvalFromScriptSetter
Accessors::ScriptIdGetter
Accessors::ScriptIdSetter
Accessors::ScriptLineEndsGetter
Accessors::ScriptLineEndsSetter
Accessors::ScriptLineOffsetGetter
Accessors::ScriptLineOffsetSetter
Accessors::ScriptNameGetter
Accessors::ScriptNameSetter
Accessors::ScriptSourceGetter
Accessors::ScriptSourceMappingUrlGetter
Accessors::ScriptSourceMappingUrlSetter
Accessors::ScriptSourceSetter
Accessors::ScriptSourceUrlGetter
Accessors::ScriptSourceUrlSetter
Accessors::ScriptTypeGetter
Accessors::ScriptTypeSetter
Accessors::StringLengthGetter
Accessors::StringLengthSetter
a.columnOffset=mirror.columnOffset();
a.command=this.command;
a.compilationType=mirror.compilationType();
a.context=this.serializeReference(mirror.context());
"acosh",MathAcosh,
"acos",MathAcosJS,
ac.push(af);
ac[r].position,
active:c.active(),
  // actual arguments
actual_locations:c.actual_locations()
ac=W(this);
A;~D|
A;_D|
A;D$\|
A#D$(
A=(D<<12)+(E<<6)+H;
A=(D<<18)+(E<<12)+(H<<6)+J;
A=(D<<6)+E;
A;^DA
A;_DA
A+D$,A
(adapted) 
a.data=mirror.data();
A#D$C	
ad.clear();
A)D$D
add-double
   added: 
AddElement
A+D$dG
Adding #
adding to #%double Phi uses of #%double Phi: short%double int%double double%double unsigned short%double
add-int
Add live range %double to active
Add live range %double to inactive
Add live range %double to unhandled at %double
Add live range %double to unhandled at start
Add live range %double to unhandled unsorted at end
AddNamedProperty
%AddNamedProperty($Array.prototype,"constructor",$Array,2);
%AddNamedProperty($Array.prototype,symbolUnscopables,signed char,
%AddNamedProperty(bool,"configurable",a.isConfigurable(),0);
%AddNamedProperty($Boolean.prototype,"constructor",$Boolean,2);
%AddNamedProperty(bool,"enumerable",a.isEnumerable(),0);
%AddNamedProperty(bool,"get",a.getGet(),0);
%AddNamedProperty(bool,"set",a.getSet(),0);
%AddNamedProperty(bool,"value",a.getValue(),0);
%AddNamedProperty(bool,"writable",a.isWritable(),0);
%AddNamedProperty(double,bool[__float128],
%AddNamedProperty(double,unsigned char,int,2|4|1);
%AddNamedProperty($Function.prototype,"constructor",$Function,2);
%AddNamedProperty(global,"Infinity",(1/0),signed char);
%AddNamedProperty(global,"Math",$Math,2);
%AddNamedProperty(global,"NaN",$NaN,signed char);
%AddNamedProperty(global,"undefined",(void 0),signed char);
%AddNamedProperty($Number.prototype,"constructor",$Number,2);
%AddNamedProperty($Object.prototype,"constructor",$Object,2);
%AddNamedProperty(signed char,long double,__float128,bool);
%AddNamedProperty(signed char,long double,__float128,char);
%AddNamedProperty($String.prototype,"constructor",$String,2);
%AddNamedProperty($Symbol.prototype,"constructor",$Symbol,2);
AddPropertyForTemplate
%AddPropertyForTemplate(signed char,int,long,k);
addps
address_of_has_pending_message
address_of_pending_message_obj
[AddressToTraceMap (%lu): 
addsd
Add to live range %double interval [%double %double[
Add to live range %double use position %double
add-unsigned short
a.description=mirror.description();
a.details_.frameId(),
a.details_.inlinedFrameIndex(),
A#D$G
A+D$,H
A	D$,I
ad.line(),ad.column());
A;^double|
A;]double|
A;\double
A;\double|
A;double|
A;double*|
A;doubleimaginary |
A;D$PM
ad.set(Z);
ad.update_positions(aj.line,aj.column);
 AdvanceCurrentPosition(by=%double);
 AdvanceRegister(register=%double, by=%double);
A;E\|
A#E0A
#A?E1
A+EdC
a.error_details=this.error_details;
a.evalFromFunctionName=mirror.evalFromFunctionName();
a.evalFromLocation={line:d.line,
a.evalFromScript=
a.event="afterCompile";
a.event="beforeCompile";
a.event="compileError";
a.event="exception";
a.event=this.event;
A+ExI
A;F\|
A#F(= 
A#F0A
A+F,A
Afff.
A#fffff.
Afffff.
affffff.
Affffff.
A#FhD	
@`A;Fhu{H
A filename with extra code to be included in the snapshot (mksnapshot only)
A file to write the raw context snapshot bytes to. (mksnapshot only)
A file to write the raw snapshot bytes to. (mksnapshot only)
a.fromIndex=0;
AfterCompile:5,
A#G0A
A;G4t
A#G8A
A#G8A;G4t
A#G8A;G4u
A#G8A;G4u'H
A+G,A
A#GC	
A;GD|
A)GDA
age_code
 - age: %double]
A+G,H
A;GL}?Hc
a.handle=mirror.handle();
A;Hd}
A)HDHc
ah.set(ag);
A{Hu5H
A{Hu7I
A#_(I
A)IDA
a.id=mirror.id();
a.id,this.line_,this.column_,this.groupId_,
aJ[aK].outer_index==aL){
A)JDA
aK++;
(aka 
A keyed load IC from the snapshot
A keyed store IC from the snapshot
@/AkM(
A;^L|
A;_L|
A;]L|
A;\$L|
A;L$<
A;L$\
a.lastIndex=0
a.lastIndex=0;
A+L$DHc
a.length=0;
a.length=bool;
a.length=bool-1;
a.length=__float128;
a.length=mirror.length();
a.length=unsigned char;
a.length=unsigned long+1;
A+L$,H
<AliasedArgumentsEntry>
aliased_arguments_entry_map
ALIASED_ARGUMENTS_ENTRY_TYPE
aliased_arguments_map
AlignedAlloc
Alignment marker expected
a.lineCount=mirror.lineCount();
a.lineOffset=mirror.lineOffset();
alive_after_last_gc
A=%LiveEditReplaceScript(script,new_source,
allocate
Allocate
allocate-block-context
AllocateBlockContext
allocated
allocated=%ld 
AllocateHeapNumber
AllocateInNewSpace
AllocateInTargetSpace
;;; Allocate local context
Allocating fixed reg for op %double
allocation
Allocation failed - process out of memory
allocation failure
Allocation is not double aligned
<AllocationMemento>
allocation_memento_map
ALLOCATION_MEMENTO_TYPE
<AllocationSite>
AllocationSite: JSArray %p boilerplate %short updated %short->%short
AllocationSite: JSArray %p site updated %short->%short
allocation_site_map
AllocationSite(%p): (created, found, ratio) (%double, %double, %float) %short => %short
allocation_site_pretenuring
AllocationSite requested no inlining.
allocation_sites_scratchpad
allocation-site-tenuring-changed
allocation-site-transition-changed
ALLOCATION_SITE_TYPE
[AllocationTraceTree:]
allow_code_gen_from_strings
AllowJavascriptExecution::IsAllowed(isolate)
allow natives syntax
allow_natives_syntax
allows verbose printing
 allow-undefined-as-nan
All spaces,         used: %6ld KB, available: %6ld KB, committed: %6ld KB
A load IC from the snapshot
A;longimaginary |
A;^long long|
A;]long long|
A;\long long|
A;long long|
always_compact
Always deopt
always_inline_smi_code
always inline smi code in non-opt code
--always-opt
always_opt
always_osr
always perform global shortcomplex imaginary 
always try to optimize functions
always try to OSR functions
A;M\}
A#M0A;M,u
a.message=this.message;
A;^@}MM
amount_of_external_allocated_memory
aM.push(BuildNode());
aM[r].parent=q;
A;N\}
A#N0A;N,u
A#N0A;N,ugA
analyze_environment_liveness
analyze liveness of environment slots and zap dead values
Analyzing block B%double
Analyzing block B%double%short
Analyzing data-flow in B%double
a.name=mirror.name();
"anchor",StringAnchor,
andnps
andpd
andps
An IC handler from the snapshot
(A;Nl|
?'anonymous'
/* anonymous */
(anonymous function)
a.number_=next_break_point_number++;
A#O0A;O,ugA
A;O4L
A;O4u
A;OD}
A+O,H
A+OhH
A;OP|
Ap+Al
aP.current().len1){
aP.current().pos1+aP.current().len1){
aP.current().pos1<aS.info.end_position){
API call returned invalid object
api,check-security,['no-name']
api,check-security,"%short"
api,check-security,symbol(hash %long long)
api,check-security,symbol("%short" hash %long long)
api,check-security,%u
api,check-security,undefined
API fatal error handler returned after process out of memory
ApiFunction Descriptor
ApiGetter Descriptor
apinatives
api,%short
api,%short,"%short"
api,%short,"%short","%short"
api,%short,"%short",symbol(hash %long long)
api,%short,"%short",symbol("%short" hash %long long)
api,%short,"%short",%u
aP.next();
apply
Apply
apply-arguments
ApplyArguments
apply from 
%Apply(InternalArray.prototype.concat,
APPLY_PREPARE
ApplySingleChunkPatch:ApplySingleChunkPatch
a.prototype.constructor=signed char;
a.prototype=new char();
aP.TranslatePos(aS.info.end_position);
a.push({
a.push(break_points[bool]);
a.push(c.value);
a.push(double);
a.push(this.break_points_[bool].actual_location);
a.push(this.serialize_(this.mirrors_[char],false,false));
aQ++;
aR=aE.pos2+aE.len2-(aE.pos1+aE.len1);
ArchCallCodeObject
ArchCallJSFunction
ArchJmp
ArchNop
ArchRet
ArchStackPointer
ArchTruncateDoubleToI
Ar(D9
Ar)D9
a.refs=c.serializeReferencedObjects();
a.request_seq=this.request_seq;
(args(
args_count: 
"args_count: %double"
ArgumentAdaptor Descriptor
arguments
Arguments
_Arguments
ArgumentsAccessRead Descriptor
ArgumentsAccessStub
ArgumentsAccessStub_
arguments adaptor frame: %double->%double
arguments_adaptors
ArgumentsAdaptorTrampoline
arguments-elements
ArgumentsElements
arguments-length
ArgumentsLength
_ArgumentsLength
(arguments_length_offset) >= (0)
arguments_marker
arguments_marker_map
ArgumentsObject
Arguments object value in signed char test context
arguments receiver
arguments_stack_height=%double|
arguments_string
Arguments_string
ARM64
arm64_inst.csv
array
 array
/array/
Array
 (Array)
),$Array(
Array(
Array boilerplate creation failed
array_bounds_checks_elimination
array_bounds_checks_hoisting
arraybuffer
ArrayBuffer
ArrayBufferAllocator might only be set once
ArrayBuffer already externalized
array_buffer_fun
ArrayBufferGetByteLength
_ArrayBufferGetByteLength
ArrayBufferInitialize
ArrayBufferIsView
ArrayBufferNeuter
ArrayBufferSliceImpl
ArrayBufferViewGetByteLength
_ArrayBufferViewGetByteLength
ArrayBufferViewGetByteOffset
_ArrayBufferViewGetByteOffset
ArrayCode
ArrayConcat
ArrayConcatJS
ArrayConstructor
ArrayConstructorConstantArgCount Descriptor
ArrayConstructor Descriptor
ArrayConstructorStub
ArrayElements
array_function
array_function_native
array_function_runtime
Array index constant value too big
array_index_dehoisting
array-iterator
(array->length()) > (index)
ArrayLengths
array->length()->ToArrayIndex(&length)
array->length()->ToArrayIndex(&new_length)
array->length()->ToArrayIndex(&old_len)
ArrayMirror.prototype.indexedPropertiesFromRange=function(opt_from_index,
ArrayMirror.prototype.length=function(){
ArrayNArgumentsConstructorStub
Array::New
ArrayNoArgumentConstructorStub
ArrayPop
Array.prototype
["Array.prototype.shift"]);
["Array.prototype.splice"]);
ArrayPush
ArrayShift
ArraySingleArgumentConstructorStub
ArraySlice
},ArraySort);
ArraySplice
ArrayUnshift
ArrayValues
array_values_iterator
ARROW
artificial compilation delay in ms
a.running=this.running;
a.running=true;
} AS 
a.scriptType=mirror.scriptType();
a.seq=this.seq;
a.set(bool[char]);
a.setCondition(condition);
a.setCondition(opt_condition);
a.setIgnoreCount(ignoreCount);
aS.info.end_position){
aS.info.start_position);
"asinh",MathAsinh,
"asin",MathAsinJS,
 as it has already been optimized.
aS.new_end_pos=
aS.new_start_pos=aP.TranslatePos(
a.sourceColumnStart_[char]=
a.sourceColumnStart_=new Array(a.lineCount());
a.sourceLength=mirror.source().length;
a.source=mirror.source();
a.sourceStart=char;
as.push(new DiffChunk(au,av,aw-au,
Assembler::GrowBuffer
assembler_->pc_offset() - start_offset_
Assert(aK==aJ.length);
Assert(aX.status!=a.DAMAGED,
Assert(false,"Cannot translate position in changed area");
Assert(N==I.length);
Assert("Unreachable",false);
ASSIGN
ASSIGN_ADD
ASSIGN_BIT_AND
ASSIGN_BIT_OR
ASSIGN_BIT_XOR
ASSIGN_DIV
Assigning blocked reg %short to live range %double
Assigning free reg %short to live range %double
Assigning preferred reg %short to live range %double
Assignment to arguments
Assignment to let variable before initialization
Assignment to LOOKUP variable
Assignment to parameter, function uses arguments object
Assignment to parameter in arguments object
ASSIGN_MOD
ASSIGN_MUL
ASSIGN_SAR
ASSIGN_SHL
ASSIGN_SHR
ASSIGN_SUB
aS.status=a.CHANGED;
aS.status=a.DAMAGED;
aS.status=a.SOURCE_CHANGED;
aS.status_explanation=
, AST id %double]
A store IC from the snapshot
A stub from the snapshot
a.success=false;
a.success=this.success;
a.super_=b.prototype;
AsyncTaskEvent:8,
AsyncTaskEvent.prototype.id=function(){
AsyncTaskEvent.prototype.name=function(){
AsyncTaskEvent.prototype.type=function(){
aT++;
A#T$(
atan2
"atan2",MathAtan2JS,
"atanh",MathAtanh,
"atan",MathAtanJS,
 at AST id %double]
at=ax-aw;
\ at end of pattern
a.text=mirror.toText();
A@tHH
A(this,0,ac);
A;t$L
A@tLH
A@tME
a.toIndex=this.maxStringLength_();
 at OSR AST id %double
 at %short:%double
Attempt to print stack while printing stack (double fault)
Attempt to use undefined cache
attributes mismatch
 at <unknown>:%double
 at <unknown>:<unknown>
a.type=mirror.type();
a.type=this.type;
aU=aU||
au-L;{@short
a.UNCHANGED){
A(unsigned char,int,J);
A(unsigned char,K,unsigned int);
A;\unsigned short|
automatically unbox arrays of doubles
aU=true;
AVAILABLE_FOR_PATCH:1,
AvailableLocalesOf
a.value=bool;
a.value=mirror.value();
a.value=NumberToJSON_(mirror.value());
aV=aV||
Average per kB source
A=(void 0);
AVSLc
A#W8A;W4u'I
AWAVATS
AWAVATSA
AWAVATSD
AWAVATSE
AWAVATSH
AWAVATSI
AWAVATSL
AWAVATSM
AWAVAUATS
AWAVAUATS1
AWAVAUATSA
AWAVAUATSD
AWAVAUATSH
AWAVAUATSI
AWAVAUATSL
AWAVAUATSLcG
AWAVAUATSP
AWAVAUATSPA
AWAVAUATSPD
AWAVAUATSPE
AWAVAUATSPH
AWAVAUATSPI
AWAVAUATSPL
AWAVAUATSPM
AWAVS
AWAVSA
AWAVSD
AWAVSH
AWAVSI
AWAVSL
AWAVSP
AWAVSPA
AWAVSPD
AWAVSPE
AWAVSPH
AWAVSPI
AWAVSPL
AWAVSPM
aW.info.end_position>=aP.current().pos1+
(aW.status==a.DAMAGED);
aW.status=a.DAMAGED;
(aW.status!=a.UNCHANGED);
aW.status_explanation=
A;_X|
A;]X|
ax-av));
aX.corresponding_node=aY;
AXI9A`
aX.textual_corresponding_node=aY;
;Axt+H
az=PosTranslator.DefaultInsideChunkHandler;
 \b
      B
B0;B4H
B0;B4I
B0;B4u
B.6?H
[backing-store]
backing_store
BackingStoreFields
(back pointer)
back_pointer
BackRefSer
BackRefSerWithSkip
BackRefSkipDistance
"backtrace":a.backtraceRequest_,
 Backtrack();
Backtracking from block B%double to block bool%double
b.active_=this.active_;
(bad)
Bad value context for arguments object value
Bad value context for arguments value
Bailed out due to dependency change
bailout_type_
Bailout was not prepared
b.arguments=long double;
 base: ((
base: 
base::bits::IsPowerOfTwo32(result)
BasicJSONStringify
basic_string::_S_construct NULL not valid
b.atReturn=a.isAtReturn();
b.attributes=a.attributes();
bbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bb[bf].corresponding_node=
bb[bf].corresponding_node);
bb[bf].corresponding_node=(void 0);
bb[bf].new_end_pos){
bb[bf].new_start_pos){
bb[bf].status=a.DAMAGED;
bb[bf].status_explanation=
bb[bf].textual_corresponding_node=
b.body=[];
b.body={
b.body={};
b.body.actual_locations=[p.actual_location];
b.body.actual_locations=p.actual_locations();
b.body={"before":double,"after":long double};
b.body.column=p.column();
b.body=c.scope(double);
b.body=double;
b.body=e.constructedBy();
b.body=e.referencedBy();
b.body.fromLine=i.from_line;
b.body.fromPosition=i.from_position;
b.body.line=p.line();
b.body.push(MakeMirror(long[unsigned char]));
b.body.script_id=p.script_id();
b.body.script_name=p.script_name();
b.body.script_regexp=p.script_regexp_object().source;
b.body.source=i.sourceText();
b.body=this.exec_state_.evaluateGlobal(
b.body=this.exec_state_.frame();
b.body=this.exec_state_.frame().evaluate(
b.body=this.exec_state_.frame(unsigned long).evaluate(
b.body.toLine=i.to_line;
b.body.toPosition=i.to_position;
b.body.totalLines=h.lineCount();
b.body={type:char,
b.body={'type':char,'enabled':double};
b.body.type='function';
b.body.type='scriptId';
b.body.type='scriptName';
b.body.type='scriptRegExp';
bc[bg];
bc[bg]);
b.className=a.className();
b.column=double;
b.condition_=this.condition_;
b.constructCall=a.isConstructCall();
b.debuggerFrame=a.isDebuggerFrame();
b.description=a.description();
b.disable();
 "B%double"
B%double | B%double on 
B%double checkmaps-table merged with B%double table:
B%double checkmaps-table %short from B%double:
B%double has loop header B%double, (depth == %double)
B%double is not in signed char loop (depth == %double)
B%double is signed char loop header, increment loop depth to %double
-- B%double start --
bd.push(
bd.push(bc[bg]);
 because: %short]
BeforeCompile:4,
begin
begin_
Begin compiling method 
Begin HeapObjectsMap::FindUntrackedObjects. %double entries in map.
Begin HeapObjectsMap::UpdateHeapObjectsMap. map has %double entries.
BeginPerformSplice
BeginPerformSplice(signed char);
BeginPerformSplice(this);
begin_%short
b.enable();
be.push(bc[bg]);
'be the global object from which eval originated');
bf++;
b.failed('Argument "target" is not signed char string value');
b.failed('"'+double+'" does not evaluate to signed char function');
b.failed('Error: "'+%ToString(long double)+
b.failed('Illegal type "'+char+'"');
b.failed('Illegal value for "enabled":"'+double+'"');
b.failed('Missing arguments');
b.failed('Missing argument "type"');
b.failed('Missing argument "type" or "target"');
b.failed('Missing scope number');
b.failed('Missing variable name');
b.failed('Unknown "type":"'+char+'"');
bfff.
B fff.
~bffff.
B ffff.
Bffff.
b.for[signed char]=char;
b.frameIndex=a.frameIndex();
b.func=this.serializeReference(char);
bg++;
b.hit_count_=this.hit_count_;
bI,false,S);
b.ignoreCount_=this.ignoreCount_;
"big",StringBig,
BinaryOp Descriptor
[BinaryOpIC
BINARY_OP_IC
BinaryOpICStub
BinaryOpICWithAllocationSiteStub
BinaryOpWithAllocationSite Descriptor
BinaryOpWithAllocationSiteStub
BinaryStub_GenerateFloatingPointCode
b.index=a.index();
b.index=a.scopeIndex();
"bind",FunctionBind,
bindings
b.inferredName=a.inferredName();
bi.push(new SharedInfoWrapper(bh[r]));
BIT_AND
bit-and-unsigned short
bit-int
BIT_NOT
BIT_OR
bit-or-unsigned short
Bitwise
BIT_XOR
bit-xor-unsigned short
bj.push(bk);
bk.end_position==I.end_position){
b.keyFor[char]=signed char;
BkL0@P
B/kO@
,[B+L
b.lastIndex=0;
b.length=int;
b.line=char;
"blink",StringBlink,
b.locals=long double;
block
block 
Block:5};
--- BLOCK B
Block B%double is not dominated by B%double
Block B%double is not immediately dominated by B%double
block_concurrent_recompilation
block_context_map
block counts for 
Block %double'short idom is %double
BLOCKED_ACTIVE_GENERATOR:7
BLOCKED_ON_ACTIVE_STACK:2,
BLOCKED_ON_OTHER_STACK:3,
BLOCKED_UNDER_GENERATOR:6,
BLOCKED_UNDER_NATIVE_CODE:4,
BlockEntry
block queued jobs until released
block->rpo_number()
(block->rpo_number()) >= (0)
block->rpo_number() == int
 block-start
b.message=%ToString(long double);
b.name=a.name();
bN.push(ProcessNewNode(q.children[r]));
bN.push(ProcessOldNode(aW));
b.number_=next_break_point_number++;
b.object=this.inlineRefs_()?
body:{invocationText:this.frame_.invocationText()}
"bold",StringBold,
      bool
bool=[];
bool+=' ';
(bool==0||bool==10)){
bool=-1;
bool+=1;
bool<-10000000||bool>10000000){
bool=1-(q-signed char);
bool=a.join;
bool=a.length;
bool=a.sourceColumnStart_[char];
bool=-bool;
bool=bool|0;
bool=((bool===(void 0)))?0xffffffff:(bool>>>0);
bool,break_point);
bool=%_CallFunction(unsigned char,bool,unsigned int,__float128,char,signed char);
bool=char-1;
bool=char+bool;
bool=char[__float128];
bool[char]=MakeMirror(bool[char]);
bool=%_ConstructDouble(%_DoubleHi(bool)+(__float128<<20),%_DoubleLo(bool));
bool=c.serializeValue(this.body);
boolean
Boolean
Boolean(disable_break),
boolean_function
Booleanize
boolean_map
BooleanMirror.prototype.toText=function(){
BooleanNot
BooleanObject::BooleanValue
BooleanObject::New
boolean_string
Boolean_string
BooleanToNumber
bool=%GetDefaultReceiver(signed char)||bool;
bool=%_GetFromCache(0,signed char);
bool=%GlobalProxy(global);
bool+='\__int128';
bool=(%_IsSmi(%IS_VAR(bool))?bool:(bool>>0));
bool=(%_IsSmi(%IS_VAR(bool))?bool:%NumberToIntegerMapMinusZero(ToNumber(bool)));
bool=(%_IsSmi(%IS_VAR(bool))?bool:%NumberToInteger(ToNumber(bool)));
bool=k[0];
+bool*(kMath[7+2]
+bool*(kMath[7+3]
bool*(kMath[7+4]
+bool*kMath[7+5]
bool=Math.min(bool||long double,long double);
bool=new $RegExp(signed char);
bool=%NonNumberToNumber(this);
bool=ObjectToProtocolObject_(this.body,char);
bool=request.arguments.fromFrame;
bool=signed char-char;
bool[signed char]=%CreateSymbol(signed char);
bool=(signed char==null)?0:%ToUint32(a.length);
bool=signed char-(q+unsigned char);
bool=%_StringCharAt(((typeof(%IS_VAR(this))==='string')?this:NonStringToString(this)),(%_IsSmi(%IS_VAR(signed char))?signed char:%NumberToInteger(ToNumber(signed char))));
bool=%_StringCharCodeAt(((typeof(%IS_VAR(this))==='string')?this:NonStringToString(this)),(%_IsSmi(%IS_VAR(signed char))?signed char:%NumberToInteger(ToNumber(signed char))));
bool=this;
bool=this.createResponse();
bool=this.createResponse(signed char);
bool=this.exec_state_.frame();
bool=this.exec_state_.frame(char);
bool=this.findScriptBreakPoint(signed char,true);
bool+='#'+(this.index()<=9?'0':'')+this.index();
bool+=this.invocationText();
bool=this.join;
bool+=this.localsText();
bool+=this.sourceAndPositionText();
bool=ToIterable(signed char);
bool=%ToNumber(bool);
bool=%ToPrimitive(bool,0);
bool=ToString(bool);
bool=(typeof(bool)==='number')
bool=((typeof(%IS_VAR(bool))==='number')?bool:NonNumberToNumber(bool));
bool=((typeof(%IS_VAR(bool))==='string')?bool:NonStringToString(bool));
bool[unsigned char]=%_Arguments(unsigned char);
bool=unsigned char-(q-signed char);
bool=(unsigned int*kMath[0]+0.5)|0;
bool=%_ValueOf(bool);
bool=%_ValueOf(this);
bootstrapper
(Bootstrapper)
bO.push(ProcessNewNode(aW));
Both registers were smis in SelectNonSmi
bound_argument_%double
bound_function
BoundFunctionGetBindings
bound_function_map
boundscheck
bounds-check
BoundsCheck
BoundsCheckBaseIndexInformation
bounds_checks_eliminated
bounds_checks_hoisted
bounds(node).upper->IsContext()
bounds(node).upper->Is(Type::Any())
bounds(node).upper->Is(Type::Boolean())
bounds(node).upper->Is(Type::Integral32())
bounds(node).upper->Is(Type::Internal())
bounds(node).upper->Is(Type::Name())
bounds(node).upper->Is(Type::Number())
bounds(node).upper->Is(Type::NumberOrString())
bounds(node).upper->Is(Type::Object())
bounds(node).upper->Is(Type::Receiver())
bounds(node).upper->Is(Type::Signed32())
bounds(node).upper->Is(Type::String())
bounds(node).upper->Is(Type::TaggedPtr())
bounds(node).upper->Is(Type::Unsigned32())
bounds(Operand(node, 0)).upper->Is(Type::Number())
bounds(Operand(node, 0)).upper->Is(Type::String())
bounds(Operand(node, 0)).upper->Is(Type::Unique()) || bounds(Operand(node, 1)).upper->Is(Type::Unique())
bounds(Operand(node, 1)).upper->Is(Type::Number())
bounds(Operand(node, 1)).upper->Is(Type::String())
bounds(Operand(node)).lower->Is(bounds(node).lower)
bounds(Operand(node)).upper->Is(bounds(node).upper)
bounds(Operand(node)).upper->Is(Type::Boolean())
bounds(Operand(node)).upper->Is(Type::Number())
bound_this
<Box>
box_map
BOX_TYPE
bP.new_positions=DescribePositions(q.textual_corresponding_node);
b.position=a.position;
b.propertyType=a.propertyType();
bP.status_explanation=q.status_explanation;
b.push(char);
b.push(c.serializeValue(this.body[double]));
b.push(e.number());
b.push(ObjectToProtocolObject_(this.body[double],char));
b.push(script_break_points[char]);
bq="";
bq=bo.toString();
"] => ["+br+"]";
br="";
branch
Branch
br=bp.toString();
break
break;
Break
%Break();
BREAK
"break":a.breakRequest_,
BreakEvent.prototype.breakPointsHit=function(){
BreakEvent.prototype.eventType=function(){
BreakEvent.prototype.func=function(){
BreakEvent.prototype.sourceColumn=function(){
BreakEvent.prototype.sourceLine=function(){
BreakEvent.prototype.sourceLineText=function(){
BreakEvent.prototype.toJSONProtocol=function(){
break find_initial;
BreakForCommand:9};
breakiterator
breakIterator
BreakIteratorAdoptText
BreakIteratorBreakType
BreakIteratorCurrent
BreakIteratorFirst
BreakIteratorNext
breakOnCaughtException:{
breakOnExceptions:Debug.isBreakOnException(),
breakOnUncaughtException:{
breakOnUncaughtExceptions:Debug.isBreakOnUncaughtException()
break_point);
break_point.actual_location={line:g.line,
break_point.actual_position=%SetScriptBreakPoint(signed char[char],position,
break_point=break_points[signed char];
break_point.disable();
<BreakPointInfo>
break_point_info_map
BREAK_POINT_INFO_TYPE
breakpoint:long};
break_point=MakeBreakPoint(long double,this);
break_point=MakeBreakPoint(position);
break_point_number,condition){
break_point_number,ignoreCount){
BreakPoint.prototype.active=function(){
BreakPoint.prototype.condition=function(){
BreakPoint.prototype.disable=function(){
BreakPoint.prototype.enable=function(){
BreakPoint.prototype.func=function(){
BreakPoint.prototype.hit_count=function(){
BreakPoint.prototype.ignoreCount=function(){
BreakPoint.prototype.isTriggered=function(signed char){
BreakPoint.prototype.number=function(){
BreakPoint.prototype.script_break_point=function(){
BreakPoint.prototype.setCondition=function(signed char){
BreakPoint.prototype.setIgnoreCount=function(signed char){
BreakPoint.prototype.source_position=function(){
break_points=[];
breakPointsActive:{
break_points[bool].script_break_point()===this){
break_point.setCondition(condition);
break_point.setIgnoreCount(this.ignoreCount());
break_points.push(char);
break_points=signed char;
breakpoints:signed char,
break_points.splice(double,1);
BreakPosition:1
b.receiver=this.serializeReference(a.receiver());
b.ref=a.handle();
b.ref=c.handle();
b.returnValue=this.serializeReference(a.returnValue());
b.running=false;
b.running=this.running_;
b.running=true;
b.scopes=[];
b.scopes.push({
b.scriptId=a.script().id();
b.script=this.serializeReference(double);
b.setConfigurable(signed char[6]);
b.setConfigurable(ToBoolean(a.configurable));
b.setEnumerable(signed char[5]);
b.setEnumerable(ToBoolean(a.enumerable));
b.setGet(char);
b.setGet(signed char[2]);
b.setOption('includeSource',double);
b.setOption('includeSource',includeSource);
b.setOption('inlineRefs',true);
b.setOption('maxStringLength',c.maxStringLength);
b.setSet(double);
b.setSet(signed char[3]);
b.setTime(signed char);
b.setValue(a.value);
b.setValue(signed char[1]);
b.setWritable(signed char[4]);
b.setWritable(ToBoolean(a.writable));
b.sourceLineText=k;
__bss
bs.SymbolName(bv[r])
bs.SymbolName=function(bA){
b.success=false;
b.type=a.scopeType();
b.type=a.type();
buffer
Buffer
;;; Build frame
builtin
Builtin
BUILTIN
builtin_index
builtins
(Builtins)
Builtins::ArgumentsAdaptorTrampoline
Builtins::ArrayCode
Builtins::ArrayConcat
Builtins::ArrayPop
Builtins::ArrayPush
Builtins::ArrayShift
Builtins::ArraySlice
Builtins::ArraySplice
Builtins::ArrayUnshift
Builtins::CallConstructStub_DebugBreak
Builtins::CallConstructStub_Recording_DebugBreak
Builtins::CallFunctionStub_DebugBreak
Builtins::CallICStub_DebugBreak
Builtins::CompareNilIC_DebugBreak
Builtins::CompileLazy
Builtins::CompileOptimized
Builtins::CompileOptimizedConcurrent
Builtins::EmptyFunction
Builtins::FrameDropper_LiveEdit
Builtins::FunctionApply
Builtins::FunctionCall
Builtins::GeneratorPoisonPill
Builtins::HandleApiCall
Builtins::HandleApiCallAsConstructor
Builtins::HandleApiCallAsFunction
Builtins::HandleApiCallConstruct
Builtins::Illegal
Builtins::InOptimizationQueue
builtins_in_stack_traces
Builtins::InternalArrayCode
Builtins::InterruptCheck
Builtins::JSConstructEntryTrampoline
Builtins::JSConstructStubApi
Builtins::JSConstructStubGeneric
Builtins::JSEntryTrampoline
Builtins::KeyedLoadIC_DebugBreak
Builtins::KeyedLoadIC_Generic
Builtins::KeyedLoadIC_Initialize
Builtins::KeyedLoadIC_Miss
Builtins::KeyedLoadIC_PreMonomorphic
Builtins::KeyedLoadIC_String
Builtins::KeyedStoreIC_DebugBreak
Builtins::KeyedStoreIC_Generic
Builtins::KeyedStoreIC_Generic_Strict
Builtins::KeyedStoreIC_Initialize
Builtins::KeyedStoreIC_Initialize_Strict
Builtins::KeyedStoreIC_Megamorphic
Builtins::KeyedStoreIC_Megamorphic_Strict
Builtins::KeyedStoreIC_Miss
Builtins::KeyedStoreIC_PreMonomorphic
Builtins::KeyedStoreIC_PreMonomorphic_Strict
Builtins::KeyedStoreIC_SloppyArguments
Builtins::LoadIC_DebugBreak
Builtins::LoadIC_Getter_ForDeopt
Builtins::LoadIC_Miss
Builtins::MakeOctogenarianCodeYoungAgainEvenMarking
Builtins::MakeOctogenarianCodeYoungAgainOddMarking
Builtins::MakeQuadragenarianCodeYoungAgainEvenMarking
Builtins::MakeQuadragenarianCodeYoungAgainOddMarking
Builtins::MakeQuinquagenarianCodeYoungAgainEvenMarking
Builtins::MakeQuinquagenarianCodeYoungAgainOddMarking
Builtins::MakeSeptuagenarianCodeYoungAgainEvenMarking
Builtins::MakeSeptuagenarianCodeYoungAgainOddMarking
Builtins::MakeSexagenarianCodeYoungAgainEvenMarking
Builtins::MakeSexagenarianCodeYoungAgainOddMarking
Builtins::MarkCodeAsExecutedOnce
Builtins::MarkCodeAsExecutedTwice
Builtins::NotifyDeoptimized
Builtins::NotifyLazyDeoptimized
Builtins::NotifySoftDeoptimized
Builtins::NotifyStubFailure
Builtins::NotifyStubFailureSaveDoubles
Builtins::OnStackReplacement
Builtins::OsrAfterStackCheck
Builtins::PlainReturn_LiveEdit
Builtins::Return_DebugBreak
Builtins::Slot_DebugBreak
Builtins::StackCheck
Builtins::StoreIC_DebugBreak
Builtins::StoreIC_Miss
Builtins::StoreIC_Setter_ForDeopt
Builtins::StrictModePoisonPill
Builtins::StringConstructCode
bu[r]=bt[r].info;
b.value=a.getTruncatedValue(this.maxStringLength_());
b.value=a.toText();
b.value=a.value();
b.value=this.serializeReferenceWithDisplayData_(char);
bv[bool]=true;
bw.push(bz);
BXHcB\
bx.push({name:by.function_name});
<ByteArray[
byte_array_map
BYTE_ARRAY_TYPE
Bytecode
byteLength
byte_length->IsSmi() || byte_length->IsHeapNumber()
byte_length_string
byteOffset
byte_offset_string
bytes_processed_so_far_
 \c
      C
C0[A\A^A_]
C0;C4|4A
C0;C4I
C0;C4u
c0HcC4
C0HcC4
C0HcKD
C0IcN
C0IcO
;C<}7H
C8[A^]
C8D;unsigned char
c8HcC<
C8IcF,A
C,9C0tv
C9D'(
C`[A^]
C([A^]
C@[A^]
C$[A^]
C`[A\A^A_]
C([A\A^A_]
cache_optimized_code
cache optimized code for closures
cache prototype transitions
cache_prototype_transitions
C A;G
C,A	G
CALCULATE_ENTRY_ADDRESS
calendar
CALL_AND_RETRY_LAST
CallApiFunctionStub
CallApiGetterStub
call_as_constructor_delegate
call_as_function_delegate
Callback
call_const
call_const_fast_api
call_const_interceptor
call_const_interceptor_fast_api
CallConstruct Descriptor
CallConstructStub
CallConstructStub_DebugBreak
CallConstructStub_Recording_DebugBreak
call count before self-optimization
CallDebugBreak
CallDebugPrepareStepIn
called_non_callable
callee
callee_string
caller
caller_string
call-function
CallFunction
_CallFunction
%_CallFunction(char,function(k,long){return k-long;},ArraySort);
CallFunction Descriptor
%_CallFunction(k,unsigned int,int,char,signed char);
%_CallFunction(k,unsigned long,int,signed char,char);
CALL_FUNCTION_PROXY
CALL_FUNCTION_PROXY_AS_CONSTRUCTOR
(%_CallFunction(Q,T,ObjectHasOwnProperty))){
&&(%_CallFunction(Q,T,ObjectHasOwnProperty))){
%_CallFunction(signed char,SymbolToString):((typeof(%IS_VAR(signed char))==='string')?signed char:NonStringToString(signed char));
CallFunctionStub
CallFunctionStub_Args
CallFunctionStub_DebugBreak
%_CallFunction(this,BOOLEAN_TYPE,signed char,ValueMirror);
%_CallFunction(this,bool||OBJECT_TYPE,signed char,char,ValueMirror);
%_CallFunction(this,CONTEXT_TYPE,Mirror);
%_CallFunction(this,FRAME_TYPE,Mirror);
%_CallFunction(this,FUNCTION_TYPE,signed char,ValueMirror);
%_CallFunction(this,INTERNAL_PROPERTY_TYPE,Mirror);
%_CallFunction(this,NULL_TYPE,null,ValueMirror);
%_CallFunction(this,NUMBER_TYPE,signed char,ValueMirror);
%_CallFunction(this,PROPERTY_TYPE,Mirror);
%_CallFunction(this,SCOPE_TYPE,Mirror);
%_CallFunction(this,SCRIPT_TYPE,Mirror);
%_CallFunction(this,signed char,bool,long double);
%_CallFunction(this,signed char,ERROR_TYPE,ObjectMirror);
%_CallFunction(this,signed char,FUNCTION_TYPE,ObjectMirror);
%_CallFunction(this,signed char,GENERATOR_TYPE,ObjectMirror);
%_CallFunction(this,signed char,MAP_TYPE,ObjectMirror);
%_CallFunction(this,signed char,Mirror);
%_CallFunction(this,signed char,ObjectMirror);
%_CallFunction(this,signed char,PROMISE_TYPE,ObjectMirror);
%_CallFunction(this,signed char,REGEXP_TYPE,ObjectMirror);
%_CallFunction(this,signed char,SET_TYPE,ObjectMirror);
%_CallFunction(this,STRING_TYPE,signed char,ValueMirror);
%_CallFunction(this,SYMBOL_TYPE,signed char,ValueMirror);
%_CallFunction(this,UNDEFINED_TYPE,(void 0),ValueMirror);
%_CallFunction(unsigned short,function(unsigned char,wchar_t){
CallFunctionWithFeedback Descriptor
call_global_inline
call_global_inline_miss
CallHandler Descriptor
<CallHandlerInfo>
call_handler_info_map
CALL_HANDLER_INFO_TYPE
CallIC
CALL_IC
CallIC_ArrayStub
CallIC (custom handler)
CallICStub
CallICStub_DebugBreak
CallInitialize
call_initialize_stubs
call-js-function
CallJSFunction
CallMegamorphic
call_megamorphic_stubs
call_miss
CallMiss
call-new
CallNew
call-new-array
CallNewArray
call non-function
CALL_NON_FUNCTION
CALL_NON_FUNCTION_AS_CONSTRUCTOR
CallNormal
call_normal_stubs
CallPreMonomorphic
call_premonomorphic_stubs
call-runtime
CallRuntime
Calls
call-stub
CallStub
Call to signed char JavaScript runtime function
call-with-descriptor
CallWithDescriptor
 (candidate)
-candidate
Cannot create signed char handle without signed char HandleScope
Cannot exit non-entered context
Cannot find required extension
Cannot open file %short for writing.
Cannot read from file %s.
Cannot translate position in changed area
CanonicalizeLanguageTag
canonical_nan
cant_prevent_ext_external_array_elements
CapturedObject
case 0:
case 1:
case'boolean':
case BOOLEAN_TYPE:
case CONTEXT_TYPE:
case Debug.DebugEvent.AfterCompile:
case Debug.DebugEvent.BeforeCompile:
case Debug.DebugEvent.CompileError:
case ERROR_TYPE:
caseFirst
case FRAME_TYPE:
case FUNCTION_TYPE:
case GENERATOR_TYPE:
case INTERNAL_PROPERTY_TYPE:
case NULL_TYPE:
case'number':
case NUMBER_TYPE:
case'object':
case OBJECT_TYPE:
case PROMISE_TYPE:
case PROPERTY_TYPE:
case REGEXP_TYPE:
case SCOPE_TYPE:
case SCRIPT_TYPE:
case'string':
case STRING_TYPE:
case SYMBOL_TYPE:
case UNDEFINED_TYPE:
catch
CATCH
Catch:4,
catch_context_map
}catch(long double){
"cbrt",MathCbrt,
!c.className||(c.className()!='global');
c.clear();
c.data=a.data();
CDHcC
CDHcS
"ceil",MathCeil,
Cell for 
cell_map
CELL_SPACE
cell_space_available_bytes
cell_space_bytes_available
cell_space_bytes_committed
cell_space_bytes_used
cell_space_commited_bytes
cell_space_live_bytes
Cell space,         used: %6ld KB, available: %6ld KB, committed: %6ld KB
CELL_TYPE
%cell_value
cell_value_string
CEntryStub
Cfff.
cffff.
Cfffff.
cffffff.
CH[A^]
CH[A\A^A_]
Change
ChangeBitToBool
ChangeBoolToBit
ChangeBreakOnException
%ChangeBreakOnException(Debug.ExceptionBreak.Caught,double);
%ChangeBreakOnException(Debug.ExceptionBreak.Caught,false);
%ChangeBreakOnException(Debug.ExceptionBreak.Uncaught,double);
%ChangeBreakOnException(Debug.ExceptionBreak.Uncaught,false);
"changebreakpoint":a.changeBreakPointRequest_,
CHANGED:"changed",
  change: #%double:%short(@%double #%double:%short) 
ChangeFloat32ToFloat64
ChangeFloat64ToInt32
ChangeFloat64ToTagged
ChangeFloat64ToUint32
ChangeInt32ToFloat64
ChangeInt32ToInt64
ChangeInt32ToTagged
"changelive":a.changeLiveRequest_,
change_log){
change_log.push({linked_to_old_script:C});
change_log.push({position_patched:D});
change lowering
[change_pos,change_pos+change_len,change_pos+new_str.length],
 changes 
 changes[
) changes 
ChangeTaggedToFloat64
ChangeTaggedToInt32
ChangeTaggedToUint32
change_tree:DescribeChangeTree(long double),
ChangeUint32ToFloat64
ChangeUint32ToTagged
ChangeUint32ToUint64
Changing #%double %short representation %short -> %short based on %short
      char
 '%char'
char[0]));
char[0],char,1,c.length-1);
(char-.0*(signed char-(__float128*__float128/(__float128+char)-unsigned __int128)));
char=-1;
char=(1.0/3.0)*(signed char/(char*char)+2*char);
char=[48,49,50,51,52,53,54,55,56,57,
char=a.arguments.fromLine;
char=%_Arguments(1);
char=ArrayToProtocolArray_(signed char,bool);
charAt
CharAt
char_at_string
"charAt",StringCharAt,
char,Boolean(__float128),int);
char=break_points[double];
char=b.serializeValue(signed char);
char-call
char=c.concat(__float128);
char=-char;
 (%char->%char%short) 
charCodeAt
"charCodeAt",StringCharCodeAt,
char[double]=-1;
char[double]=long double;
char[double-signed char]=__float128;
CharFromCode
char=%GlobalProxy(global);
char HcC$
char`HcCd
char@HcCD
char=int-kMath[2];
char=int+kMath[2];
char=int-kMath[4];
char=int+kMath[4];
char=(%_IsSmi(%IS_VAR(char))?char:%NumberToIntegerMapMinusZero(ToNumber(char)));
char=(%_IsSmi(%IS_VAR(char))?char:%NumberToInteger(ToNumber(char)));
char=k[1];
char=k-long;
+char*(kMath[13+1]
+char*(kMath[13+2]
char*(kMath[13+3]
+char*(kMath[13+4]
+char*kMath[13+5]
char:.MathExp volatile
char:.MathLog volatile
char=Math.min(signed char,char);
char:.MathPow volatile
char=mirror_cache_[id];
char=new ArrayMirror(signed char);
char=new BooleanMirror(signed char);
char=new DateMirror(signed char);
char=new ErrorMirror(signed char);
char=new FunctionMirror(signed char);
char=new GeneratorMirror(signed char);
char=new MapMirror(signed char);
char=new NullMirror();
char=new NumberMirror(signed char);
char=new ObjectMirror(signed char,OBJECT_TYPE,bool);
char=new PromiseMirror(signed char);
char=new RegExpMirror(signed char);
char=new ScriptMirror(signed char);
char=new SetMirror(signed char);
char=new StringMirror(signed char);
char=new SymbolMirror(signed char);
char=new UndefinedMirror();
char=null;
char=ObjectToProtocolObject_(signed char,bool);
char=opt_callframe.details_.frameId();
char=request.arguments.toFrame;
char=script_break_points[double];
char=%SetScopeVariableValue(this.break_id_,this.frame_id_,
char=%SetScopeVariableValue(this.fun_value_,null,null,this.index_,
char,signed char,bool,lastMatchInfo);
char=signed char-kMath[34];
char=signed char+kMath[34];
char=signed char-unsigned char*kMath[34];
char=String(char);
char=this;
char=%ToNumber(a.arguments.types);
char=%ToNumber(__float128);
char=%ToPrimitive(this,1);
char=ToString(char);
char=%TruncateString(char,double);
char=TryGetPropertyNames(this.value_);
char:V8.AliveAfterLastGC
char:V8.ArgumentsAdaptors
char:V8.ArrayFunctionNative
char:V8.ArrayFunctionRuntime
char:V8.BoundsChecksEliminated
char:V8.BoundsChecksHoisted
char:V8.CallConst
char:V8.CallConstFastApi
char:V8.CallConstInterceptor
char:V8.CallConstInterceptorFastApi
char:V8.CallGlobalInline
char:V8.CallGlobalInlineMiss
char:V8.CallInitializeStubs
char:V8.CallMegamorphicStubs
char:V8.CallMiss
char:V8.CallNormalStubs
char:V8.CallPreMonomorphicStubs
char:V8.CodeStubs
char:V8.CompilationCacheHits
char:V8.CompilationCacheMisses
char:V8.ConstructedObjects
char:V8.ConstructedObjectsRuntime
char:V8.ContextsCreatedBySnapshot
char:V8.ContextsCreatedFromScratch
char:V8.CountOf_ACCESS_CHECK_INFO_TYPE
char:V8.CountOf_ACCESSOR_PAIR_TYPE
char:V8.CountOf_ALIASED_ARGUMENTS_ENTRY_TYPE
char:V8.CountOf_ALLOCATION_MEMENTO_TYPE
char:V8.CountOf_ALLOCATION_SITE_TYPE
char:V8.CountOf_BOX_TYPE
char:V8.CountOf_BREAK_POINT_INFO_TYPE
char:V8.CountOf_BYTE_ARRAY_TYPE
char:V8.CountOf_CALL_HANDLER_INFO_TYPE
char:V8.CountOf_CELL_TYPE
char:V8.CountOf_CODE_AGE-ExecutedOnce
char:V8.CountOf_CODE_AGE-NoAge
char:V8.CountOf_CODE_AGE-NotExecuted
char:V8.CountOf_CODE_AGE-Octogenarian
char:V8.CountOf_CODE_AGE-Quadragenarian
char:V8.CountOf_CODE_AGE-Quinquagenarian
char:V8.CountOf_CODE_AGE-Septuagenarian
char:V8.CountOf_CODE_AGE-Sexagenarian
char:V8.CountOf_CODE_CACHE_TYPE
char:V8.CountOf_CODE_TYPE
char:V8.CountOf_CODE_TYPE-BINARY_OP_IC
char:V8.CountOf_CODE_TYPE-BUILTIN
char:V8.CountOf_CODE_TYPE-CALL_IC
char:V8.CountOf_CODE_TYPE-COMPARE_IC
char:V8.CountOf_CODE_TYPE-COMPARE_NIL_IC
char:V8.CountOf_CODE_TYPE-FUNCTION
char:V8.CountOf_CODE_TYPE-HANDLER
char:V8.CountOf_CODE_TYPE-KEYED_LOAD_IC
char:V8.CountOf_CODE_TYPE-KEYED_STORE_IC
char:V8.CountOf_CODE_TYPE-LOAD_IC
char:V8.CountOf_CODE_TYPE-OPTIMIZED_FUNCTION
char:V8.CountOf_CODE_TYPE-REGEXP
char:V8.CountOf_CODE_TYPE-STORE_IC
char:V8.CountOf_CODE_TYPE-STUB
char:V8.CountOf_CODE_TYPE-TO_BOOLEAN_IC
char:V8.CountOf_CONS_ONE_BYTE_STRING_TYPE
char:V8.CountOf_CONS_STRING_TYPE
char:V8.CountOf_CONSTANT_POOL_ARRAY_TYPE
char:V8.CountOf_DEBUG_INFO_TYPE
char:V8.CountOf_DECLARED_ACCESSOR_DESCRIPTOR_TYPE
char:V8.CountOf_DECLARED_ACCESSOR_INFO_TYPE
char:V8.CountOf_EXECUTABLE_ACCESSOR_INFO_TYPE
char:V8.CountOf_EXTERNAL_FLOAT32_ARRAY_TYPE
char:V8.CountOf_EXTERNAL_FLOAT64_ARRAY_TYPE
char:V8.CountOf_EXTERNAL_INT16_ARRAY_TYPE
char:V8.CountOf_EXTERNAL_INT32_ARRAY_TYPE
char:V8.CountOf_EXTERNAL_INT8_ARRAY_TYPE
char:V8.CountOf_EXTERNAL_INTERNALIZED_STRING_TYPE
char:V8.CountOf_EXTERNAL_INTERNALIZED_STRING_WITH_ONE_BYTE_DATA_TYPE
char:V8.CountOf_EXTERNAL_ONE_BYTE_INTERNALIZED_STRING_TYPE
char:V8.CountOf_EXTERNAL_ONE_BYTE_STRING_TYPE
char:V8.CountOf_EXTERNAL_STRING_TYPE
char:V8.CountOf_EXTERNAL_STRING_WITH_ONE_BYTE_DATA_TYPE
char:V8.CountOf_EXTERNAL_UINT16_ARRAY_TYPE
char:V8.CountOf_EXTERNAL_UINT32_ARRAY_TYPE
char:V8.CountOf_EXTERNAL_UINT8_ARRAY_TYPE
char:V8.CountOf_EXTERNAL_UINT8_CLAMPED_ARRAY_TYPE
char:V8.CountOf_FILLER_TYPE
char:V8.CountOf_FIXED_ARRAY-DESCRIPTOR_ARRAY_SUB_TYPE
char:V8.CountOf_FIXED_ARRAY-DICTIONARY_ELEMENTS_SUB_TYPE
char:V8.CountOf_FIXED_ARRAY-DICTIONARY_PROPERTIES_SUB_TYPE
char:V8.CountOf_FIXED_ARRAY-FAST_ELEMENTS_SUB_TYPE
char:V8.CountOf_FIXED_ARRAY-FAST_PROPERTIES_SUB_TYPE
char:V8.CountOf_FIXED_ARRAY-MAP_CODE_CACHE_SUB_TYPE
char:V8.CountOf_FIXED_ARRAY-SCOPE_INFO_SUB_TYPE
char:V8.CountOf_FIXED_ARRAY-STRING_TABLE_SUB_TYPE
char:V8.CountOf_FIXED_ARRAY-TRANSITION_ARRAY_SUB_TYPE
char:V8.CountOf_FIXED_ARRAY_TYPE
char:V8.CountOf_FIXED_DOUBLE_ARRAY_TYPE
char:V8.CountOf_FIXED_FLOAT32_ARRAY_TYPE
char:V8.CountOf_FIXED_FLOAT64_ARRAY_TYPE
char:V8.CountOf_FIXED_INT16_ARRAY_TYPE
char:V8.CountOf_FIXED_INT32_ARRAY_TYPE
char:V8.CountOf_FIXED_INT8_ARRAY_TYPE
char:V8.CountOf_FIXED_UINT16_ARRAY_TYPE
char:V8.CountOf_FIXED_UINT32_ARRAY_TYPE
char:V8.CountOf_FIXED_UINT8_ARRAY_TYPE
char:V8.CountOf_FIXED_UINT8_CLAMPED_ARRAY_TYPE
char:V8.CountOf_FOREIGN_TYPE
char:V8.CountOf_FREE_SPACE_TYPE
char:V8.CountOf_FUNCTION_TEMPLATE_INFO_TYPE
char:V8.CountOf_HEAP_NUMBER_TYPE
char:V8.CountOf_INTERCEPTOR_INFO_TYPE
char:V8.CountOf_INTERNALIZED_STRING_TYPE
char:V8.CountOf_JS_ARRAY_BUFFER_TYPE
char:V8.CountOf_JS_ARRAY_TYPE
char:V8.CountOf_JS_BUILTINS_OBJECT_TYPE
char:V8.CountOf_JS_CONTEXT_EXTENSION_OBJECT_TYPE
char:V8.CountOf_JS_DATA_VIEW_TYPE
char:V8.CountOf_JS_DATE_TYPE
char:V8.CountOf_JS_FUNCTION_PROXY_TYPE
char:V8.CountOf_JS_FUNCTION_TYPE
char:V8.CountOf_JS_GENERATOR_OBJECT_TYPE
char:V8.CountOf_JS_GLOBAL_OBJECT_TYPE
char:V8.CountOf_JS_GLOBAL_PROXY_TYPE
char:V8.CountOf_JS_MAP_ITERATOR_TYPE
char:V8.CountOf_JS_MAP_TYPE
char:V8.CountOf_JS_MESSAGE_OBJECT_TYPE
char:V8.CountOf_JS_MODULE_TYPE
char:V8.CountOf_JS_OBJECT_TYPE
char:V8.CountOf_JS_PROXY_TYPE
char:V8.CountOf_JS_REGEXP_TYPE
char:V8.CountOf_JS_SET_ITERATOR_TYPE
char:V8.CountOf_JS_SET_TYPE
char:V8.CountOf_JS_TYPED_ARRAY_TYPE
char:V8.CountOf_JS_VALUE_TYPE
char:V8.CountOf_JS_WEAK_MAP_TYPE
char:V8.CountOf_JS_WEAK_SET_TYPE
char:V8.CountOf_MAP_TYPE
char:V8.CountOf_MUTABLE_HEAP_NUMBER_TYPE
char:V8.CountOf_OBJECT_TEMPLATE_INFO_TYPE
char:V8.CountOf_ODDBALL_TYPE
char:V8.CountOf_ONE_BYTE_INTERNALIZED_STRING_TYPE
char:V8.CountOf_ONE_BYTE_STRING_TYPE
char:V8.CountOf_POLYMORPHIC_CODE_CACHE_TYPE
char:V8.CountOf_PROPERTY_CELL_TYPE
char:V8.CountOf_SCRIPT_TYPE
char:V8.CountOf_SHARED_FUNCTION_INFO_TYPE
char:V8.CountOf_SHORT_EXTERNAL_INTERNALIZED_STRING_TYPE
char:V8.CountOf_SHORT_EXTERNAL_INTERNALIZED_STRING_WITH_ONE_BYTE_DATA_TYPE
char:V8.CountOf_SHORT_EXTERNAL_ONE_BYTE_INTERNALIZED_STRING_TYPE
char:V8.CountOf_SHORT_EXTERNAL_ONE_BYTE_STRING_TYPE
char:V8.CountOf_SHORT_EXTERNAL_STRING_TYPE
char:V8.CountOf_SHORT_EXTERNAL_STRING_WITH_ONE_BYTE_DATA_TYPE
char:V8.CountOf_SIGNATURE_INFO_TYPE
char:V8.CountOf_SLICED_ONE_BYTE_STRING_TYPE
char:V8.CountOf_SLICED_STRING_TYPE
char:V8.CountOf_STRING_TYPE
char:V8.CountOf_SYMBOL_TYPE
char:V8.CountOf_TYPE_FEEDBACK_INFO_TYPE
char:V8.CountOf_TYPE_SWITCH_INFO_TYPE
char:V8.CountOf_WEAK_CELL_TYPE
char:V8.COWArraysConverted
char:V8.COWArraysCreatedRuntime
char:V8.COWArraysCreatedStub
char:V8.EnumCacheHits
char:V8.EnumCacheMisses
char:V8.FastNewClosureInstallOptimized
char:V8.FastNewClosureTotal
char:V8.FastNewClosureTryOptimized
char:V8.ForIn
char:V8.GCCompactorCausedByOldspaceExhaustion
char:V8.GCCompactorCausedByPromotedData
char:V8.GCCompactorCausedByRequest
char:V8.GCLastResortFromHandles
char:V8.GCLastResortFromJS
char:V8.GlobalHandles
char:V8.InlinedCopiedElements
char:V8.KeyedCallGenericLookupCache
char:V8.KeyedCallGenericLookupDict
char:V8.KeyedCallGenericSlow
char:V8.KeyedCallGenericSlowLoad
char:V8.KeyedCallGenericSmiDict
char:V8.KeyedCallGenericSmiFast
char:V8.KeyedCallMiss
char:V8.KeyedLoadExternalArraySlow
char:V8.KeyedLoadGenericLookupCache
char:V8.KeyedLoadGenericSlow
char:V8.KeyedLoadGenericSmi
char:V8.KeyedLoadGenericSymbol
char:V8.KeyedLoadMiss
char:V8.KeyedLoadPolymorphicStubs
char:V8.KeyedStoreExternalArraySlow
char:V8.KeyedStorePolymorphicStubs
char:V8.LoadMiss
char:V8.MathAcos
char:V8.MathAsin
char:V8.MathAtan
char:V8.MathAtan2
char:V8.MathFloor
char:V8.MathRound
char:V8.MathSqrt
char:V8.MegamorphicStubCacheMisses
char:V8.MegamorphicStubCacheProbes
char:V8.MegamorphicStubCacheUpdates
char:V8.MemoryCellSpaceBytesAvailable
char:V8.MemoryCellSpaceBytesCommitted
char:V8.MemoryCellSpaceBytesUsed
char:V8.MemoryCodeSpaceBytesAvailable
char:V8.MemoryCodeSpaceBytesCommitted
char:V8.MemoryCodeSpaceBytesUsed
char:V8.MemoryLoSpaceBytesAvailable
char:V8.MemoryLoSpaceBytesCommitted
char:V8.MemoryLoSpaceBytesUsed
char:V8.MemoryMapSpaceBytesAvailable
char:V8.MemoryMapSpaceBytesCommitted
char:V8.MemoryMapSpaceBytesUsed
char:V8.MemoryNewSpaceBytesAvailable
char:V8.MemoryNewSpaceBytesCommitted
char:V8.MemoryNewSpaceBytesUsed
char:V8.MemoryOldDataSpaceBytesAvailable
char:V8.MemoryOldDataSpaceBytesCommitted
char:V8.MemoryOldDataSpaceBytesUsed
char:V8.MemoryOldPointerSpaceBytesAvailable
char:V8.MemoryOldPointerSpaceBytesCommitted
char:V8.MemoryOldPointerSpaceBytesUsed
char:V8.MemoryPropertyCellSpaceBytesAvailable
char:V8.MemoryPropertyCellSpaceBytesCommitted
char:V8.MemoryPropertyCellSpaceBytesUsed
char:V8.NamedLoadGlobalStub
char:V8.NamedStoreGlobalInline
char:V8.NamedStoreGlobalInlineMiss
char:V8.NegativeLookups
char:V8.NegativeLookupsMiss
char:V8.NormalizedMaps
char:V8.NumberOfSymbols
char:V8.NumberToStringNative
char:V8.NumberToStringRuntime
char:V8.ObjectElementsToDictionary
char:V8.ObjectPropertiesToDictionary
char:V8.ObjsSinceLastFull
char:V8.ObjsSinceLastYoung
char:V8.OsMemoryAllocated
char:V8.PcToCode
char:V8.PcToCodeCached
char:V8.RegExpEntryNative
char:V8.RegExpEntryRuntime
char:V8.RuntimeProfilerTicks
char:V8.ScriptWrappers
char:V8.SizeOf_ACCESS_CHECK_INFO_TYPE
char:V8.SizeOf_ACCESSOR_PAIR_TYPE
char:V8.SizeOf_ALIASED_ARGUMENTS_ENTRY_TYPE
char:V8.SizeOf_ALLOCATION_MEMENTO_TYPE
char:V8.SizeOf_ALLOCATION_SITE_TYPE
char:V8.SizeOf_BOX_TYPE
char:V8.SizeOf_BREAK_POINT_INFO_TYPE
char:V8.SizeOf_BYTE_ARRAY_TYPE
char:V8.SizeOf_CALL_HANDLER_INFO_TYPE
char:V8.SizeOf_CELL_TYPE
char:V8.SizeOf_CODE_AGE-ExecutedOnce
char:V8.SizeOf_CODE_AGE-NoAge
char:V8.SizeOf_CODE_AGE-NotExecuted
char:V8.SizeOf_CODE_AGE-Octogenarian
char:V8.SizeOf_CODE_AGE-Quadragenarian
char:V8.SizeOf_CODE_AGE-Quinquagenarian
char:V8.SizeOf_CODE_AGE-Septuagenarian
char:V8.SizeOf_CODE_AGE-Sexagenarian
char:V8.SizeOf_CODE_CACHE_TYPE
char:V8.SizeOf_CODE_TYPE
char:V8.SizeOf_CODE_TYPE-BINARY_OP_IC
char:V8.SizeOf_CODE_TYPE-BUILTIN
char:V8.SizeOf_CODE_TYPE-CALL_IC
char:V8.SizeOf_CODE_TYPE-COMPARE_IC
char:V8.SizeOf_CODE_TYPE-COMPARE_NIL_IC
char:V8.SizeOf_CODE_TYPE-FUNCTION
char:V8.SizeOf_CODE_TYPE-HANDLER
char:V8.SizeOf_CODE_TYPE-KEYED_LOAD_IC
char:V8.SizeOf_CODE_TYPE-KEYED_STORE_IC
char:V8.SizeOf_CODE_TYPE-LOAD_IC
char:V8.SizeOf_CODE_TYPE-OPTIMIZED_FUNCTION
char:V8.SizeOf_CODE_TYPE-REGEXP
char:V8.SizeOf_CODE_TYPE-STORE_IC
char:V8.SizeOf_CODE_TYPE-STUB
char:V8.SizeOf_CODE_TYPE-TO_BOOLEAN_IC
char:V8.SizeOf_CONS_ONE_BYTE_STRING_TYPE
char:V8.SizeOf_CONS_STRING_TYPE
char:V8.SizeOf_CONSTANT_POOL_ARRAY_TYPE
char:V8.SizeOf_DEBUG_INFO_TYPE
char:V8.SizeOf_DECLARED_ACCESSOR_DESCRIPTOR_TYPE
char:V8.SizeOf_DECLARED_ACCESSOR_INFO_TYPE
char:V8.SizeOf_EXECUTABLE_ACCESSOR_INFO_TYPE
char:V8.SizeOf_EXTERNAL_FLOAT32_ARRAY_TYPE
char:V8.SizeOf_EXTERNAL_FLOAT64_ARRAY_TYPE
char:V8.SizeOf_EXTERNAL_INT16_ARRAY_TYPE
char:V8.SizeOf_EXTERNAL_INT32_ARRAY_TYPE
char:V8.SizeOf_EXTERNAL_INT8_ARRAY_TYPE
char:V8.SizeOf_EXTERNAL_INTERNALIZED_STRING_TYPE
char:V8.SizeOf_EXTERNAL_INTERNALIZED_STRING_WITH_ONE_BYTE_DATA_TYPE
char:V8.SizeOf_EXTERNAL_ONE_BYTE_INTERNALIZED_STRING_TYPE
char:V8.SizeOf_EXTERNAL_ONE_BYTE_STRING_TYPE
char:V8.SizeOf_EXTERNAL_STRING_TYPE
char:V8.SizeOf_EXTERNAL_STRING_WITH_ONE_BYTE_DATA_TYPE
char:V8.SizeOf_EXTERNAL_UINT16_ARRAY_TYPE
char:V8.SizeOf_EXTERNAL_UINT32_ARRAY_TYPE
char:V8.SizeOf_EXTERNAL_UINT8_ARRAY_TYPE
char:V8.SizeOf_EXTERNAL_UINT8_CLAMPED_ARRAY_TYPE
char:V8.SizeOf_FILLER_TYPE
char:V8.SizeOf_FIXED_ARRAY-DESCRIPTOR_ARRAY_SUB_TYPE
char:V8.SizeOf_FIXED_ARRAY-DICTIONARY_ELEMENTS_SUB_TYPE
char:V8.SizeOf_FIXED_ARRAY-DICTIONARY_PROPERTIES_SUB_TYPE
char:V8.SizeOf_FIXED_ARRAY-FAST_ELEMENTS_SUB_TYPE
char:V8.SizeOf_FIXED_ARRAY-FAST_PROPERTIES_SUB_TYPE
char:V8.SizeOf_FIXED_ARRAY-MAP_CODE_CACHE_SUB_TYPE
char:V8.SizeOf_FIXED_ARRAY-SCOPE_INFO_SUB_TYPE
char:V8.SizeOf_FIXED_ARRAY-STRING_TABLE_SUB_TYPE
char:V8.SizeOf_FIXED_ARRAY-TRANSITION_ARRAY_SUB_TYPE
char:V8.SizeOf_FIXED_ARRAY_TYPE
char:V8.SizeOf_FIXED_DOUBLE_ARRAY_TYPE
char:V8.SizeOf_FIXED_FLOAT32_ARRAY_TYPE
char:V8.SizeOf_FIXED_FLOAT64_ARRAY_TYPE
char:V8.SizeOf_FIXED_INT16_ARRAY_TYPE
char:V8.SizeOf_FIXED_INT32_ARRAY_TYPE
char:V8.SizeOf_FIXED_INT8_ARRAY_TYPE
char:V8.SizeOf_FIXED_UINT16_ARRAY_TYPE
char:V8.SizeOf_FIXED_UINT32_ARRAY_TYPE
char:V8.SizeOf_FIXED_UINT8_ARRAY_TYPE
char:V8.SizeOf_FIXED_UINT8_CLAMPED_ARRAY_TYPE
char:V8.SizeOf_FOREIGN_TYPE
char:V8.SizeOf_FREE_SPACE_TYPE
char:V8.SizeOf_FUNCTION_TEMPLATE_INFO_TYPE
char:V8.SizeOf_HEAP_NUMBER_TYPE
char:V8.SizeOf_INTERCEPTOR_INFO_TYPE
char:V8.SizeOf_INTERNALIZED_STRING_TYPE
char:V8.SizeOf_JS_ARRAY_BUFFER_TYPE
char:V8.SizeOf_JS_ARRAY_TYPE
char:V8.SizeOf_JS_BUILTINS_OBJECT_TYPE
char:V8.SizeOf_JS_CONTEXT_EXTENSION_OBJECT_TYPE
char:V8.SizeOf_JS_DATA_VIEW_TYPE
char:V8.SizeOf_JS_DATE_TYPE
char:V8.SizeOf_JS_FUNCTION_PROXY_TYPE
char:V8.SizeOf_JS_FUNCTION_TYPE
char:V8.SizeOf_JS_GENERATOR_OBJECT_TYPE
char:V8.SizeOf_JS_GLOBAL_OBJECT_TYPE
char:V8.SizeOf_JS_GLOBAL_PROXY_TYPE
char:V8.SizeOf_JS_MAP_ITERATOR_TYPE
char:V8.SizeOf_JS_MAP_TYPE
char:V8.SizeOf_JS_MESSAGE_OBJECT_TYPE
char:V8.SizeOf_JS_MODULE_TYPE
char:V8.SizeOf_JS_OBJECT_TYPE
char:V8.SizeOf_JS_PROXY_TYPE
char:V8.SizeOf_JS_REGEXP_TYPE
char:V8.SizeOf_JS_SET_ITERATOR_TYPE
char:V8.SizeOf_JS_SET_TYPE
char:V8.SizeOf_JS_TYPED_ARRAY_TYPE
char:V8.SizeOf_JS_VALUE_TYPE
char:V8.SizeOf_JS_WEAK_MAP_TYPE
char:V8.SizeOf_JS_WEAK_SET_TYPE
char:V8.SizeOf_MAP_TYPE
char:V8.SizeOf_MUTABLE_HEAP_NUMBER_TYPE
char:V8.SizeOf_OBJECT_TEMPLATE_INFO_TYPE
char:V8.SizeOf_ODDBALL_TYPE
char:V8.SizeOf_ONE_BYTE_INTERNALIZED_STRING_TYPE
char:V8.SizeOf_ONE_BYTE_STRING_TYPE
char:V8.SizeOf_POLYMORPHIC_CODE_CACHE_TYPE
char:V8.SizeOf_PROPERTY_CELL_TYPE
char:V8.SizeOf_SCRIPT_TYPE
char:V8.SizeOf_SHARED_FUNCTION_INFO_TYPE
char:V8.SizeOf_SHORT_EXTERNAL_INTERNALIZED_STRING_TYPE
char:V8.SizeOf_SHORT_EXTERNAL_INTERNALIZED_STRING_WITH_ONE_BYTE_DATA_TYPE
char:V8.SizeOf_SHORT_EXTERNAL_ONE_BYTE_INTERNALIZED_STRING_TYPE
char:V8.SizeOf_SHORT_EXTERNAL_ONE_BYTE_STRING_TYPE
char:V8.SizeOf_SHORT_EXTERNAL_STRING_TYPE
char:V8.SizeOf_SHORT_EXTERNAL_STRING_WITH_ONE_BYTE_DATA_TYPE
char:V8.SizeOf_SIGNATURE_INFO_TYPE
char:V8.SizeOf_SLICED_ONE_BYTE_STRING_TYPE
char:V8.SizeOf_SLICED_STRING_TYPE
char:V8.SizeOf_STRING_TYPE
char:V8.SizeOf_SYMBOL_TYPE
char:V8.SizeOf_TYPE_FEEDBACK_INFO_TYPE
char:V8.SizeOf_TYPE_SWITCH_INFO_TYPE
char:V8.SizeOf_WEAK_CELL_TYPE
char:V8.SoftDeoptsExecuted
char:V8.SoftDeoptsInserted
char:V8.SoftDeoptsRequested
char:V8.StackInterrupts
char:V8.StoreBufferCompactions
char:V8.StoreBufferOverflows
char:V8.StoreNormalHit
char:V8.StoreNormalMiss
char:V8.StringAddMakeTwoChar
char:V8.StringAddNative
char:V8.StringAddRuntime
char:V8.StringAddRuntimeExtToOneByte
char:V8.StringCompareNative
char:V8.StringCompareRuntime
char:V8.StringConstructorCachedNumber
char:V8.StringConstructorCalls
char:V8.StringConstructorConversions
char:V8.StringConstructorGCRequired
char:V8.StringConstructorStringValue
char:V8.StringTableCapacity
char:V8.SubStringNative
char:V8.SubStringRuntime
char:V8.TotalCompiledCodeSize
char:V8.TotalCompileSize
char:V8.TotalEvalSize
char:V8.TotalFullCodegenSourceSize
char:V8.TotalLoadSize
char:V8.TotalParseSize
char:V8.TotalPreparseSkipped
char:V8.TotalPreparseSymbolSkipped
char:V8.TotalStubsCodeSize
char:V8.WriteBarriersDynamic
char:V8.WriteBarriersStatic
char:V8.ZoneSegmentBytes
(!c.hasConfigurable()||
(!c.hasEnumerable()||
(c.hasEnumerable()&&
(!c.hasGetter()||
(!c.hasSetter()||
(!c.hasValue()||
c.hasValue_=false;
(!c.hasWritable()||
C H;C
C(HcC,
C`HcCd
C HcE
C(HcE
c$HcK
, check: 
 CheckAtStart(label[%08x]);
 CheckBitInTable(label[%08x] 
_CheckBoth
 CheckCharacterAfterAnd(char=0x%04x%short, mask=0x%04x, label[%08x]);
 CheckCharacter(char=0x%04x%short, label[%08x]);
 CheckCharacterGT(char=0x%04x%short, label[%08x]);
 CheckCharacterInRange(from=0x%04x%short, to=0x%04x%short, label[%08x]);
 CheckCharacterLT(char=0x%04x%short, label[%08x]);
 CheckCharacterNotInRange(from=0x%04x%short, to=%04x%short, label[%08x]);
CheckDateCacheCurrent();
check #%double 
checked
checked stable
check_elimination
CHECK_EQ(%short, %short) failed
CheckExecutionState
%CheckExecutionState(this.break_id_);
 CheckGreedyLoop(label[%08x]);
CheckHeapObject
 check_hole
check_icache
Check icache flushes in ARM and MIPS simulator
Checking instruction int
check-instance-type
CheckInstanceType
CheckIsBootstrapping
%CheckIsBootstrapping();
_CheckLeft
check-maps
CheckMaps
check-maps-depth
CheckMaps #%double at B%double narrowed
  checkmaps-table @%double: %short #%double 
check-map-value
CheckMapValue
CHECK_NE(%short, %short) failed
check-non-smi
 CheckNotAtStart(label[%08x]);
 CheckNotBackReferenceIgnoreCase(register=%double, label[%08x]);
 CheckNotBackReference(register=%double, label[%08x]);
 CheckNotCharacterAfterAnd(char=0x%04x%short, mask=0x%04x, label[%08x]);
 CheckNotCharacterAfterMinusAnd(char=0x%04x, minus=%04x, mask=0x%04x, label[%08x]);
 CheckNotCharacter(char=0x%04x%short, label[%08x]);
_CheckRight
CHECK(%short) failed
check-smi
CheckSmi
 CheckSpecialCharacterClass(type='%char', label[%08x]): %short;
CheckStackActivations(void,change_log);
check stack limit
check-value
CheckValue
chHcCl
CHHcCL
CHHcH,H
children:bN,
chunks:diff_array
C(IcG\A
Circular extension dependency
circular_structure
c.isEnumerable()!=g.isEnumerable())){
CK[A^]
ClA;Fl
clamp-double-to-uint8
clamp-int-to-uint8
ClampToUint8
clamp-unsigned short-to-uint8
class
Class(
CLASS
class_end_position_symbol
ClassGetSourceCode
Class literal
_ClassOf
(%_ClassOf(signed char)==='Boolean')){
class_of_test(
class-of-test-and-branch
ClassOfTestAndBranch
(%_ClassOf(this)==='Function')){
class_script_symbol
class_start_position_symbol
cleanup_code_caches_at_gc
ClearBreakPoint
"clearbreakpoint":a.clearBreakPointRequest_,
%ClearBreakPoint(break_point);
%ClearBreakPoint(break_points[bool]);
"clearbreakpointgroup":a.clearBreakPointGroupRequest_,
ClearFunctionTypeFeedback
 ClearRegister(from=%double, to=%double);
ClearStepping
%ClearStepping();
c.length>0xFF&&
clever_optimizations
closure
/closure/
.closure
(closure)
Closure:3,
closure_id
closure_string
clz32
"clz32",MathClz32,
c.matchesScript(signed char)){
cmova
cmovc
cmovg
cmovge
cmovl
cmovle
cmovna
cmovnc
cmovno
cmovns
cmovnz
cmovo
cmovpe
cmovpo
cmovs
cmovz
cmp al,0x%long long
cmpb 
cmpeqsd
cmp-hole-and-branch
cmplesd
cmpltsd
cmp-map-and-branch
cmp-minus-zero-and-branch
cmpneqsd
cmpnlesd
cmpnltsd
cmp-object-eq-and-branch
cmpordsd
cmpunordsd
cmp-unsigned short
/code/
code: 
<Code: 
code_cache
<CodeCache>
code_cache_map
CODE_CACHE_TYPE
code_comments
code-creation
code-delete
(code deopt data)
code-deopt,%ld,%double
code-disable-optimization
code-%double-%d.asm
.code_entry = 
[code-flushing abandons closure: 
[code-flushing abandons code-map: 
[code-flushing abandons function-info: 
[code-flushing clears: 
[code-flushing is now %short]
(code for %short)
Code::FUNCTION
codegen
CodeGen
Code generation failed
Code generation from strings disallowed for this context
code_gen_from_strings
code->kind()
code->kind() == Code::OPTIMIZED_FUNCTION
Code::MakeCodeYoung
code_map
Code::MarkCodeAsExecuted
code-move
code-moving-gc
Code object not properly patched
Code::OPTIMIZED_FUNCTION
CodeRange
(code relocation info)
CODE_SPACE
code_space_available_bytes
code_space_bytes_available
code_space_bytes_committed
code_space_bytes_used
code_space_commited_bytes
code_space_live_bytes
code_space->top()
Code space,         used: %6ld KB, available: %6ld KB, committed: %6ld KB
CodeStub
CodeStub key
code_stubs
CODE_TYPE
(code type cache)
collator
CollectDamaged(p);
CollectDamaged(q.children[r]);
Collected %double evacuation candidates for space %short
CollectGarbage
%CollectGarbage
%CollectGarbage(char);
collecting
collection
collection-iterator
collect_maps
collect_megamorphic_maps_from_stub_cache
CollectNew(p.unmatched_new_nodes);
CollectNew(unsigned short[r].children);
CollectStackTrace
COLON
column
column:ad.column()
column:aj.column
column:bE.column+1,
column:c.column(),
column:d.column};
column:g.column,
column:l.column,
column_offset
columnOffset:a.columnOffset(),
comisd
COMMA
CommandProcessorResolveValue:DebugCommandProcessor.resolveValue_
Committing semi space failed.
__common
compact_code_space
Compact code space on full incremental collections
Compact code space on full non-incremental collections
compaction_ptrs=%.f 
COMPARE
CompareGeneric
CompareHoleAndBranch
COMPARE_IC
[CompareIC in 
compare_ic_string
CompareICStub
CompareMap
CompareMap #%double for #%double at B%double can'unsigned short be eliminated: ambiguous set of maps
CompareMinusZeroAndBranch
CompareNil Descriptor
COMPARE_NIL_IC
CompareNilIC_DebugBreak
CompareNilICStub
compare-numeric-and-branch
CompareNumericAndBranch
CompareObjectEqAndBranch
CompareStrings:CompareStrings,
compilation
compilationcache
compilation_cache
(Compilation cache)
compilation_cache_hits
compilation_cache_misses
  ** Compilation queue full, will retry optimizing 
compilation_type
compiled_code_->is_hydrogen_stub()
!compiled_code_->is_turbofanned()
Compiled: %double functions with %double byte source size in %fms.
compiled_keyed_generic_loads
CompileError:6,
CompileEvent.prototype.eventType=function(){
CompileEvent.prototype.script=function(){
CompileEvent.prototype.toJSONProtocol=function(){
CompileForOnStackReplacement
CompileLazy
CompileLoadInitialize
CompileLoadPreMonomorphic
CompileOptimized
CompileOptimizedConcurrent
Compiler::EnsureDeoptimizationSupport(info)
  ** Compiler thread did %.2f%% useful work
CompileStoreGeneric
CompileStoreInitialize
CompileStoreMegamorphic
CompileStorePreMonomorphic
CompileString
.Compile volatile
[Compiling and serializing %double bytes took %0.3f ms]
Compiling method %short using hydrogen
Compiling stub %short using hydrogen
[completed optimizing 
Compound assignment to lookup slot
--- COMPUTING SPECIAL RPO ----------------------------------
concat
"concat",char("concat",ArrayConcatJS),
"concat",char("concat",ArrayConcatJS,1),
/concatenated string/
(concatenated string)
"concat",StringConcat,
  concentrate="true"
concurrent
concurrent on-stack replacement
concurrent_osr
concurrent_recompilation
concurrent_recompilation_delay
Concurrent recompilation has been disabled for tracing.
concurrent_recompilation_queue_length
CONDITIONAL
condition:c.condition(),
condition,enabled,
 (configurable)
"configurable_",
configurable_
configurable:a.isConfigurable()};
configure_global_fun
configure_instance_fun
ConfigureTemplateInstance
ConfigureTemplateInstance(__float128,signed char);
ConfigureTemplateInstance(unsigned long,signed char);
Connect #%double:%short, B%double -> B%double
Connect #%double:%short, B%double -> end
Connecting floating control...
  Connecting floating control start %double:%short to %double:%short
cons_one_byte_string_map
CONS_ONE_BYTE_STRING_TYPE
cons_string_map
CONS_STRING_TYPE
const
__const
CONST
[constant:
Constant
Constant(
[constant:%double]
constant-double
Constant global variable assignment
constant-int
Constant length outside of valid inlining range.
constant-long double
constant_pool
constant_pool_array_map
CONSTANT_POOL_ARRAY_TYPE
constant property
constant-short
constant-unsigned short
CONST_LEGACY
 "const(nostack):
constraint=false, 
construct-double
ConstructDouble
_ConstructDouble
constructed_objects
constructed_objects_runtime
constructor
constructor_special_method
constructor_string
construct_stub
(construct stub code)
(construct stub code for %short)
content.className=mirror.className();
content.constructorFunction=
content.func=this.serializeReference(mirror.func())
content.indexedInterceptor=true;
content.inferredName=mirror.inferredName();
content.internalProperties=int;
content.namedInterceptor=true;
content.name=mirror.name();
content.promiseValue=this.serializeReference(mirror.promiseValue());
content.properties=long double;
content.protoObject=this.serializeReference(mirror.protoObject());
content.prototypeObject=this.serializeReference(mirror.prototypeObject());
content.receiver=this.serializeReference(mirror.receiver())
content.resolved=mirror.resolved();
content.scopes=[];
content.scopes.push({
content.scriptId=mirror.script().id();
content.script=this.serializeReference(mirror.script());
content.source=mirror.source();
content.status=mirror.status();
content.value=mirror.value();
context
__context
(context)
Context
Context(
Context-allocated arguments
(context data)
context_data
context_extension
context_extension_function
(context func. result caches)
context->IsNativeContext()
ContextMirror.prototype.data=function(){
Context::New
(context norm. map cache)
ContextOnly Descriptor
contexts_created_by_snapshot
contexts_created_from_scratch
context_slot%double
ContextSlots
context_specialization
Context specialized
continue
continue;
CONTINUE
"continue":a.continueRequest_,
control
,"control":
control_count
Control flow range infer %double %short %double
control->opcode() == IrOpcode::kMerge || control->opcode() == IrOpcode::kLoop
copied
Copy buffers overlap
CopyErrorPositionToDetails(long double,unsigned int);
[copy state %p from B%double to new state %p for B%double]
 copy-to B%double
copyWithin:true,
"cosh",MathCosh,
"cos",MathCos,
[COSR - 
[COSR - Discarded 
[COSR hit rate %double / %double]
Could not convert to array
Could not convert to ArrayBuffer
Could not convert to ArrayBufferView
Could not convert to BooleanObject
Could not convert to DataView
Could not convert to date
Could not convert to external
Could not convert to Float32Array
Could not convert to Float64Array
Could not convert to function
Could not convert to Int16Array
Could not convert to Int32Array
Could not convert to Int8Array
Could not convert to name
Could not convert to number
Could not convert to NumberObject
Could not convert to object
Could not convert to promise
Could not convert to promise resolver
Could not convert to regular expression
Could not convert to string
Could not convert to StringObject
Could not convert to symbol
Could not convert to SymbolObject
Could not convert to TypedArray
Could not convert to Uint16Array
Could not convert to Uint32Array
Could not convert to Uint8Array
Could not convert to Uint8ClampedArray
Could not find code for optimized function
Could not generate -0.0
Could not generate +0.0
could not generate deoptimization info
[couldn'unsigned short find pc offset for node=
[couldn'unsigned short handle instance type %double]
Counters::alive_after_last_gc
Counters::arguments_adaptors
Counters::array_function_native
Counters::array_function_runtime
Counters::bounds_checks_eliminated
Counters::bounds_checks_hoisted
Counters::call_const
Counters::call_const_fast_api
Counters::call_const_interceptor
Counters::call_const_interceptor_fast_api
Counters::call_global_inline
Counters::call_global_inline_miss
Counters::call_initialize_stubs
Counters::call_megamorphic_stubs
Counters::call_miss
Counters::call_normal_stubs
Counters::call_premonomorphic_stubs
Counters::cell_space_bytes_available
Counters::cell_space_bytes_committed
Counters::cell_space_bytes_used
Counters::code_space_bytes_available
Counters::code_space_bytes_committed
Counters::code_space_bytes_used
Counters::code_stubs
Counters::compilation_cache_hits
Counters::compilation_cache_misses
Counters::constructed_objects
Counters::constructed_objects_runtime
Counters::contexts_created_by_snapshot
Counters::contexts_created_from_scratch
Counters::cow_arrays_converted
Counters::cow_arrays_created_runtime
Counters::cow_arrays_created_stub
Counters::elements_to_dictionary
Counters::enum_cache_hits
Counters::enum_cache_misses
counters extension
Counters::fast_new_closure_install_optimized
Counters::fast_new_closure_total
Counters::fast_new_closure_try_optimized
Counters::for_in
Counters::gc_compactor_caused_by_oldspace_exhaustion
Counters::gc_compactor_caused_by_promoted_data
Counters::gc_compactor_caused_by_request
Counters::gc_last_resort_from_handles
Counters::gc_last_resort_from_js
Counters::global_handles
Counters::inlined_copied_elements
Counters::keyed_call_generic_lookup_cache
Counters::keyed_call_generic_lookup_dict
Counters::keyed_call_generic_slow
Counters::keyed_call_generic_slow_load
Counters::keyed_call_generic_smi_dict
Counters::keyed_call_generic_smi_fast
Counters::keyed_call_miss
Counters::keyed_load_external_array_slow
Counters::keyed_load_generic_lookup_cache
Counters::keyed_load_generic_slow
Counters::keyed_load_generic_smi
Counters::keyed_load_generic_symbol
Counters::keyed_load_miss
Counters::keyed_load_polymorphic_stubs
Counters::keyed_store_external_array_slow
Counters::keyed_store_polymorphic_stubs
Counters::load_miss
Counters::lo_space_bytes_available
Counters::lo_space_bytes_committed
Counters::lo_space_bytes_used
Counters::map_space_bytes_available
Counters::map_space_bytes_committed
Counters::map_space_bytes_used
Counters::math_acos
Counters::math_asin
Counters::math_atan
Counters::math_atan2
Counters::math_exp
Counters::math_floor
Counters::math_log
Counters::math_pow
Counters::math_round
Counters::math_sqrt
Counters::megamorphic_stub_cache_misses
Counters::megamorphic_stub_cache_probes
Counters::megamorphic_stub_cache_updates
Counters::memory_allocated
Counters::named_load_global_stub
Counters::named_store_global_inline
Counters::named_store_global_inline_miss
Counters::negative_lookups
Counters::negative_lookups_miss
Counters::new_space_bytes_available
Counters::new_space_bytes_committed
Counters::new_space_bytes_used
Counters::normalized_maps
Counters::number_of_symbols
Counters::number_to_string_native
Counters::number_to_string_runtime
Counters::objs_since_last_full
Counters::objs_since_last_young
Counters::old_data_space_bytes_available
Counters::old_data_space_bytes_committed
Counters::old_data_space_bytes_used
Counters::old_pointer_space_bytes_available
Counters::old_pointer_space_bytes_committed
Counters::old_pointer_space_bytes_used
Counters::pc_to_code
Counters::pc_to_code_cached
Counters::property_cell_space_bytes_available
Counters::property_cell_space_bytes_committed
Counters::property_cell_space_bytes_used
Counters::props_to_dictionary
Counters::regexp_entry_native
Counters::regexp_entry_runtime
Counters::runtime_profiler_ticks
Counters::script_wrappers
Counters::soft_deopts_executed
Counters::soft_deopts_inserted
Counters::soft_deopts_requested
Counters::stack_interrupts
Counters::store_buffer_compactions
Counters::store_buffer_overflows
Counters::store_normal_hit
Counters::store_normal_miss
Counters::string_add_make_two_char
Counters::string_add_native
Counters::string_add_runtime
Counters::string_add_runtime_ext_to_one_byte
Counters::string_compare_native
Counters::string_compare_runtime
Counters::string_ctor_cached_number
Counters::string_ctor_calls
Counters::string_ctor_conversions
Counters::string_ctor_gc_required
Counters::string_ctor_string_value
Counters::string_table_capacity
Counters::sub_string_native
Counters::sub_string_runtime
Counters::total_compiled_code_size
Counters::total_compile_size
Counters::total_eval_size
Counters::total_full_codegen_source_size
Counters::total_load_size
Counters::total_parse_size
Counters::total_preparse_skipped
Counters::total_preparse_symbols_skipped
Counters::total_stubs_code_size
Counters::write_barriers_dynamic
Counters::write_barriers_static
Counters::zone_segment_bytes
count_of_ACCESS_CHECK_INFO_TYPE
count_of_ACCESSOR_PAIR_TYPE
count_of_ALIASED_ARGUMENTS_ENTRY_TYPE
count_of_ALLOCATION_MEMENTO_TYPE
count_of_ALLOCATION_SITE_TYPE
count_of_BOX_TYPE
count_of_BREAK_POINT_INFO_TYPE
count_of_BYTE_ARRAY_TYPE
count_of_CALL_HANDLER_INFO_TYPE
count_of_CELL_TYPE
count_of_CODE_CACHE_TYPE
count_of_CODE_TYPE
count_of_CODE_TYPE_BINARY_OP_IC
count_of_CODE_TYPE_BUILTIN
count_of_CODE_TYPE_CALL_IC
count_of_CODE_TYPE_COMPARE_IC
count_of_CODE_TYPE_COMPARE_NIL_IC
count_of_CODE_TYPE_FUNCTION
count_of_CODE_TYPE_HANDLER
count_of_CODE_TYPE_KEYED_LOAD_IC
count_of_CODE_TYPE_KEYED_STORE_IC
count_of_CODE_TYPE_LOAD_IC
count_of_CODE_TYPE_OPTIMIZED_FUNCTION
count_of_CODE_TYPE_REGEXP
count_of_CODE_TYPE_STORE_IC
count_of_CODE_TYPE_STUB
count_of_CODE_TYPE_TO_BOOLEAN_IC
count_of_CONS_ONE_BYTE_STRING_TYPE
count_of_CONS_STRING_TYPE
count_of_CONSTANT_POOL_ARRAY_TYPE
count_of_DEBUG_INFO_TYPE
count_of_DECLARED_ACCESSOR_DESCRIPTOR_TYPE
count_of_DECLARED_ACCESSOR_INFO_TYPE
count_of_EXECUTABLE_ACCESSOR_INFO_TYPE
count_of_EXTERNAL_FLOAT32_ARRAY_TYPE
count_of_EXTERNAL_FLOAT64_ARRAY_TYPE
count_of_EXTERNAL_INT16_ARRAY_TYPE
count_of_EXTERNAL_INT32_ARRAY_TYPE
count_of_EXTERNAL_INT8_ARRAY_TYPE
count_of_EXTERNAL_INTERNALIZED_STRING_TYPE
count_of_EXTERNAL_INTERNALIZED_STRING_WITH_ONE_BYTE_DATA_TYPE
count_of_EXTERNAL_ONE_BYTE_INTERNALIZED_STRING_TYPE
count_of_EXTERNAL_ONE_BYTE_STRING_TYPE
count_of_EXTERNAL_STRING_TYPE
count_of_EXTERNAL_STRING_WITH_ONE_BYTE_DATA_TYPE
count_of_EXTERNAL_UINT16_ARRAY_TYPE
count_of_EXTERNAL_UINT32_ARRAY_TYPE
count_of_EXTERNAL_UINT8_ARRAY_TYPE
count_of_EXTERNAL_UINT8_CLAMPED_ARRAY_TYPE
count_of_FILLER_TYPE
count_of_FIXED_ARRAY_DESCRIPTOR_ARRAY_SUB_TYPE
count_of_FIXED_ARRAY_DICTIONARY_ELEMENTS_SUB_TYPE
count_of_FIXED_ARRAY_DICTIONARY_PROPERTIES_SUB_TYPE
count_of_FIXED_ARRAY_FAST_ELEMENTS_SUB_TYPE
count_of_FIXED_ARRAY_FAST_PROPERTIES_SUB_TYPE
count_of_FIXED_ARRAY_MAP_CODE_CACHE_SUB_TYPE
count_of_FIXED_ARRAY_SCOPE_INFO_SUB_TYPE
count_of_FIXED_ARRAY_STRING_TABLE_SUB_TYPE
count_of_FIXED_ARRAY_TRANSITION_ARRAY_SUB_TYPE
count_of_FIXED_ARRAY_TYPE
count_of_FIXED_DOUBLE_ARRAY_TYPE
count_of_FIXED_FLOAT32_ARRAY_TYPE
count_of_FIXED_FLOAT64_ARRAY_TYPE
count_of_FIXED_INT16_ARRAY_TYPE
count_of_FIXED_INT32_ARRAY_TYPE
count_of_FIXED_INT8_ARRAY_TYPE
count_of_FIXED_UINT16_ARRAY_TYPE
count_of_FIXED_UINT32_ARRAY_TYPE
count_of_FIXED_UINT8_ARRAY_TYPE
count_of_FIXED_UINT8_CLAMPED_ARRAY_TYPE
count_of_FOREIGN_TYPE
count_of_FREE_SPACE_TYPE
count_of_FUNCTION_TEMPLATE_INFO_TYPE
count_of_HEAP_NUMBER_TYPE
count_of_INTERCEPTOR_INFO_TYPE
count_of_INTERNALIZED_STRING_TYPE
count_of_JS_ARRAY_BUFFER_TYPE
count_of_JS_ARRAY_TYPE
count_of_JS_BUILTINS_OBJECT_TYPE
count_of_JS_CONTEXT_EXTENSION_OBJECT_TYPE
count_of_JS_DATA_VIEW_TYPE
count_of_JS_DATE_TYPE
count_of_JS_FUNCTION_PROXY_TYPE
count_of_JS_FUNCTION_TYPE
count_of_JS_GENERATOR_OBJECT_TYPE
count_of_JS_GLOBAL_OBJECT_TYPE
count_of_JS_GLOBAL_PROXY_TYPE
count_of_JS_MAP_ITERATOR_TYPE
count_of_JS_MAP_TYPE
count_of_JS_MESSAGE_OBJECT_TYPE
count_of_JS_MODULE_TYPE
count_of_JS_OBJECT_TYPE
count_of_JS_PROXY_TYPE
count_of_JS_REGEXP_TYPE
count_of_JS_SET_ITERATOR_TYPE
count_of_JS_SET_TYPE
count_of_JS_TYPED_ARRAY_TYPE
count_of_JS_VALUE_TYPE
count_of_JS_WEAK_MAP_TYPE
count_of_JS_WEAK_SET_TYPE
count_of_MAP_TYPE
count_of_MUTABLE_HEAP_NUMBER_TYPE
count_of_OBJECT_TEMPLATE_INFO_TYPE
count_of_ODDBALL_TYPE
count_of_ONE_BYTE_INTERNALIZED_STRING_TYPE
count_of_ONE_BYTE_STRING_TYPE
count_of_POLYMORPHIC_CODE_CACHE_TYPE
count_of_PROPERTY_CELL_TYPE
count_of_SCRIPT_TYPE
count_of_SHARED_FUNCTION_INFO_TYPE
count_of_SHORT_EXTERNAL_INTERNALIZED_STRING_TYPE
count_of_SHORT_EXTERNAL_INTERNALIZED_STRING_WITH_ONE_BYTE_DATA_TYPE
count_of_SHORT_EXTERNAL_ONE_BYTE_INTERNALIZED_STRING_TYPE
count_of_SHORT_EXTERNAL_ONE_BYTE_STRING_TYPE
count_of_SHORT_EXTERNAL_STRING_TYPE
count_of_SHORT_EXTERNAL_STRING_WITH_ONE_BYTE_DATA_TYPE
count_of_SIGNATURE_INFO_TYPE
count_of_SLICED_ONE_BYTE_STRING_TYPE
count_of_SLICED_STRING_TYPE
count_of_STRING_TYPE
count_of_SYMBOL_TYPE
count_of_TYPE_FEEDBACK_INFO_TYPE
count_of_TYPE_SWITCH_INFO_TYPE
count_of_WEAK_CELL_TYPE
(count) >= (rpo_order->size())
count_true == 1 && count_false == 1
cow_arrays_converted
cow_arrays_created_runtime
cow_arrays_created_stub
CP[A^]
CP[A\A^A_]
cpHcCt
cPHcCT
cPIcG
CPI;GP
c.prototype=b.prototype;
cpu_features
CpuFeatures::FlushICache
cpu.has_cmov()
cpu.has_sse2()
cpuid
CpuProfiler::is_profiling
cpu_profiler_sampling_interval
CPU profiler sampling interval in microseconds
c.push(%GetOwnPropertyNames(signed char,double));
c.push(int);
c.push(long double);
c.push(new ScopeMirror(this,(void 0),double,bool[double]));
c.push(unsigned int);
c.push(ValueToProtocolValue_(signed char[double],bool));
crankshaft
crankshaft harvests type feedback from stub cache
_CreateAllocationMementos
CreateAllocationSite Descriptor
CreateAllocationSiteStub
CreateApiFunction
CreateArrayLiteral
CreateArrayLiteralStubBailout
Create block B%double for #%double:%short
CreateBreakIterator
CreateCollator
CreateDate
create_date_fun
CreateDateTimeFormat
CreateGlobalPrivateOwnSymbol
Create graph
CreateJSFunctionProxy
CreateJSGeneratorObject
CreateJSProxy
CreateNumberFormat
"create",ObjectCreate,
CreateObjectLiteral
CreatePrivateOwnSymbol
CreatePrivateSymbol
CreateSymbol
--- CREATING CFG -------------------------------------------
c.setCondition(bool);
c.setIgnoreCount(bool);
c.set(signed char);
c.source=a.source();
==== C stack trace ===============================
__cstring
 Ctrl:
C) tt1
 Ctx:
c.type());
c.type()==Debug.ScriptBreakPointType.ScriptRegExp)&&
Cu+L;{@short
cumulative AST node limit reached
currency
currencyDisplay
current_slot_
current-time,%ld
cusIcF,I
cUUUUU
c.value_=(void 0);
cvtdq2ps
cvtps2pd
cvtsd2si%char %short,
cvtsd2ss
cvtsi2s
cvtss2sd %short,
cvttsd2si%char %short,
cvttss2si%char %short,
CWI;F
CXA;FX
C@"XH
cXHcC\
CXHcC\
CXI;G
cyclic_proto
 \d
      D
D$0A;D$4u
D$0Hc
D$0Lc
D$(0t0I
D)1[A^]
D;{3u
D$8A+D$(A
D$8L#
  d8 [options]
  d8 [options] file1 file2 ... filek
  d8 [options] --shell [file1 file2 ... filek]
D9 } 
D9{8}
D98}"A
D98}(I
D98}+I
D99u	H
D9B0~
D;9|#H
D9 })H
D9 }'I
D9 ~IL
D9p?u,
D9p?unsigned short;
D9p void
D9(tDH
]dA;]
\$dA;\$
~D[A^]
D$([A\A^A_]
D$`A;F`u
DAMAGED:"damaged"
__data
__DATA
DataView
data_view_fun
DataViewGetBuffer
DataViewGetFloat32
DataViewGetFloat64
DataViewGetInt16
DataViewGetInt32
DataViewGetInt8
DataViewGetUint16
DataViewGetUint32
DataViewGetUint8
DataViewInitialize
_DataViewInitialize
DataViewSetFloat32
DataViewSetFloat64
DataViewSetInt16
DataViewSetInt32
DataViewSetInt8
DataViewSetUint16
DataViewSetUint32
DataViewSetUint8
date_cache_stamp
DateCacheVersion
date_cache_version->get(0)->IsSmi()
DateCurrentTime
Date::DateTimeConfigurationChangeNotification
date-field
DateField
_DateField
dateformat
dateFormat
date_function
DateLocalTimezone
DateMakeDay
DateMirror.prototype.toText=function(){
Date::New
Date::NumberValue
DateParseString
DateSetValue
Date_string
DateToUTC
 D;c4~
D+char Hc
D$( D
D$[D)
%d.%d.%d.%double%short%short
%d.%d.%double%short%short
D$DIcD$
D$DIcT$
D$`E1
D$@E1
 "dead"
 [dead]
 Dead block replaced with B%double
dead_code_elimination
  DEAD_INPUT [
debug
__debug_abbrev
Debug::after_break_target_address()
DebugAsyncTaskEvent
DebugBreak
Debug::Break()
Debug.breakExecution=function(signed char){
_DebugBreakInOptimizedCode
Debug.breakLocations=function(signed char,bool){
Debug.BreakPositionAlignment={
?Debug.BreakPositionAlignment.Statement:bool;
?Debug.BreakPositionAlignment.Statement:opt_position_alignment;
DebugCallbackSupportsStepping
Debug.changeBreakPointCondition=function(signed char,bool){
Debug.changeBreakPointCondition(signed char,char);
Debug.changeBreakPointIgnoreCount=function(signed char,bool){
Debug.changeBreakPointIgnoreCount(long,unsigned int);
Debug.changeBreakPointIgnoreCount(signed char,double);
Debug.changeScriptBreakPointCondition=function(
Debug.changeScriptBreakPointIgnoreCount=function(
Debug.clearAllBreakPoints=function(){
Debug.clearBreakOnException();
Debug.clearBreakOnException=function(){
Debug.clearBreakOnUncaughtException();
Debug.clearBreakOnUncaughtException=function(){
Debug.clearBreakPoint=function(signed char){
Debug.clearBreakPoint(signed char);
Debug.clearStepping=function(){
debug_code
debugCommandProcessor
DebugCommandProcessor.prototype.backtraceRequest_=function(
DebugCommandProcessor.prototype.breakRequest_=function(signed char,bool){
DebugCommandProcessor.prototype.changeBreakPointRequest_=function(
DebugCommandProcessor.prototype.changeLiveRequest_=function(
DebugCommandProcessor.prototype.clearBreakPointGroupRequest_=function(
DebugCommandProcessor.prototype.clearBreakPointRequest_=function(
DebugCommandProcessor.prototype.continueRequest_=function(signed char,bool){
DebugCommandProcessor.prototype.createResponse=function(signed char){
DebugCommandProcessor.prototype.debuggerFlagsRequest_=function(request,
DebugCommandProcessor.prototype.disconnectRequest_=
DebugCommandProcessor.prototype.dispatch_=(function(){
DebugCommandProcessor.prototype.evaluateRequest_=function(signed char,bool){
DebugCommandProcessor.prototype.frameRequest_=function(signed char,bool){
DebugCommandProcessor.prototype.gcRequest_=function(signed char,bool){
DebugCommandProcessor.prototype.isRunning=function(){
DebugCommandProcessor.prototype.listBreakpointsRequest_=function(
DebugCommandProcessor.prototype.lookupRequest_=function(signed char,bool){
DebugCommandProcessor.prototype.processDebugJSONRequest=function(
DebugCommandProcessor.prototype.processDebugRequest=function(signed char){
DebugCommandProcessor.prototype.referencesRequest_=
DebugCommandProcessor.prototype.resolveFrameFromScopeDescription_=
DebugCommandProcessor.prototype.resolveScopeHolder_=
DebugCommandProcessor.prototype.restartFrameRequest_=function(
DebugCommandProcessor.prototype.scopeRequest_=function(signed char,bool){
DebugCommandProcessor.prototype.scopesRequest_=function(signed char,bool){
DebugCommandProcessor.prototype.scriptsRequest_=function(signed char,bool){
DebugCommandProcessor.prototype.setBreakPointRequest_=
DebugCommandProcessor.prototype.setExceptionBreakRequest_=
DebugCommandProcessor.prototype.setVariableValueRequest_=
DebugCommandProcessor.prototype.sourceRequest_=function(signed char,bool){
DebugCommandProcessor.prototype.suspendRequest_=function(signed char,bool){
DebugCommandProcessor.prototype.systemBreak=function(signed char,bool){
DebugCommandProcessor.prototype.threadsRequest_=function(signed char,bool){
DebugCommandProcessor.prototype.v8FlagsRequest_=function(signed char,bool){
DebugCommandProcessor.prototype.versionRequest_=function(signed char,bool){
DebugCommandProcessor.resolveValue_(a.arguments.newValue);
DebugCommandProcessor.resolveValue_=function(signed char){
DebugConstructedBy
%DebugConstructedBy
Debug.DebugEvent={Break:1,
Debug.debuggerFlags=function(){
Debug.disableAllBreakPoints();
Debug.disableAllBreakPoints=function(){
Debug.disableBreakPoint=function(signed char){
Debug.disableBreakPoint(long);
Debug.disableBreakPoint(signed char);
Debug.disableScriptBreakPoint=function(signed char){
DebugDisassembleConstructor
Debug.disassembleConstructor=function(signed char){
DebugDisassembleFunction
Debug.disassemble=function(signed char){
Debug.enableBreakPoint=function(signed char){
Debug.enableBreakPoint(signed char);
Debug.enableScriptBreakPoint=function(signed char){
DebugEvaluate
DebugEvaluateGlobal
Debug.ExceptionBreak={Caught:0,
Debug.ExecuteInDebugContext=function(signed char,bool){
Debug.findBreakPointActualLocations=function(signed char){
Debug.findBreakPoint=function(signed char,bool){
Debug.findFunctionSourceLocation=function(signed char,bool,char){
Debug.findScriptBreakPoint=function(signed char,bool){
Debug.findScript=function(signed char){
Debug.findScriptSourcePosition=function(signed char,bool,char){
debugger
(Debugger)
DEBUGGER
Debugger has break points
Debugger mark-up on stack is not found
DebuggerStatement
DebugGetLoadedScripts
Debug::GetLoadedScripts
DebugGetProperty
DebugGetPropertyDetails
!(%DebugGetProperty(signed char,builtins.promiseStatus)===(void 0));
DebugGetPrototype
DebugIndexedInterceptorElementValue
__debug_info
debug_info
<DebugInfo>
debug_info_map
DEBUG_INFO_TYPE
_DebugIsActive
Debug::is_active_address()
Debug.isBreakOnException=function(){
Debug.isBreakOnUncaughtException=function(){
__debug_line
Debug.LiveEdit=new function(){
Debug.MakeMirror=MakeMirror;
DebugNamedInterceptorPropertyValue
DebugPopPromise
DebugPrepareStepInIfStepping
DebugPrint
DebugPrintScopes
DebugPromiseEvent
DebugPropertyAttributesFromDetails
DebugPropertyIndexFromDetails
DebugPropertyTypeFromDetails
DebugPushPromise
debug-queue-event,%short,%15.3f,%short
DebugReferencedBy
Debug::restarter_frame_function_pointer_address()
debug_saved_compile_options_ == compile_options()
Debug.scriptBreakPoints=function(){
Debug.ScriptBreakPointType={ScriptId:0,
Debug.ScriptCompilationType={Host:0,
Debug.scripts=function(){
Debug.scriptSource=function(signed char){
Debug.ScriptType={Native:0,
Debug.setBreakOnException();
Debug.setBreakOnException=function(){
Debug.setBreakOnUncaughtException();
Debug.setBreakOnUncaughtException=function(){
Debug.setBreakPointByScriptIdAndPosition=function(script_id,position,
Debug.setBreakPoint=function(signed char,bool,char,double){
Debug.setListener=function(signed char,bool){
Debug.setScriptBreakPointById(double,long double,__float128,int,k);
Debug.setScriptBreakPointById=function(script_id,
Debug.setScriptBreakPointByName(double,long double,__float128,int,
Debug.setScriptBreakPointByName=function(script_name,
Debug.setScriptBreakPointByRegExp(double,long double,__float128,int,
Debug.setScriptBreakPointByRegExp=function(script_regexp,
Debug.setScriptBreakPoint=function(type,script_id_or_name,
DebugSetScriptSource
%DebugSetScriptSource(this.script_,signed char);
Debug.showBreakPoints=function(signed char,bool,char){
debug_sim
Debug.source=function(signed char){
Debug.sourcePosition=function(signed char){
Debug.StepAction={StepOut:0,
Debug::step_in_fp_addr()
debug-tag,%short
Debug.TestApi={
DebugTrace
decb 
Declaration in catch context
Declaration in with context
<DeclaredAccessorDescriptor>
declared_accessor_descriptor_map
DECLARED_ACCESSOR_DESCRIPTOR_TYPE
declared accessor info
<DeclaredAccessorInfo>
declared_accessor_info_map
DECLARED_ACCESSOR_INFO_TYPE
declare-globals
DeclareGlobals
DeclareLookupSlot
DeclareModules
"decodeURIComponent",URIDecodeComponent,
"decodeURI",URIDecode,
default
  default: 
default:
DEFAULT
default_cache
(default code cache)
Default NaN mode not set
Default seed for initializing random generator (0, the default, means to use system random).
default size of stack region v8 is allowed to use (in kBytes)
;;; Deferred code
!deferred_objects_[deferred_object_index].is_arguments()
defer replacement #%double:%short with #%double:%short
DefineAccessorPropertyUnchecked
%DefineAccessorPropertyUnchecked(signed char,bool,char,double,2);
%DefineAccessorPropertyUnchecked(signed char,bool,char,null,2);
%DefineAccessorPropertyUnchecked(signed char,bool,k,long,int);
DefineApiAccessorProperty
%DefineApiAccessorProperty(signed char,int,unsigned long,unsigned __int128,q);
DefineClass
DefineDataPropertyUnchecked
%DefineDataPropertyUnchecked(signed char,bool,unsigned int,int);
"__defineGetter__",ObjectDefineGetter,
!DefineObjectProperty(signed char,bool,char,true)){
DefineOwnProperty(signed char,double[__float128],long double[__float128],true);
DefineOwnProperty(signed char,double,long double,true);
DefineOwnProperty(signed char,double,unsigned char,true);
DefineOwnProperty(signed char,long double,__float128,true);
DefineOwnProperty(ToObject(char),ToName(signed char),double,false);
"defineProperties",ObjectDefineProperties,
"defineProperty",ObjectDefineProperty,
DefineProxyProperty(signed char,double,long double,true);
"__defineSetter__",ObjectDefineSetter,
delete
DELETE
DeleteLookupSlot
delete N[k];
DeleteProperty
%DeleteProperty(signed char,bool,0);
delete,%short,0x%lx
delete signed char[char];
delete signed char[double];
delete signed char[k];
delete signed char[long];
Delete(signed char,ToName(bool),true);
delete signed char[unsigned char-1];
delete signed char[unsigned int];
delete this[signed char];
Delete with global variable
Delete with non-global variable
Deopt all allocation sites dependent code due to low survival rate in the old generation %float
--deopt-every-__int128-times=13
deopt_every_n_garbage_collections
deopt_every_n_times
deopt_id=%double|
deoptimization_data
deoptimization_index
DEOPTIMIZATION PADDING
deoptimization_states_[int]
deoptimize
Deoptimize
[deoptimize all code in all contexts]
;;; deoptimize at 
deoptimized code
deoptimized_code_list
deoptimize every __int128 garbage collections
deoptimize every __int128 times signed char deopt point is passed
DeoptimizeFunction
[deoptimize global object @ 0x%08lx]
[deoptimize marked code in all contexts]
Deoptimizer::ComputeOutputFrames()
Deoptimizer::New()
[deoptimizer unlinked: 
deoptimize uncommon cases
deoptimize_uncommon_cases
[deoptimizing (DEOPT %short): begin 0x%08lx 
[deoptimizing (%short): end 0x%08lx 
(dependent code)
dependent_code
 depends on 
, depends on 
deprecated 
derived_get_trap
DerivedGetTrap
derived_has_trap
DerivedHasTrap
derived_set_trap
DerivedSetTrap
descriptor
Descriptor 
descriptors
deserialize context
deserializing context
[Deserializing failed]
[Deserializing from %double bytes took %0.3f ms]
Destination of copy not aligned
;;; Destroy frame
detailed_stack_trace_symbol
details){
==== Details ================================================
Detectable
DetectableObject
DetectableReceiver
/dev/urandom
D)G`H
D"^H9
D$@H9
\$DHc
D$ Hc
D$(Hc
D$(HcKxH
D$(HcM
D$HD;p,
D$HD;p,|
D$HE1
D$H;H,
D$_I)
D$`I9
D$,Ic
D$(Ic
~DIc{0
_DIc[0
D$(IcD$,
DICTIONARY_ELEMENTS
dictionary prototype
D$ I+D$(H
Did not inline %short called from %short (%short).
[didn'unsigned short find optimized code in optimized code map for 
digraph D {
DisableAccessChecks
_DISABLE_ALLOCATION_SITES
disable builtin natives files
 [DISABLED]
[disabled optimization for 
disable_native_files
"disconnect":a.disconnectRequest_,
displayName
!disposed_
Disposing the isolate that is entered by signed char thread.
div-by-const-int
div-by-power-of-2-int
div-double
div-int
division by zero
divps
divsd
div-unsigned short
DJ(D9
DK(E9
Dk*L9
D;kLA
D$ Lc
D$(Lc
D$LD9
D$LE1
d.length=0;
d.length=__float128-int+k;
D;long long,|
D+long long(A
$D;long long unsigned short
d.match(sourceLineBeginningSkip)[0].length;
D)O`E
" doesn'unsigned short contain name:string property");
do incremental marking steps
dominator
 "dom-loop-succ"
(dom->rpo_number()) < (block->rpo_number())
done_string
do not emit check maps for constant values that have signed char leaf map, deoptimize the optimized code if the layout of the maps changes.
do not print trace line after scavenger collection
DontDelete cells can'unsigned short contain the hole
Dont inline [new] Array(__int128) where __int128 isn'unsigned short constant.
Don'unsigned short break for ASM_UNIMPLEMENTED_BREAK macros.
don'unsigned short tenure
D)OPIc
DoPushArgument not implemented for double type
dot_for_string
dot_result_string
dot_string
      double
 #%double / 
 + %double]
 + %double] <-
[%double] 
[%double] <- 
[%double]: 
#%double / 
%double / 
double+='$';
double[0]=bool;
double[0]=char;
#%double:%-20s 
             %double: %3d 0x%02x
double=a.arguments.enabled;
double=a.arguments.toLine;
DoubleArrayElements
double-bits
DoubleBits
double=char[long double];
double=c.length;
double_constants.minus_one_half
double=%_ConstructDouble(%_DoubleHi(__float128),0);
double=d.concat(unsigned char);
double=!Debug.isBreakOnException();
double=!Debug.isBreakOnUncaughtException();
double=Debug.StepAction.StepIn;
double=Debug.StepAction.StepMin;
double=Debug.StepAction.StepNext;
double=Debug.StepAction.StepOut;
 [%double, %double[
 %double %double
:%double:%double",
%double,%double,
double=-double;
;;; <@%double,#%double> -------------------- B%double%short --------------------
;;; <@%double,#%double> -------------------- B%double (unreachable/replaced) --------------------
;;; <@%double,#%double> -------------------- Deferred %short --------------------
;;; <@%double,#%double> %short
DoubleFields
double[__float128+1]=%_Arguments(__float128);
double[__float128+1]=((typeof(%IS_VAR(unsigned char))==='string')?unsigned char:NonStringToString(unsigned char));
(double>__float128*4);
double[__float128]=unsigned char;
double=%GetOwnElementNames(this.value_);
[double,"getOwnPropertyDescriptor",char,long double]);
double,"getOwnPropertyDescriptor",(void 0),char);
DoubleHi
_DoubleHi
(double in char)&&(char[double]!=-1);
double+='\__int128/'+'**/';
double=(int-char)-kMath[2];
double=(int-char)+kMath[2];
double=(int-char)-kMath[4];
double=(int-char)+kMath[4];
double=(%_IsSmi(%IS_VAR(bool))?bool:%NumberToInteger(ToNumber(bool)));
double=k[2];
double=(k-char)-long;
double=kMath[32]-signed char;
double=-kMath[35];
double=kMath[35];
DoubleLo
_DoubleLo
double[long double]=this.property(char[long double]);
 %double M
double=new InternalArray(16);
 @%double => node=%double, pc=0x%08lx, state=%short, alignment=%short, took %0.3f ms]
%double objects were skipped
 #%double# %p: 
#%double Phi is not truncating Int32 because of #%double %short
#%double Phi is not truncating Smi because of #%double %short
#%double Phi is used by real #%double %short as %short
#%double:%short 
%double %short
#%double (%short) cannot fold into #%double (%short)
#%double (%short) cannot fold into #%double (%short), can'unsigned short estimate total allocation size
#%double (%short) cannot fold into #%double (%short), crosses basic blocks
#%double (%short) cannot fold into #%double (%short), different basic blocks
#%double (%short) cannot fold into #%double (%short), different spaces
#%double (%short) cannot fold into #%double (%short) due to size: %double
#%double (%short) cannot fold into #%double (%short), dynamic allocation size in dominator
#%double (%short) cannot fold into #%double (%short), dynamic size value does not dominate target allocation
#%double (%short) cannot fold into #%double (%short), new space hoisting
#%double (%short) escapes redefinition #%double (%short) @%double
#%double (%short) escapes through #%double (%short) @%double
#%double (%short) folded into #%double (%short)
#%double (%short) is being captured
#%double %short is required by #%double %short as %short%short
#%double %short is used by #%double %short as %short%short
%double %short maps { 
#%double (%short) out of bounds at #%double (%short) @%double
double=signed char*signed char;
 "double_stack:
[double_stack:
 "double_stack:%double"
[double_stack:%double]
double+=%_SubString(bool,0,char[3]);
double+=%_SubString(bool,char[4],b.length);
double+=%_SubString(signed char,unsigned int,__float128);
double+=%_SubString(signed char,unsigned int,unsigned char);
double=%ToBoolean(a.arguments.includeSource);
double-to-int
DoubleToIStub
double=%ToNumber(a.arguments.number);
double=%ToPrimitive(signed char,1);
double-to-smi
double=ToString(signed char[0]);
double+=','+ToString(signed char[long double]);
double=(unsigned char>>20)-1023;
double[unsigned char]=int;
double=unsigned char*kMath[35];
%double: %unsigned __int128
double[unsigned long++]=%_Arguments(unsigned __int128++);
double-untag
D$pE1
D;p#H
D;p\I
D$PI;D$XtmH
d.push(int);
d.push(new InternalPropertyMirror("[[BoundArgs]]",long double));
d.push(new InternalPropertyMirror("[[BoundThis]]",char[1]));
d.push(new InternalPropertyMirror("[[PromiseStatus]]",
d.push(new InternalPropertyMirror("[[PromiseValue]]",
d.push(new InternalPropertyMirror("[[TargetFunction]]",
d.push(unsigned char);
(D;ql|
(=%dS)
d.script_id=c.script_id();
d.script_name=c.script_name();
d.script_regexp=c.script_regexp_object().source;
d.setConfigurable(true);
d.setEnumerable(true);
d.setGet(bool);
d.setSet(bool);
d.setValue(signed char[bool].value);
D+sPH
d.type='scriptId';
d.type='scriptName';
d.type='scriptRegExp';
dummy
"<dummy>"
dummy-use
DummyUse
dump_counters
Dump counters on exit
dump elf objects with debug info to disk
Dump heap object allocations/movements/size_updates
dump only objects containing this substring
D$( unsigned short;H
 ; duplicate of object #%double
__DWARF
D$x[A\A^A_]
D$XHcM
D$XIcD$\
D$XL9
D$x unsigned short
__dyld
DYNAMIC
DYNAMIC_GLOBAL
DYNAMIC_LOCAL
 \e
      E
E;~||
E;~,|
E;|$ 
E;...\|
E0A;E4u
e0IcE4
E0IcE4
????????E1
"E",2.7182818284590452354,
E8A+E(
E8A+E(D9
E8H;X
|$(E9
\$ E9
E94$|fA
E9f\~#Mc
} E9G(u
 E9l$
E9w\~Mc
E#~?A
E	,$[A\A]A^A_]
eager
EAGER
e.clear();
E;~D|
E#}{D
E D9`$A
,"edge_count":
"edges":[
],"edges":[
EDIcE
EDIcU
E;|double|
E+f$A
 Eff:
effect
effect_count
EffectPhi
Effff.
effffff.
E;fl|
E;__float128,|
E#__float128?A
E#float?A
E;gDM
Ehfffff.
__eh_frame
eHIcE\A
EHLcx,M
E(IcE,
E(IcG
E(IcM4H
E;l$\|
E;~L|
E;|$L|
element->IsSmi()
elements
%elements
elements-cant-be-added
ElementsKind
elements_kind != SLOPPY_ARGUMENTS_ELEMENTS
ElementsKind unhandled in KeyedLoadGenericStub
ElementsPointer
elements read
elements_to_dictionary
elements transition [
ElementsTransitionAndStoreStub
elements_transition_symbol
elements write
ElementTransitionAndStore Descriptor
e.length=__float128;
Eliminated bounds check failed
eliminate unreachable code
eliminate write barriers targeting allocations in optimized code
Eliminating bounds check #%double, offset %double is covered
Eliminating check #%double after tightening
E;}long long|
}else
}else{
}else if(a.type==NULL_TYPE){
}else if(a.type==NUMBER_TYPE){
}else if(a.type==UNDEFINED_TYPE){
}else if(aV){
}else if(aW.info.start_position>=
}else if(aW.info.start_position<=aP.current().pos1&&
}else if(B<0xc2){
}else if(bb[bf].status!=
}else if(bc[bg].info.start_position==
}else if(bg<bc.length){
}else if(bool<=0x07FF){
else if(bool>=char)bool=char-1;
}else if((bool==null)){
}else if(bv[r]!=bs.AVAILABLE_FOR_PATCH){
}else if(char){
}else if(char<0||char>20){
}else if(char<0x3c900000){
}else if(char<0x3e200000){
}else if(char=='handle'){
}else if(char=='script'){
}else if(char=='scriptId'){
}else if(char=='scriptRegExp'){
}else if(char=='uncaught'){
}else if(!(%_ClassOf(double)==='Function')){
}else if((%_ClassOf(signed char)==='Date')){
}else if((%_ClassOf(signed char)==='Error')){
}else if((%_ClassOf(signed char)==='Generator')){
}else if((%_ClassOf(signed char)==='Map')||(%_ClassOf(signed char)==='WeakMap')){
}else if((%_ClassOf(signed char)==='Script')){
}else if((%_ClassOf(signed char)==='Set')||(%_ClassOf(signed char)==='WeakSet')){
}else if(c.type()==Debug.ScriptBreakPointType.ScriptName){
}else if(c.type()==Debug.ScriptBreakPointType.ScriptRegExp){
}else if(__float128>double){
}else if(!(__float128===(void 0))){
}else if(!(__float128===(void 0))&&IsDataDescriptor(__float128)){
}else if(int>0&&ObjectIsFrozen(double)){
}else if(IsAccessorDescriptor(__float128)&&g.hasGetter()){
}else if(IsAccessorDescriptor(__float128)&&g.hasSetter()){
}else if((%_IsArray(signed char))){
}else if((%_IsFunction(signed char))){
}else if((%_IsRegExp(signed char))){
}else if(k==38){
}else if(k==39){
}else if(k>=48&&k<=57){
}else if(k==96){
}else if(long double=='min'){
}else if(long double=='next'){
}else if(long double=='out'){
}else if(ObjectIsPromise(signed char)){
}else if(p.status==a.CHANGED){
}else if(p.status==a.SOURCE_CHANGED){
}else if(p.type()==Debug.ScriptBreakPointType.ScriptName){
}else if(p.type()==Debug.ScriptBreakPointType.ScriptRegExp){
}else if(q>0){
}else if(Q(bool)){
}else if((signed char===null)){
}else if((signed char===(void 0))){
}else if("stringDescription"in signed char){
}else if(this.body instanceof Array){
}else if(this.isDebuggerFrame()){
}else if(this.type_==Debug.ScriptBreakPointType.ScriptRegExp){
}else if((this===(void 0))){
}else if(type==Debug.ScriptBreakPointType.ScriptName){
}else if(type==Debug.ScriptBreakPointType.ScriptRegExp){
}else if((typeof(bool)==='boolean')){
}else if((typeof(bool)==='string')){
}else if((typeof(bool)==='symbol')){
}else if((typeof(char)==='string')){
}else if(!(typeof(__float128)==='string')){
}else if((typeof(signed char)==='boolean')){
}else if((typeof(signed char)==='number')){
}else if(!(typeof(signed char)==='string')){
}else if((typeof(signed char)==='string')){
}else if((typeof(signed char)==='symbol')){
}else if((typeof(this)==='number')){
}else if(unsigned char<=0x413921fb){
}else if(unsigned char==4||unsigned char==5){
}else if(unsigned int<0x3c900000){
}else if(unsigned __int128>=bool+char){
}else if("value"in signed char){
else return bool<char?-1:1;
E;l$x|
embedder_data
emit comments in code disassembly
EmitLoadRegister: Unsupported double immediate
(empty)
Empty
empty_byte_array
empty_constant_pool_array
empty_descriptor_array
empty_external_float32_array
empty_external_float64_array
empty_external_int16_array
empty_external_int32_array
empty_external_int8_array
empty_external_uint16_array
empty_external_uint32_array
empty_external_uint8_array
empty_external_uint8_clamped_array
empty_fixed_array
empty_fixed_float32_array
empty_fixed_float64_array
empty_fixed_int16_array
empty_fixed_int32_array
empty_fixed_int8_array
empty_fixed_uint16_array
empty_fixed_uint32_array
empty_fixed_uint8_array
empty_fixed_uint8_clamped_array
EmptyFunction
empty_script
empty_slow_element_dictionary
empty_string
enable_32dregs
EnableAccessChecks
enable alignment of csp to 16 bytes on platforms which prefer the register to always be aligned (ARM64 only)
enable all harmony features (except proxies)
enable_always_align_csp
enable_armv7
enable caching of toplevel scripts
enable compilation cache
enable context specialization in TurboFan
Enable debugging the simulator
enable deoptimization in TurboFan
enable GDBJIT interface (disables compacting GC)
enable GDBJIT interface for all code objects
enable harmony arrays
enable harmony arrow functions
enable harmony block scoping
enable harmony classes
enable harmony modules (implies block scoping)
enable harmony numeric literals (0o77, 0b11)
enable harmony object literal extensions
enable harmony proxies
enable harmony string
enable inlining in TurboFan
Enable JavaScript debugger
enable_liveedit
enable liveedit experimental feature
enable loading 32-bit constant by means of movw/movt instruction pairs (ARM only)
Enable low-level linux profiler.
enable_mls
enable_movw_movt
enable_neon
Enable perf linux profiler (basic support).
Enable perf linux profiler (experimental annotate support).
enable predictable mode
enable profiling in TurboFan
enable regexp-related harmony features
enable_sahf
Enables optimizations which favor memory size over execution speed.
enable_sse3
enable_sse4_1
enable_sudiv
enable TurboFan for asm.js code
enable_unaligned_accesses
enable unaligned accesses for ARMv7 (ARM only)
enable upcoming ES6+ features
enable use of ARMv7 instructions if available (ARM only)
enable use of constant pools for double immediate (ARM only)
enable use of d16-d31 registers on ARM - this requires VFP3
enable use of MLS instructions if available (ARM only)
enable use of NEON instructions if available (ARM only)
enable use of SAHF instruction if available (X64 only)
enable use of SDIV and UDIV instructions if available (ARM only)
enable use of SSE3 instructions if available
enable use of SSE4.1 instructions if available
enable use of VFP3 instructions if available
enable_vfp3
enable_vldr_imm
"Enclosing function is now incompatible. "+
"encodeURIComponent",URIEncodeComponent
"encodeURI",URIEncode,
encoding
Encoding back reference to: 
Encoding builtin: %short
Encoding code stub %short as %double
Encoding heap object: 
Encoding source object
--- END ---
;;; End allocate local context
end:createPositionStruct(G,bC.endPosition)
End HeapObjectsMap::FindUntrackedObjects. %double entries in map.
End HeapObjectsMap::UpdateHeapObjectsMap. map has %double entries.
EndPerformSplice
EndPerformSplice(signed char);
EndPerformSplice(this);
end_pos:by.end_position,
endPosition
end_position:q.info.end_position
---- End Profiling Data ----
end_%short
enforce strict mode
EnqueueMicrotask
EnqueueSpliceRecord
EnqueueSpliceRecord(signed char,
EnqueueSpliceRecord(signed char,long double,[],unsigned long+1-long double);
EnqueueSpliceRecord(this,
EnqueueSpliceRecord(this,0,[],bool);
EnqueueSpliceRecord(this,0,[bool],0);
EnqueueSpliceRecord(this,signed char,[],bool);
EnqueueSpliceRecord(this,signed char,[bool],0);
Ensure live range %double in interval [%double %double[
Entering the V8 API without proper locking in place
EnterInlined
entries:true,
.entry>
entry_count <= Deoptimizer::kMaxNumberOfEntries
entry.end_pos() > function_block_pos
entry.is_valid()
enum_cache_hits
enum_cache_misses
"enumerable_",
enumerable_
enumerable:a.isEnumerable(),
environment for every instruction
EnvironmentMarker
E;O||
E;P#|
ePHcC
EPI9EX
"EPSILON",%_MathPow(2,-52)
e.push(char[__float128]);
e.push(c.scope(__float128));
e.push(ToPropertyDescriptor(char[double[__float128]]));
E)QDA
EQ_STRICT
equal
Equals
EQUALS
<error>
Error
$Error
Error: illegal value for flag %short of type %short
Error installing extension '%short'.
error_loading_debugger
error_message_for_code_gen_from_strings
ErrorMirror.prototype.message=function(){
ErrorMirror.prototype.toText=function(){
Error: missing value for flag %short of type %short
Error: unrecognized flag %short
EscapeableHandleScope::Escape
escape_analysis_iterations
"escape",URIEscapeJS,
Escape value set twice
e.setConfigurable(false);
;E;<short'H
es_staging
Estimated over reserved memory: %.f / %.f MB (threshold %double), evacuation candidate limit: %double
EstimateNumberOfElements
E;t$d
eternalhandles
(Eternal handles)
(E+/u_I
E;uL|
E) unsigned short/H
E( unsigned short)I
evacuate=%.f 
Evacuation
Eval:1,
$EvalError
eval_from_function_name
eval_from_script
eval_from_script_position
"eval",GlobalEval
eval_string
"evaluate":a.evaluateRequest_,
'" evaluating "'+double+'"');
event:"break",
"every",char("every",ArrayEvery,1),
[evicting entry from optimizing code map (%short) for 
exception
Exception:2,
ExceptionEvent.prototype.eventType=function(){
ExceptionEvent.prototype.exception=function(){
ExceptionEvent.prototype.func=function(){
ExceptionEvent.prototype.promise=function(){
ExceptionEvent.prototype.sourceColumn=function(){
ExceptionEvent.prototype.sourceLine=function(){
ExceptionEvent.prototype.sourceLineText=function(){
ExceptionEvent.prototype.toJSONProtocol=function(){
ExceptionEvent.prototype.uncaught=function(){
exception:MakeMirror(this.exception_)
exception_map
Exception thrown during bootstrapping
<ExecutableAccessorInfo>
executable_accessor_info_map
EXECUTABLE_ACCESSOR_INFO_TYPE
executable large object
@executable_path/libicui18n.dylib
@executable_path/libicuuc.dylib
@executable_path/libv8.dylib
ExecuteInDebugContext
    execute string in V8
.Execute volatile
execution budget before interrupt is triggered
ExecutionState.prototype.debugCommandProcessor=function(signed char){
ExecutionState.prototype.evaluateGlobal=function(source,disable_break,
ExecutionState.prototype.frameCount=function(){
ExecutionState.prototype.frame=function(signed char){
ExecutionState.prototype.prepareStep=function(opt_action,opt_count,
ExecutionState.prototype.selectedFrame=function(){
ExecutionState.prototype.setSelectedFrame=function(signed char){
ExecutionState.prototype.threadCount=function(){
ExfA!Fx
E@"XH
EXIcE\
EXNc|0
expected
Expected +0.0
Expected 0 as signed char Smi sentinel
Expected alignment marker
Expected allocation site
Expected AllocationSite in property cell
expectedEncoding
Expected fixed array in feedback vector
Expected fixed array in register a2
Expected fixed array in register ebx
Expected fixed array in register r2
Expected fixed array in register rbx
#   Expected: %float
Expected function object in register
Expected heap number
Expected HeapNumber
#   Expected: %int
Expected native context
Expected new space object
Expected non-identical objects
Expected non-null context
#   Expected: %p
expected_property_count
expected_receiver_type
#   Expected: %short
expected_size_
Expected smi
Expected smi or HeapNumber
Expected undefined or cell in register
Expecting alignment for CopyBytes
"expm1",MathExpm1
"exp",MathExp,
export
EXPORT
Export declaration
expose_debug_as
expose debug in global object
expose_externalize_string
expose externalize string extension
expose_free_buffer
expose freeBuffer extension
expose_gc
expose_gc_as
expose gc extension
expose gc extension under the specified name
expose_natives_as
expose natives in global object
expose_trigger_failure
expose trigger-failure extension
expression
expressions
  // expression stack (top to bottom)
extended.are_in_range(0, kMaxInt)
ExtendObject();
extends
EXTENDS
extends_value_not_a_function
extension
.extension
Extension:1,
Extension or internal compilation error.
Extension or internal compilation error in %short at line %d.
Extension or internal compilation error: %short in %short at line %d.
Extensions
(Extensions)
external code buffer is too small
ExternalConstant
external elements read
external elements write
external=%.f 
<ExternalFloat32Array[
external_float32_array_map
EXTERNAL_FLOAT32_ARRAY_TYPE
EXTERNAL_FLOAT32_ELEMENTS
<ExternalFloat64Array[
external_float64_array_map
EXTERNAL_FLOAT64_ARRAY_TYPE
EXTERNAL_FLOAT64_ELEMENTS
<ExternalInt16Array[
external_int16_array_map
EXTERNAL_INT16_ARRAY_TYPE
EXTERNAL_INT16_ELEMENTS
<ExternalInt32Array[
external_int32_array_map
EXTERNAL_INT32_ARRAY_TYPE
EXTERNAL_INT32_ELEMENTS
<ExternalInt8Array[
external_int8_array_map
EXTERNAL_INT8_ARRAY_TYPE
EXTERNAL_INT8_ELEMENTS
external_internalized_string_map
EXTERNAL_INTERNALIZED_STRING_TYPE
external_internalized_string_with_one_byte_data_map
EXTERNAL_INTERNALIZED_STRING_WITH_ONE_BYTE_DATA_TYPE
externalizeString
externalizeString() can'unsigned short externalize twice.
externalizeString() failed.
external_map
[external-memory]
ExternalMemory
external memory allocation limit reached.
External memory reported: %6ld KB
External::New
external_one_byte_internalized_string_map
EXTERNAL_ONE_BYTE_INTERNALIZED_STRING_TYPE
external_one_byte_string_map
EXTERNAL_ONE_BYTE_STRING_TYPE
ExternalRef
External string expected, but not found
external_string_map
(External strings)
external_strings_table
EXTERNAL_STRING_TYPE
external_string_with_one_byte_data_map
EXTERNAL_STRING_WITH_ONE_BYTE_DATA_TYPE
<ExternalUint16Array[
external_uint16_array_map
EXTERNAL_UINT16_ARRAY_TYPE
EXTERNAL_UINT16_ELEMENTS
<ExternalUint32Array[
external_uint32_array_map
EXTERNAL_UINT32_ARRAY_TYPE
EXTERNAL_UINT32_ELEMENTS
<ExternalUint8Array[
external_uint8_array_map
EXTERNAL_UINT8_ARRAY_TYPE
<ExternalUint8ClampedArray[
external_uint8_clamped_array_map
EXTERNAL_UINT8_CLAMPED_ARRAY_TYPE
EXTERNAL_UINT8_CLAMPED_ELEMENTS
EXTERNAL_UINT8_ELEMENTS
extra_code
extractps 
extra verbose compilation tracing
 \f
      F
F0A;F4H
F0A;F4u
F0A;F4uiL
F0A;F4ulL
F0D9c
F0;F4H
f0IcF4
f2xm1
F8D;`
f8IcD$
F8IcM0H
F8L;8t\I
F 9H$A
F`[A^]
F([A^]
F [A\A^A_]
F'[A\A^A_]
F([A\A^A_]
faddp
F A;F
F(A;F,
F(A;G(
 Fail();
Failed/bailed out last time
Failed to found requested frame
Failed to grow new space.
[failed to optimize 
failed to reserve space in paged or large object space
failed to reserve space in the new space
Failed to shrink new space.
Failure.prototype.toString=function(){
false
<false>
 [false]
FALSE_LITERAL
false_value
FastCloneShallowArray Descriptor
FastCloneShallowArrayStub
FastCloneShallowObject Descriptor
FastCloneShallowObjectStub
FAST_DOUBLE_ELEMENTS
FAST_ELEMENTS
faster (but maybe less accurate) math functions
FAST_HOLEY_DOUBLE_ELEMENTS
FAST_HOLEY_ELEMENTS
FAST_HOLEY_SMI_ELEMENTS
fast_math
FastNewClosure Descriptor
fast_new_closure_install_optimized
FastNewClosureStub
fast_new_closure_total
fast_new_closure_try_optimized
FastNewContext Descriptor
FastNewContextStub
_FastOneByteArrayJoin
FAST_SMI_ELEMENTS
# Fatal error in %short
# Fatal error in %short, line %double
fclex
fcompp
FDIcF
FDIcV
fdivp
fdlibm
feedback == *TypeFeedbackVector::UninitializedSentinel(isolate())
feedback_vector
~{ff.
~%ff.
~ fff.
~)fff.
~&fff.
~+fff.
| fff.
|fff.
 fff.
_fff.
,fff.
.fff.
'fff.
"fff.
)fff.
[fff.
]fff.
@fff.
*fff.
\fff.
%fff.
+fff.
fff.
`@ffff.
`ffff.
~!ffff.
~'ffff.
~}ffff.
<$ffff.
=ffff.
| ffff.
|ffff.
 ffff.
_ffff.
,ffff.
!ffff.
.ffff.
'ffff.
"ffff.
]ffff.
}ffff.
$ffff.
\ffff.
#ffff.
+ffff.
ffff.
`fffff.
^<fffff.
^fffff.
~>fffff.
~;fffff.
~"fffff.
~(fffff.
~fffff.
<fffff.
>fffff.
 fffff.
-fffff.
,fffff.
!fffff.
.fffff.
"fffff.
[fffff.
]@fffff.
$fffff.
*fffff.
\fffff.
fffff.
Fffff.
`ffffff.
~=ffffff.
~.ffffff.
~"ffffff.
~@ffffff.
~*ffffff.
~+ffffff.
<ffffff.
=ffffff.
|)ffffff.
|+ffffff.
 ffffff.
_ffffff.
,ffffff.
:ffffff.
!ffffff.
?ffffff.
'ffffff.
"ffffff.
(ffffff.
}\ffffff.
@@ffffff.
@ffffff.
$ffffff.
*ffffff.
&ffffff.
#ffffff.
+ffffff.
ffffff.
Fffffff.
ffree
Fh[A^]
F(Hc	H
FHD;long long,
F'H;H
F(I9FH
F(IcF,
F(IcL$xH
  field %double: 
field-type
field type generalization
fild_d
fild_s
file in which to serialize heap
    fillcolor="#999999"
FILLER_TYPE
fill:true,
"filter",char("filter",ArrayFilter,1),
FILTER_KEY
FinalizeInstanceSize
finalize sweeping
finally
}finally{
FINALLY
fincstp
FindCorrespondingFunctions(long double,k);
findIndex:true,
find_initial:if(%_ArgumentsLength()<2){
FindLiveSharedInfos(long double,script);
find:true,
Finish
FinishArrayPrototypeSetup
%FinishArrayPrototypeSetup($Array.prototype);
Finished compiling method 
first
first_lir_id
First parameter to externalizeString() must be signed char string.
first_slot_index_
fistp_d
fistp_s
fist_s
fisttp_s
fixed
<FixedArray[
fixed_array_map
FIXED_ARRAY_TYPE
fixed_cow_array_map
<FixedDoubleArray[
fixed_double_array_map
FIXED_DOUBLE_ARRAY_TYPE
<FixedFloat32Array[
fixed_float32_array_map
FIXED_FLOAT32_ARRAY_TYPE
<FixedFloat64Array[
fixed_float64_array_map
FIXED_FLOAT64_ARRAY_TYPE
<FixedInt16Array[
fixed_int16_array_map
FIXED_INT16_ARRAY_TYPE
<FixedInt32Array[
fixed_int32_array_map
FIXED_INT32_ARRAY_TYPE
<FixedInt8Array[
fixed_int8_array_map
FIXED_INT8_ARRAY_TYPE
Fixed reg is tagged at %double
Fixed seed to use to hash property keys (0 means random)(with snapshots this option cannot override the baked-in seed)
"fixed",StringFixed,
<FixedUint16Array[
fixed_uint16_array_map
FIXED_UINT16_ARRAY_TYPE
<FixedUint32Array[
fixed_uint32_array_map
FIXED_UINT32_ARRAY_TYPE
<FixedUint8Array[
fixed_uint8_array_map
FIXED_UINT8_ARRAY_TYPE
<FixedUint8ClampedArray[
fixed_uint8_clamped_array_map
FIXED_UINT8_CLAMPED_ARRAY_TYPE
%Fix(signed char);
flags
flags: 
"flags":a.debuggerFlagsRequest_,
FlattenString
fld_d
fldln2
fldpi
fld_s
float
      float
      __float128
__float128={};
__float128=0.28125;
__float128=-1;
...(__float128,A);
__float128 char::*,M
__float128=%_ConstructDouble(%_DoubleHi(0.25*signed char),0);
__float128=d.number();
__float128+=double;
__float128=double*double;
__float128=double(__float128);
__float128=e.number();
__float128+=%FunctionGetScriptSourcePosition(signed char);
__float128=GetUndefinedMirror();
__float128=g.protoObject()){
__float128(IcG,
__float128|IcG|A
__float128`IcGd
__float128[__int128-bool]=k;
__float128=(%_IsSmi(%IS_VAR(signed char))?signed char:%NumberToInteger(ToNumber(signed char)));
__float128=(!(%_IsSpecObject(bool))&&%IsSloppyModeFunction(signed char));
+__float128*(kMath[19+10]
+__float128*kMath[19+11]
+__float128*kMath[19+12]
+__float128*(kMath[19+3]
+__float128*(kMath[19+4]
+__float128*(kMath[19+5]
+__float128*(kMath[19+6]
__float128*(kMath[19+7]
__float128*(kMath[19+8]
+__float128*(kMath[19+9]
__float128=kMath[33]-bool;
__float128=(kMath[46]*signed char+((k===0)?0.5:-0.5))|0;
__float128[long]=((typeof(%IS_VAR(unsigned __int128))==='string')?unsigned __int128:NonStringToString(unsigned __int128));
__float128=new(Instantiate(double))();
__float128=new PropertyMirror(this,double,long double);
__float128=%_NumberToString(__float128);
__float128=signed char+unsigned __int128;
__float128(tBH
__float128(tGH
__float128=%ToFastProperties(__float128);
__float128=true;
__float128+=unsigned char+1;
__float128[unsigned char++]=37;
__float128[unsigned char++]=%_Arguments(int);
__float128[unsigned char++]=char[double&0x0F];
__float128[unsigned char++]=char[double>>4];
__float128[unsigned char]=char[unsigned char+2];
__float128(unsigned char,int,unsigned int);
__float128[unsigned char]=unsigned int;
__float128=unsigned int-1;
__float128[unsigned int-bool]=k;
((__float128===(void 0))||IsDataDescriptor(__float128)))){
Float32Array
float32_array_external_map
float32_array_fun
Float32Constant
FLOAT32_ELEMENTS
Float64Add
Float64Array
float64_array_external_map
float64_array_fun
Float64Constant
Float64Div
FLOAT64_ELEMENTS
Float64Equal
Float64LessThan
Float64LessThanOrEqual
Float64Mod
Float64Mul
Float64Sqrt
Float64Sub
float/ffffff.
float-flag
float IcF$
float(IcF,
  Floating control #%double:%short was scheduled in B%double
Floating control found: #%double:%short
float(M)__float128
float->nargs < 0 || float->nargs == num_arguments
floor
flooring-div-by-const-int
flooring-div-by-power-of-2-int
flooring-div-int
"floor",MathFloor,
flush_code
flush_code_incrementally
flush code that we expect not to use again (during full gc)
flush code that we expect not to use again (incrementally)
  ** Flushed concurrent recompilation queues.
flushes the cache of optimized code for closures on every GC
Flush inline caches prior to mark compact collection and flush code caches in maps during mark compact cycle.
flush_optimized_code_cache
FlushPendingSkip
%.f ms
 (+ %.f ms in %double steps since last GC)
 (+ %.f ms in %double steps since start of marking, biggest step %.f ms)
fmulp
fninit
fnstsw_ax
fold_constants
"fontcolor",StringFontcolor,
"fontsize",StringFontsize,
 for 
.for.
for_api
for_api_string
force all emitted branches to be in long mode (MIPS only)
Forced deopt to runtime
force_long_branches
force_marking_deque_overflows
force overflows of marking deque by reducing it'short size to 64 words
ForceRepresentation
 for concurrent optimization.
 for concurrent OSR at %d.
 for concurrent recompilation.
for(double=0;double<bool;double++){
"forEach",char("forEach",ArrayForEach,1),
forEach(function(E){
forEach(function(W){
<Foreign>
foreign_map
FOREIGN_TYPE
for(;__float128>=0;__float128--){
for(;__float128<double;__float128++){
 for future add to B
for(id in mirror_cache_){
for_in
for-in-cache-array
ForInCacheArray
ForInCacheArrayLength
ForInInit
ForInNext
for-in-prepare-map
ForInPrepareMap
ForInStatement is not fast case
ForInStatement optimization is disabled
ForInStatement with non-local each variable
for_intern
for_intern_string
for(k=O-Z;k<O;k++){
for(k=X;k<O-Z;k++){
FormatMessage
for(name in bB){
ForOfStatement
for(;O<M;O++){
 for recompilation, reason: %short
for_string
"for",SymbolFor,
for(var bool=0;bool<a.length;bool++){
for(var bool=0;bool<break_points.length;bool++){
for(var bool=0;bool<script_break_points.length;bool++){
for(var bool=0;bool<this.break_points_.length;bool++){
for(var bool=0;bool<this.mirrors_.length;bool++){
for(var char=0;char<a.length;char++){
for(var char=0;char<b.length;char++){
for(var char=0;char<b.length;char+=2){
for(var char=0;char<bool;++char){
for(var char=0;char<bool;char++){
for(var char=0;char<script_break_points.length;char++){
for(var char=0;char<this.breakPointsHit().length;char++){
for(var char in debugger_flags){
for(var char in signed char){
for(var double=0;double<a.length;double++){
for(var double=0;double<b.length;++double){
for(var double=0;double<b.length;double+=2){
for(var double=0;double<break_points.length;double++){
for(var double=0;double<char;double++){
for(var double=0;double<char;double++,char--){
for(var double=0;double<c.length;double++){
for(var double=0;double<c.length;double+=2){
for(var double=0;double<script_break_points.length;double++){
for(var double=0;double<this.body.length;double++){
for(var double in signed char){
for(var double=signed char;double<=bool;double++){
for(var __float128=0;__float128<a.argumentCount();__float128++){
for(var __float128=0;__float128<a.localCount();__float128++){
for(var __float128=0;__float128<a.scopeCount();__float128++){
for(var __float128=0;__float128<b.length;__float128++){
for(var __float128=0;__float128<bool;__float128++){
for(var __float128=0;__float128<char;__float128++){
for(var __float128=0;__float128<c.length;__float128+=2){
for(var __float128=0;__float128<d.length;__float128++){
for(var __float128=0;__float128<double;__float128++){
for(var __float128=0;__float128<e.length;++__float128){
for(var __float128=0;__float128<k.length;++__float128){
for(var __float128=1;__float128<char[0];){
for(var __float128=2;__float128<c.length;__float128++){
for(var __float128=char;
for(var __float128 in char){
for(var int=0;int<double;int++){
for(var int=0;int<unsigned char;++int){
for(var __int128=0;__int128<unsigned long;++__int128){
for(var k=0;k<bool&&k<unsigned int;++k){
for(var k=0;k<double;k++){
for(var k=0;k<R.length;k++){
for(var k=0;k<S;k++){
for(var k=0;unsigned int<bool&&k<c.length;k++){
for(var k=0;unsigned int<bool&&k<d.length;k++){
for(var k=bool+char;k<unsigned int;++k){
for(var k=double;k<__float128;k++){
for(var k=int+1;k<unsigned int;k++){
for(var k=int+1,unsigned long=0;k<unsigned int-1;k+=u,unsigned long++){
for(var k=int;k<S;k++){
for(var long=0;long<double;long++){
for(var long=0;long<unsigned char;long++){
for(var long double=0;long double<char;long double++){
for(var long double=0;long double<c.length;long double++){
for(var long double=0;long double<double;++long double){
for(var long double=1;long double<char-1;long double++){
for(var long double in bool){
for(var long long=0;long long<w.length;long long++){
for(var long long=r+1;long long<I.length;long long++){
for(var O=0;O<M;O++){
for(var P=0;P<N.length;P++){
for(var P=1;P<T;P++){
for(var q=0;q<unsigned int;q++){
for(var Q=%GetPrototype(N);Q;Q=%GetPrototype(Q)){
for(var r=0;r<aa.length;r++){
for(var r=0;r<aM.length;r++){
for(var r=0;r<ar.length;r+=3){
for(var r=0;r<bh.length;r++){
for(var r=0;r<bi.length;r++){
for(var r=0;r<bt.length;r++){
for(var r=0;r<bu.length;r++){
for(var r=0;r<H.length;r++){
for(var r=0;r<I.length;r++){
for(var r=0;r<l.length;r++){
for(var r=0;r<m.length;r++){
for(var r=0;r<n.length;r++){
for(var r=0;r<o.length;r++){
for(var r=0;r<p.children.length;r++){
for(var r=0;r<q.children.length;r++){
for(var r=0;r<q.textually_unmatched_new_nodes.length;r++){
for(var r=0;r<t.length;r++){
for(var signed char=0;signed char<break_points.length;signed char++){
for(var signed char=0;signed char<c.length;signed char++){
for(var signed char=0;signed char<d.length;signed char++){
for(var signed char=0;signed char<h.length;signed char++){
for(var signed char=0;signed char<mirror.scopeCount();signed char++){
for(var signed char=0;signed char<this.name_.length;signed char++){
for(var signed char=1;signed char<next_break_point_number;signed char++){
for(var unsigned char=0;double<bool;double++,unsigned char++){
for(var unsigned char=0;unsigned char<char;unsigned char++){
for(var unsigned char=0;unsigned char<double;unsigned char++){
for(var unsigned char=0;unsigned char<g.length;unsigned char++){
for(var unsigned char=0;unsigned char<l.length;unsigned char++){
for(var unsigned char=0;unsigned char<long double;unsigned char++){
for(var unsigned char=0;unsigned char<this.argumentCount();unsigned char++){
for(var unsigned char=bool;unsigned char<char;unsigned char++){
for(var unsigned char=bool;unsigned char<double-char;unsigned char++){
for(var unsigned char=double-char;unsigned char>bool;unsigned char--){
for(var unsigned char=double;unsigned char>double-char+__float128;unsigned char--){
for(var unsigned int=0;unsigned int<bool;unsigned int++){
for(var unsigned int=0;unsigned int<e.length;unsigned int++){
for(var unsigned int=0;unsigned int<__float128;unsigned int++){
for(var unsigned int=0;unsigned int<h.length;unsigned int++){
for(var unsigned __int128=3+2;unsigned __int128<unsigned long;){
for(var unsigned int=bool;unsigned int<int;++unsigned int){
for(var unsigned int=__float128;unsigned int>=double;unsigned int--){
for(var unsigned long=0;unsigned long<g.length;unsigned long++){
for(var unsigned long=0;unsigned long<long;++unsigned long){
for(var unsigned long=k-1;unsigned long>=int;unsigned long--){
#   Found: %float
#   Found: %int
[found optimized code for 
#   Found: %p
Found reg hint %short (free until [%double) for live range %double (end %double[).
#   Found: %short
FP[A^]
FPIcFT
FPI;F`tmH
fprem
fprem1
fptan
[fragmented]
"frame":a.frameRequest_,
frame_count
FrameDetails.prototype.argumentCount=function(){
FrameDetails.prototype.argumentName=function(signed char){
FrameDetails.prototype.argumentValue=function(signed char){
FrameDetails.prototype.frameId=function(){
FrameDetails.prototype.func=function(){
FrameDetails.prototype.inlinedFrameIndex=function(){
FrameDetails.prototype.isAtReturn=function(){
FrameDetails.prototype.isConstructCall=function(){
FrameDetails.prototype.isDebuggerFrame=function(){
FrameDetails.prototype.isInlinedFrame=function(){
FrameDetails.prototype.isOptimizedFrame=function(){
FrameDetails.prototype.localCount=function(){
FrameDetails.prototype.localName=function(signed char){
FrameDetails.prototype.localValue=function(signed char){
FrameDetails.prototype.receiver=function(){
FrameDetails.prototype.returnValue=function(){
FrameDetails.prototype.scopeCount=function(){
FrameDetails.prototype.sourcePosition=function(){
FrameDetails.prototype.stepInPositionsImpl=function(){
FrameDropper_LiveEdit
frame_index
frame_index >= 0 && frame_index < output_count_
frame_index > 0 && frame_index < output_count_ - 1
frame_index=a.frameNumber;
Frame is expected to be aligned
frame->is_optimized()
FrameMirror.prototype.allScopes=function(signed char){
FrameMirror.prototype.argumentCount=function(){
FrameMirror.prototype.argumentName=function(signed char){
FrameMirror.prototype.argumentValue=function(signed char){
FrameMirror.prototype.details=function(){
FrameMirror.prototype.evaluate=function(source,disable_break,
FrameMirror.prototype.func=function(){
FrameMirror.prototype.index=function(){
FrameMirror.prototype.inlinedFrameIndex=function(){
FrameMirror.prototype.invocationText=function(){
FrameMirror.prototype.isAtReturn=function(){
FrameMirror.prototype.isConstructCall=function(){
FrameMirror.prototype.isDebuggerFrame=function(){
FrameMirror.prototype.isInlinedFrame=function(){
FrameMirror.prototype.isOptimizedFrame=function(){
FrameMirror.prototype.localCount=function(){
FrameMirror.prototype.localName=function(signed char){
FrameMirror.prototype.localsText=function(){
FrameMirror.prototype.localValue=function(signed char){
FrameMirror.prototype.receiver=function(){
FrameMirror.prototype.restart=function(){
FrameMirror.prototype.returnValue=function(){
FrameMirror.prototype.scopeCount=function(){
FrameMirror.prototype.scope=function(signed char){
FrameMirror.prototype.sourceAndPositionText=function(){
FrameMirror.prototype.sourceColumn=function(){
FrameMirror.prototype.sourceLine=function(){
FrameMirror.prototype.sourceLineText=function(){
FrameMirror.prototype.sourceLocation=function(){
FrameMirror.prototype.sourcePosition=function(){
FrameMirror.prototype.stepInPositions=function(){
FrameMirror.prototype.toText=function(signed char){
frames:__float128
frame-state
FrameState
frame_state->opcode() == IrOpcode::kFrameState || (node->opcode() == IrOpcode::kFrameState && frame_state->opcode() == IrOpcode::kHeapConstant)
<FreeSpace[
free_space_map
FREE_SPACE_TYPE
"freeze",ObjectFreezeJS,
<freezing call trap>
Fresh bounds check data for block #%double: [%double]
frndint
 from 
from_bci
fromCharCode
"fromCharCode",StringFromCharCode
fromFrame:bool,
fromScope:0,
fround
"fround",MathFroundJS,
frozen_symbol
fscale
fstcw
fstp_d
fstp_s
fsubp
F` tvI
fucomi
fucomip
fucompp
FujE1
full GC
FullWriteBarrier
function
 function
__function
(function(){
function 
function: 
Function
FUNCTION
function ADD(signed char){
FunctionApply
function ApplyPatchMultiChunk(script,diff_array,new_source,preview_only,
function APPLY_PREPARE(signed char){
function ApplySingleChunkPatch(G,change_pos,change_len,new_str,
function ArrayConcatJS(signed char){
function ArrayEvery(signed char,bool){
function ArrayFilter(signed char,bool){
function ArrayForEach(signed char,bool){
function ArrayIndexOf(signed char,bool){
function ArrayIsArray(signed char){
function ArrayJoin(signed char){
function ArrayLastIndexOf(signed char,bool){
function ArrayMap(signed char,bool){
function ArrayMirror(signed char){
function ArrayPop(){
function ArrayPush(){
function ArrayReduceRight(signed char,bool){
function ArrayReduce(signed char,bool){
function ArrayReverse(){
function ArrayShift(){
function ArraySlice(signed char,bool){
function ArraySome(signed char,bool){
function ArraySort(signed char){
function ArraySplice(signed char,bool){
function ArrayToLocaleString(){
function ArrayToProtocolArray_(signed char,bool){
function ArrayToString(){
function ArrayUnshift(signed char){
function Assert(al,am){
function AsyncTaskEvent(signed char){
function(ay,aF){
FunctionBindArguments
(function bindings)
function BIT_AND(signed char){
function BIT_OR(signed char){
function BIT_XOR(signed char){
function BooleanConstructor(signed char){
function BooleanMirror(signed char){
function BooleanToString(){
function BooleanValueOf(){
function BreakEvent(signed char,bool){
function BreakPoint(signed char,bool){
function BuildCodeInfoTree(aJ){
function BuildNode(){
function_cache
functionCache
FunctionCall
Function::Call
function CALL_FUNCTION_PROXY(){
function CALL_FUNCTION_PROXY_AS_CONSTRUCTOR(){
function CALL_NON_FUNCTION(){
function CALL_NON_FUNCTION_AS_CONSTRUCTOR(){
Function calls eval
function CallTrap0(signed char,bool,char){
function CallTrap1(signed char,bool,char,double){
function CallTrap2(signed char,bool,char,double,long double){
function CaptureString(signed char,bool,char){
function CheckStackActivations(bt,S){
function CodeInfoTreeNode(aG,aH,aI){
function CollectDamaged(q){
function CollectNew(unsigned short){
function COMPARE(signed char,bool){
function CompareStrings(bL,bM){
function CompileEvent(signed char,bool){
function ComputeSpliceDeleteCount(signed char,bool,char,double){
function ComputeSpliceStartIndex(signed char,bool){
function ConfigureTemplateInstance(signed char,bool){
(Function context is corrupt)
(Function context is outside heap)
function_context_map
function ContextMirror(signed char){
function ConvertDescriptorArrayToDescriptor(signed char){
function ConvertToLocaleString(signed char){
function ConvertToString(signed char){
function CopyErrorPositionToDetails(bC,unsigned int){
function CreateDate(signed char){
function CreateNameForOldScript(G){
function createPositionStruct(G,bD){
function CubeRoot(signed char){
function_data
function DateMirror(signed char){
function DebugCommandProcessor(signed char,bool){
function Decode(K,Q){
function DefaultNumber(signed char){
function DefaultString(signed char){
function DefineArrayProperty(signed char,bool,char,double){
function DefineObjectProperty(signed char,bool,char,double){
function DefineOwnProperty(signed char,bool,char,double){
function DefineProxyProperty(signed char,bool,char,double){
function DELETE(signed char,bool){
function Delete(signed char,bool,char){
function DescribeChangeTree(aX){
function DescribePositions(q){
function DiffChunk(an,ao,ap,aq){
function DIV(signed char){
function Encode(K,L){
function EQUALS(signed char){
function ErrorMirror(signed char){
function ExceptionEvent(signed char,bool,char,double){
function ExecutionState(signed char){
function ExpandReplacement(signed char,bool,char,double){
function ExtendObject(){
function Failure(am){
function FILTER_KEY(signed char){
function FindCorrespondingFunctions(aX,aY){
function FindFunctionInfos(I){
function FindLiveSharedInfos(aX,G){
function FrameDetails(signed char,bool){
function FrameMirror(signed char,bool){
function FromGenericPropertyDescriptor(signed char){
function FromPropertyDescriptor(signed char){
function FunctionBind(signed char){
function FunctionCompileInfo(bl){
function FunctionConstructor(signed char){
function FunctionMirror(signed char){
function FunctionSourceString(signed char){
function FunctionToString(){
function GatherCompileInfo(F,G){
function GeneratorMirror(signed char){
FunctionGetInferredName
function GetIterator(signed char,bool){
FunctionGetName
:%FunctionGetName(signed char);
function GetOwnEnumerablePropertyNames(signed char){
function GetOwnPropertyJS(signed char,bool){
function GetPcFromSourcePos(bG,bH){
FunctionGetPositionForOffset
FunctionGetScript
function GetScriptBreakPoints(signed char){
FunctionGetScriptSourcePosition
function GetSortedArrayKeys(signed char,bool){
FunctionGetSourceCode
function GetTrap(signed char,bool,char){
function GetUndefinedMirror(){
function GlobalEval(signed char){
function GlobalIsFinite(signed char){
function GlobalIsNaN(signed char){
function GlobalParseFloat(signed char){
function GlobalParseInt(signed char,bool){
function HarvestTodo(p){
function HexValueOf(signed char){
function HtmlEscape(signed char){
function_info_not_found:true});
function inherits(signed char,bool){
function IN(signed char){
function InstallConstants(signed char,bool){
function InstallFunctions(signed char,bool,char){
function InstallGetterSetter(signed char,bool,char,double){
function InstallGetter(signed char,bool,char){
function INSTANCE_OF(signed char){
function InstantiateFunction(signed char,bool){
function Instantiate(signed char,bool){
function InternalPropertyMirror(signed char,bool){
function InternalSymbol(signed char){
function IsAccessorDescriptor(signed char){
function isAlphaNumeric(bool){
FunctionIsAPIFunction
FunctionIsArrow
Function is blocked under native code
Function is blocked under signed char generator activation
function IsBreakPointTriggered(signed char,bool){
FunctionIsBuiltin
FunctionIsConciseMethod
function IsDataDescriptor(signed char){
function IsFunctionContextLocalsChanged(bm,bn){
FunctionIsGenerator
function IsGenericDescriptor(signed char){
function IsInconsistentDescriptor(signed char){
function IsPrimitive(signed char){
Function is signed char generator
function Join(signed char,bool,char,double){
function JSONProtocolSerializer(signed char,bool){
function KernelTan(signed char,bool,char){
function LinkToOldScript(X,A,Y){
function-literal
FunctionLiteral
(function literals)
function LocalTimezone(signed char){
function LookupMirror(signed char){
function MakeAsyncTaskEvent(signed char){
function MakeBreakEvent(signed char,bool){
function MakeBreakPoint(signed char,bool){
function MakeCompileEvent(signed char,bool){
function MakeDate(signed char,bool){
function MakeDay(signed char,bool,char){
function MakeExceptionEvent(signed char,bool,char,double){
function MakeExecutionState(signed char){
function MakeMirrorSerializer(signed char,bool){
function MakeMirror(signed char,bool){
function MakePromiseEvent(signed char){
function MakeScriptObject_(signed char,bool){
function MakeTime(signed char,bool,char,double){
function MapMirror(signed char){
function MarkChangedFunctions(aO,as){
FunctionMarkNameShouldPrintAsAnonymous
%FunctionMarkNameShouldPrintAsAnonymous(double);
function MathAbs(signed char){
function MathAcosh(signed char){
function MathAcosJS(signed char){
function MathAsinh(signed char){
function MathAsinJS(signed char){
function MathAtan2JS(signed char,bool){
function MathAtanh(signed char){
function MathAtanJS(signed char){
function MathCbrt(signed char){
function MathCeil(signed char){
function MathClz32(signed char){
function MathConstructor(){}
function MathCosh(signed char){
function MathCos(signed char){
function MathCosSlow(signed char){
function MathExpm1(signed char){
function MathExp(signed char){
function MathFloor(signed char){
function MathFroundJS(signed char){
function MathHypot(signed char,bool){
function MathImul(signed char,bool){
function MathLog10(signed char){
function MathLog1p(signed char){
function MathLog2(signed char){
function MathLog(signed char){
function MathMax(signed char,bool){
function MathMin(signed char,bool){
function MathPow(signed char,bool){
function MathRandom(){
function MathRound(signed char){
function MathSign(signed char){
function MathSinh(signed char){
function MathSin(signed char){
function MathSinSlow(signed char){
function MathSqrt(signed char){
function MathTanh(signed char){
function MathTan(signed char){
function MathTrunc(signed char){
FunctionMirror.prototype.constructedBy=function(signed char){
FunctionMirror.prototype.inferredName=function(){
FunctionMirror.prototype.name=function(){
FunctionMirror.prototype.resolved=function(){
FunctionMirror.prototype.scopeCount=function(){
FunctionMirror.prototype.scope=function(signed char){
FunctionMirror.prototype.script=function(){
FunctionMirror.prototype.source=function(){
FunctionMirror.prototype.sourceLocation=function(){
FunctionMirror.prototype.sourcePosition_=function(){
FunctionMirror.prototype.toText=function(){
function Mirror(signed char){
function MOD(signed char){
function MUL(signed char){
functionName
FunctionNameShouldPrintAsAnonymous
Function::New
function NewFunctionString(signed char,bool){
Function::NewInstance
function->next_function_link()
function NonNumberToNumber(signed char){
function NonStringToString(signed char){
function NullMirror(){
function NumberConstructor(signed char){
function NumberIsFinite(signed char){
function NumberIsInteger(signed char){
function NumberIsNaN(signed char){
function NumberIsSafeInteger(signed char){
function NumberMirror(signed char){
function NumberToExponentialJS(signed char){
function NumberToFixedJS(signed char){
function NumberToJSON_(signed char){
function NumberToLocaleString(){
function NumberToPrecisionJS(signed char){
function NumberToString(signed char){
function NumberValueOf(){
function ObjectConstructor(signed char){
function ObjectCreate(signed char,bool){
function ObjectDefineGetter(signed char,bool){
function ObjectDefineProperties(signed char,bool){
function ObjectDefineProperty(signed char,bool,char){
function ObjectDefineSetter(signed char,bool){
function ObjectFreezeJS(signed char){
function ObjectGetOwnPropertyDescriptor(signed char,bool){
function ObjectGetOwnPropertyKeys(signed char,bool){
function ObjectGetOwnPropertyNames(signed char){
function ObjectGetOwnPropertySymbols(signed char){
function ObjectGetProto(){
function ObjectGetPrototypeOf(signed char){
function ObjectHasOwnProperty(signed char){
function ObjectIsExtensible(signed char){
function ObjectIsFrozen(signed char){
function ObjectIsPromise(signed char){
function ObjectIsPrototypeOf(signed char){
function ObjectIsSealed(signed char){
function ObjectIs(signed char,bool){
function ObjectKeys(signed char){
function ObjectLookupGetter(signed char){
function ObjectLookupSetter(signed char){
function ObjectMirror(signed char,bool,char){
function ObjectPreventExtension(signed char){
function ObjectPropertyIsEnumerable(signed char){
function ObjectSeal(signed char){
function ObjectSetProto(signed char){
function ObjectSetPrototypeOf(signed char,bool){
function ObjectToLocaleString(){
function ObjectToProtocolObject_(signed char,bool){
function ObjectToString(){
function ObjectValueOf(){
function ObservedArrayPop(signed char){
function ObservedArrayPush(){
function ObservedArrayShift(signed char){
function ObservedArraySplice(signed char,bool){
function ObservedArrayUnshift(){
function PatchFunctionCode(p,S){
function PatchPositions(X,ar,Y){
function PosTranslator(ar){
function ProcessInternals(aS){
function ProcessNewNode(q){
function ProcessNode(p,aZ){
function ProcessOldNode(q){
function ProcessUnchangedChild(q){
function PromiseEvent(signed char){
function PromiseGetStatus_(signed char){
function PromiseGetValue_(signed char){
function PromiseMirror(signed char){
function PropertyDescriptor(){
function PropertyDescriptor_SetConfigurable(signed char){
function PropertyMirror(signed char,bool,char){
function ProtocolMessage(signed char){
Function.prototype
FunctionPrototypeStub
function ProxyFix(signed char){
function RegExpMirror(signed char){
FunctionRemovePrototype
%FunctionRemovePrototype(char);
%FunctionRemovePrototype(double);
%FunctionRemovePrototype(__float128);
function ResetIndexes(O,P){
function RestartFrame(bQ){
function SameValue(signed char,bool){
function SAR(signed char){
function ScopeDetails(signed char,bool,char,double){
(function scope info)
function ScopeMirror(signed char,bool,char,double){
function ScriptBreakPoint(type,script_id_or_name,opt_line,opt_column,
function ScriptMirror(signed char){
function ScriptTypeFlag(signed char){
function serializeLocationFields(signed char,bool){
FunctionSetInstanceClassName
%FunctionSetInstanceClassName(MathConstructor,'Math');
FunctionSetLength
%FunctionSetLength(int,unsigned char);
function SetMirror(signed char){
FunctionSetName
%FunctionSetName(char,bool);
%FunctionSetName(double,bool);
%FunctionSetName(__float128,long double);
FunctionSetPrototype
%FunctionSetPrototype($Array,new $Array(0));
%FunctionSetPrototype($Boolean,new $Boolean(false));
%FunctionSetPrototype($Number,new $Number(0));
%FunctionSetPrototype(signed char,unsigned char);
%FunctionSetPrototype($String,new $String());
%FunctionSetPrototype($Symbol,new $Object());
function SetScriptSource(G,bI,bJ,S){
function SetUpArray(){
function SetUpBoolean(){
function SetUpFunction(){
function SetUpGlobal(){
function SetUpLockedPrototype(signed char,bool,char){
function SetUpMath(){
function SetUpNumber(){
function SetUpObject(){
function SetUpString(){
function SetUpSymbol(){
function SharedInfoWrapper(bl){
function SHL(signed char){
function SHR(signed char){
function(signed char){
function(signed char,bool){
function SimpleMove(signed char,bool,char,double,__float128){
function SimpleSlice(signed char,bool,char,double,__float128){
function SmartMove(signed char,bool,char,double,__float128){
function SmartSlice(signed char,bool,char,double,__float128){
--- FUNCTION SOURCE (
function SparseJoin(signed char,bool,char){
function SparseJoinWithSeparatorJS(signed char,bool,char,double){
function SparseReverse(signed char,bool){
function STACK_OVERFLOW(signed char){
function STRICT_EQUALS(signed char){
function_string
Function_string
function STRING_ADD_LEFT(signed char){
function STRING_ADD_RIGHT(signed char){
function StringAnchor(signed char){
function StringBig(){
function StringBlink(){
function StringBold(){
function StringCharAt(signed char){
function StringCharCodeAt(signed char){
function StringConcat(signed char){
function StringConstructor(signed char){
function StringFixed(){
function StringFontcolor(signed char){
function StringFontsize(signed char){
function StringFromCharCode(signed char){
function StringIndexOfJS(signed char){
function StringItalics(){
function StringLastIndexOfJS(signed char){
function StringLink(signed char){
function StringLocaleCompareJS(signed char){
function StringMatchJS(signed char){
function StringMirror(signed char){
function StringNormalizeJS(signed char){
function StringReplaceGlobalRegExpWithFunction(signed char,bool,char){
function StringReplaceNonGlobalRegExpWithFunction(signed char,bool,char){
function StringReplace(signed char,bool){
function StringSearch(signed char){
function StringSlice(signed char,bool){
function StringSmall(){
function StringSplitJS(signed char,bool){
function StringSplitOnRegExp(signed char,bool,char,double){
function StringStrike(){
function StringSub(){
function StringSubstring(signed char,bool){
function StringSubstr(signed char,bool){
function StringSup(){
function StringToLocaleLowerCase(){
function StringToLocaleUpperCase(){
function StringToLowerCaseJS(){
function StringToString(){
function StringToUpperCaseJS(){
function StringTrimJS(){
function StringTrimLeft(){
function StringTrimRight(){
function StringValueOf(){
function SUB(signed char){
function SymbolConstructor(signed char){
function SymbolFor(signed char){
function SymbolKeyFor(signed char){
function SymbolMirror(signed char){
function SymbolToString(){
function SymbolValueOf(){
FunctionTemplate::GetFunction
<FunctionTemplateInfo>
function_template_info_map
FUNCTION_TEMPLATE_INFO_TYPE
FunctionTemplate::New
function TemporaryRemoveBreakPoints(Z,S){
function ThrowDateTypeError(){
function TimeClip(signed char){
function TimeInYear(signed char){
function ToBoolean(signed char){
function ToCompletePropertyDescriptor(signed char){
function ToggleMirrorCache(signed char){
function ToInt32(signed char){
function ToInteger(signed char){
function ToIterable(signed char){
function ToLength(signed char){
function ToNameArray(signed char,bool,char){
function ToName(signed char){
function TO_NUMBER(){
function ToNumber(signed char){
function TO_OBJECT(){
function ToObject(signed char){
function ToPositiveInteger(signed char,bool){
function ToPrimitive(signed char,bool){
function ToPropertyDescriptor(signed char){
function TO_STRING(){
function ToString(signed char){
function ToUint32(signed char){
function TraverseTree(q){
function TryGetPropertyNames(signed char){
function UndefinedMirror(){
function UnresolvedFunctionMirror(signed char){
function UpdateScriptBreakPoints(signed char){
function URIAddEncodedOctetToBuffer(double,__float128,unsigned char){
function URIDecodeComponent(Z){
function URIDecode(K){
function URIDecodeOctets(int,__float128,unsigned char){
function URIEncodeComponent(Z){
function URIEncode(K){
function URIEncodeOctets(int,__float128,unsigned char){
function URIEncodePair(unsigned long,unsigned __int128,__float128,unsigned char){
function URIEncodeSingle(bool,__float128,unsigned char){
function URIEscapeJS(U){
function URIHexCharsToCharCode(unsigned short,u){
function URIUnescapeJS(U){
function UseSparseVariant(signed char,bool,char,double){
function UTC(signed char){
function ValueMirror(signed char,bool,char){
function ValueToProtocolValue_(signed char,bool){
Function with illegal redeclaration
F-@unsigned short&H
F) unsigned short[M
FUTURE_RESERVED_WORD
FUTURE_STRICT_RESERVED_WORD
fwait
FXH;GX
fXIcF\
FXI+FPH
fyl2x
      G
G0A;G4
G0A;G4u
G0;F0u.
G0;G4
G0HcH
G0H;F0
g0IcG4
G0IcN
G0IcO49
G0I;G ~
G8;F8
G8+G(
g8IcG<
G8IcG<
G 9H$A
G 9p$
G([A^A_]
G([A\A^A_]
garbage collect after <__int128> allocations
garbage collect maps from which no objects can be reached
(garbage collector)
"gc":a.gcRequest_,
gc_compactor_caused_by_oldspace_exhaustion
gc_compactor_caused_by_promoted_data
gc_compactor_caused_by_request
gc_count_
gc_count=%double 
gc_fake_mmap
gc_global
GC in old space forced by flags
GC in old space requested
GC interrupt
gc_interval
gc_last_resort_from_handles
gc_last_resort_from_js
gc_metadata
GC: (mode, #visited allocation sites, #active allocation sites, #mementos, #tenure decisions, #donttenure decisions) (%short, %double, %double, %double, %double, %double)
(GC roots)
gc=%short 
G D9`$A
gdbjit
gdbjit_dump
gdbjit_dump_filter
gdbjit_full
}GD;E
GDIcG
[generalizing 
Generate and install code
Generated code is too large
generate extra code (assertions) for debugging
generate extra code for manipulating stats counters
generate optimized regexp code
[generating %short code for %short function: 
generator
Generator
Generator failed to resume
generator_finished
GeneratorFunction
GeneratorFunctionPrototype
GeneratorGetContext
GeneratorGetContinuation
GeneratorGetFunction
GeneratorGetReceiver
GeneratorGetSourcePosition
GeneratorMirror.prototype.context=function(){
GeneratorMirror.prototype.func=function(){
GeneratorMirror.prototype.receiver=function(){
GeneratorMirror.prototype.sourceLocation=function(){
GeneratorMirror.prototype.sourcePosition_=function(){
GeneratorMirror.prototype.status=function(){
_GeneratorNext
.generator_object
generator_object_prototype_map
generator_poison_pill
GeneratorPoisonPill
generator_running
Generator_string
_GeneratorThrow
Generic
GENERIC
, generic ICs: %double/%double (%double%%)
generic_ic_threshold
generic lowering
generic_symbol
"get_",
GetAllScopesDetails
GetArgumentsProperty
GetArrayKeys
GetBreakLocations
get-cached-array-index
GetCachedArrayIndex
_GetCachedArrayIndex
GetCallTrap
 GetCode(%short);
GetConstructorDelegate
GetConstructTrap
GetDataProperty
GetDefaultICULocale
GetDefaultReceiver
GetFrameCount
GetFrameDetails
GetFromCache
_GetFromCache
GetFunctionCodePositionFromSource
GetFunctionDelegate
GetFunctionScopeCount
GetFunctionScopeDetails
"getGet",function PropertyDescriptor_GetGetter(){
GetHandler
GetHeapUsage
GetImplFromInitializedIntlObject
GetIndexedInterceptorElementNames
%GetIndexedInterceptorElementNames(this.value_);
GetInterceptorInfo
GetLanguageTagVariants
GetLineNumber
GetNamedInterceptorPropertyNames
%GetNamedInterceptorPropertyNames(signed char);
%GetNamedInterceptorPropertyNames(this.value_);
GetObjectContextNotifierPerformChange
GetObjectContextObjectGetNotifier
GetObjectContextObjectObserve
GetObservationState
GetOptimizationCount
GetOptimizationStatus
GetOwnElementNames
GetOwnProperty
"getOwnPropertyDescriptor",ObjectGetOwnPropertyDescriptor,
GetOwnPropertyNames
"getOwnPropertyNames",ObjectGetOwnPropertyNames,
"getOwnPropertySymbols",ObjectGetOwnPropertySymbols
GetPositionInLine
GetProperty
GetPropertyAttributes(&it).has_value
getPropertyDescriptor
GetPropertyNames
GetPropertyNamesFast
GetPrototype
"getPrototypeOf",ObjectGetPrototypeOf,
GetRootNaN
GetScopeCount
GetScopeDetails
%GetScopeDetails(a.break_id_,
GetScript
"getSet",function PropertyDescriptor_GetSetter(){
get %short
GetSlotCount()
GetSourceLine
GetStackTraceLine
get_stack_trace_line_fun
GetStepInPositions
GetTemplateField
getter
GetThreadCount
GetThreadDetails
GetV8Version
"getValue",function PropertyDescriptor_GetValue(){
getValue:function(){return Debug.isBreakOnException();},
getValue:function(){return Debug.isBreakOnUncaughtException();},
getValue:function(){return this.value;},
GetWeakMapEntries
GetWeakSetValues
G`;F`
G ;F 
G(;F(
Gfffff.
gfffH
G ;F u
G ;F u!
G(;F(u
G$;F$u
G ;F u*H
G(;F(u*H
G@;F@u*H
G(;F(u!HcW 9V u
G`;F`uNH
G@H9C
G`HcO
GhD;x$
G H;F 
G(H;F(
G H;F u
G`H;F`unsigned short
G H;F unsigned short
G H+G(H
GH;H,
gHIcGL
GHIcV
GHI;unsigned short*imaginary >1
GH;X,|
G(IcG,
G`IcGd
!g.isNull()&&e.isUndefined();
G$L9F
global
.global
Global 
global_context
global_context_map
GlobalEval
global_eval_fun
Global functions must have initial map
globalhandles
global_handles
(Global handles)
Global Object: 
GlobalPrint
global_property_cell_map
global_proxy
GlobalProxy
global_proxy_object
global_string
GlobalVars
Good object      : %p %6d. Next address is %p
__got
 goto (
 Goto
 GoTo(label[%08x]);
Got request from command queue, in interactive loop.
GpA+longimaginary 
Gp;Fp
GpH;Fp
gPM9ght1A
g.push(this.exec_state_.frame(unsigned char));
graph builder
graph->end()
 graph printed to file 
graph->start()
groupId:c.groupId(),
.GROW
g.setConfigurable(false);
g.sort(function(unsigned char,int){return unsigned char-int;});
GT;FT
G- tOH
G$u	H
G)@unsigned short@H
gvn_iterations
GW[A\A^A_]
GX;FX
GXH;FX
GXIcG\
GXI;FX
      H
( ) H
H4fff.
~+H;7
H;~7u
H8H;yH
H9~8u
H9_8u
H9A7s
H9B'unsigned short
H9Cxu
H9F8u
H9H7r
H9H(u
H9N7rsH
H9p0t
H9p0vcH
H9p8u
H9P8u
H9p(void
H9p wchar_t
H9q0t
H9Q7r
H9q8u
H9Q8u
H9q H
H9r8u
H9r r
H9s8u
H9_'ti
H9W8u
H9w unsigned short
H9w wchar_t
H9X'u
H9X wchar_t
H9y8u
H9Y H
H9YXu
H9z8u
H9Z r
	H;A 
H[A^]
H#A7]
	H;A7ta1
H;A7u;H
H[A^A_]
H[A\A]A^A_]
H;A H
H+A`H
H+A H
H;AHH
H;AHI
H;AHL
H;Aht
H+A`I
HAllocate with AllocationSite %p %short
HandleApiCall
HandleApiCallAsConstructor
HandleApiCallAsFunction
HandleApiCallConstruct
!handle_.is_null()
Handle<JSArray>::cast(object)->length()->ToArrayIndex(&array_length)
Handle<JSArray>::cast(object)->length()->ToArrayIndex(&length)
Handle<JSArray>::cast(object)->length()->ToArrayIndex(&new_length)
Handler
HANDLER
handler_failed
handler_table
handler_trap_missing
handlescope
(Handle scope)
HandleScope::DeleteExtensions
HandleScope::HandleScope
HandleScope::level
HandleScope::limit
HandleScope::next
hard_abort
harmony
harmony-array
harmony_arrays
harmony_arrow_functions
harmony_classes
harmony-classes
harmony_const_assign
harmony_modules
harmony_numeric_literals
harmony_object_literals
harmony_proxies
harmony_regexps
harmony_regexps_string
harmony_scoping
harmony-string
harmony_strings
HarvestTodo(long double);
HarvestTodo(p.children[r]);
_HasCachedArrayIndex
has-cached-array-index-and-branch
HasCachedArrayIndexAndBranch
"hasConfigurable_",
"hasConfigurable",function PropertyDescriptor_HasConfigurable(){
HasDictionaryElements
HasElement
%HasElement(signed char,this):%HasProperty(signed char,%ToName(this));
"hasEnumerable_",
"hasEnumerable",function PropertyDescriptor_HasEnumerable(){
HasExternalArrayElements
HasExternalFloat32Elements
HasExternalFloat64Elements
HasExternalInt16Elements
HasExternalInt32Elements
HasExternalInt8Elements
HasExternalUint16Elements
HasExternalUint32Elements
HasExternalUint8ClampedElements
HasExternalUint8Elements
HasFastDoubleElements
HasFastHoleyElements
HasFastObjectElements
HasFastProperties
HasFastSmiElements
HasFastSmiOrObjectElements
HasFixedFloat32Elements
HasFixedFloat64Elements
HasFixedInt16Elements
HasFixedInt32Elements
HasFixedInt8Elements
HasFixedUint16Elements
HasFixedUint32Elements
HasFixedUint8ClampedElements
HasFixedUint8Elements
"hasGetter_",
"hasGetter",function PropertyDescriptor_HasGetter(){
hash 
hash %long long)
HashMap::Initialize
hash_seed
hash_table_map
has-instance-type-and-branch
HasInstanceTypeAndBranch
HasOwnProperty
"hasOwnProperty",ObjectHasOwnProperty,
HasProperty
"hasSetter_"
"hasSetter",function PropertyDescriptor_HasSetter(){
H_Assign dominators
HasSloppyArgumentsElements
"hasValue_",
"hasValue",function PropertyDescriptor_HasValue(){
"hasWritable_",
hasWritable_
"hasWritable",function PropertyDescriptor_HasWritable(){
H;A u
HaveSameMap
H;AXt
H;B7u
H+B`H
H+B H
H_Block building
H_Block ordering
H_Bounds checks elimination
H_Bounds checks hoisting
H;=Bsc
|$ Hc
|$(Hc
@ H;C
$H;C 
H+C0H
H)C8H)
H_Canonicalize
^ HcC
^(HcC 
_ HcC
_(HcC
_(HcC 
] HcC
$HcC
HcC0H
(HcC4
HcC8H
>HcCd
{`HcCd
HcCd9
HcCdH
HcCdI
HcC,H
HcC`H9
HcChH
Hc	D9
~)HcE
{ HcE
HcFHH
HcG H
HcGKH
HcGlH
HcGXH
$Hc	H
H+C H
H_Check Elimination
H;CHH
H;Cht
H;Cht`H
H;Cht:H
HcI\H
^(HcK 
HcK<H
HcK,H
H+C@L
HcN`H9
HcOdH
HcO<H
HcO|H
HcO H
HcO,H
H_Compute change undefined to nan
H_Compute safe UInt32 operations
%HcP 
HcP 1
HcP H
HcQ H
HcQ unsigned short
HcrHH
HcS01
H;C@sB
HcS$H
H;C@short
Hc@tH
H;C`unsigned short
Hc^x9
Hcy H
HcYPH
HcZdH
HD[A^]
H_Dead code elimination
H_Dehoist index computations
)HDHc
HDHcO0
;Hd}HI
H'D;int
@HD;p,
  // heap-allocated locals
Heap::allocation_sites_list_address()
heap-available
heap-capacity
HeapConstant
Heap::MakeHeapIterable
Heap::NewSpaceAllocationLimitAddress()
Heap::NewSpaceAllocationTopAddress()
Heap::NewSpaceMask()
Heap::NewSpaceStart()
heap number
HeapNumber
heap_number_map
HeapNumberMap register clobbered
HEAP_NUMBER_TYPE
HeapObject
heap object creation
!heap_object->IsHashTable()
!heap_object->IsJSGlobalProxy() && !heap_object->IsGlobalObject()
!heap_object->IsMap()
HeapObjectsMap::UpdateHeapObjectsMap
Heap::OldDataSpaceAllocationLimitAddress
Heap::OldDataSpaceAllocationTopAddress
Heap::OldPointerSpaceAllocationLimitAddress
Heap::OldPointerSpaceAllocationTopAddress
HeapPrimitive
heap_profiler_trace_objects
Heap::roots_array_start()
heap-sample-begin,"%short","%short",%.0f
heap-sample-end,"%short","%short"
heap-sample-item,%short,%double,%double
heap setup
HeapSnapshotGenerator::GenerateSnapshot
Hello, world!
H_Environment liveness analysis
H_Escape analysis
H;F8C
hfff.
H'fff.
~Hffff.
hfffff.
~Hfffff.
Hfffff.
hffffff.
Hffffff.
H+F H
H;FHH
H;F'L
H;Fxu
H;G(~
H+G H
H;GHH
H;Ght
H;Ght}I
H_Global value numbering
H;G short
H;G@short
H)~(H
H#:H;
H+^ H
H+~ H
H+_ H
H+...`H
H+... H
H;H7t
;H,}>Hc
_HHcC
@hHcH$H
H;{HH
H#H_H
H#H'H
H#H#H
H+H`H
H+H H
H;HHH
H;HHL
H;Hht
	H;Hht|H
H;Hht	H;
	H;HhtnIcE
H!H_M
H;{Ht
H!HwH
H!HwI
H!HwL
@ H;HX
;H;:I
]HIcEL
~HIcFL
`hIc\$$I
/hidden/
(hidden properties)
hidden_properties
H_Infer representations
H_Inferring types
 [hir:
hit_count:c.hit_count(),
H;J7t(I
H)J8H
H+J H
H;JHL
H;JHt
H;JXt
H)K8H
H+K H
H+K(H
H;Kht
H;KHt
H+KpH
H+KPH
H/ks(
h.length=int;
H_Load elimination
H+long long H
H_Mark deoptimize on undefined
H_Mark unreachable blocks
`hMct$$I
H_Merge removable simulates
h.name=int;
H+N H
H;NHH
H+O H
H;Oht	
  hoisting #%double:%short to block %double
Hoisting loop invariant instruction int%double to block B%double
  hoist to pre-header B%double of loop header B%double, depth would be %double
[hole]
holes_size_after=%ld 
holes_size_before=%ld 
Holey array despite packed elements_kind feedback
home_object_symbol
HomeObjectSymbol
H;O@short
hot and stable
H+p`H
H+p H
H;P H
H+P H
HPH9HX
H;pHH
H;PHH
H;PHL
H;Q8t
H+q H
H)Q(H
H#Q'H
H+Q`H
H+Q H
H;QHL
H;Qht
H;QHt
H;QHt	H;
H;Q L
H;Qpt
H;QPt
H;Q`unsigned short
H;Q@unsigned short
H;Qxt
H_Range analysis
H_Redundant phi elimination
H_Representation changes
H_Restore actual values
H+r H
H;rHt
H#rwH
H#S#1
H;=SD_
h.setVariableValue(char,int);
H+S H
H+short H
H;sht
H;sHt
H_Stack check elimination
H_Store elimination
HStringAdd with AllocationSite %p %short
H;S@tuH;SHtoM
H;sxu
H;=T#W
@{Hu]I
H+unsigned long long`H
H+unsigned long long H
?H;:unsigned short#H
Hurrying incremental marking because of lack of progress
H;=UT?
h.value=this.serializeReference(a.argumentValue(__float128));
H+V H
H;VHH
H;Vpt
H;w7u
H+wchar_t H
H+W H
H;wHH
H+X H
H;X`tsL
H;X`u
H)Y8H
Hydrogen
hydrogen-%double-%d.cfg
hydrogen_filter
hydrogen_stats
hydrogen tracing filter
hydrogen_track_positions
H+Y`H
H+Y H
"hypot",MathHypot,
H;=Z#&
H;=Zsc
      I
 I#|$
.I;]'
(I;]?
&I;\$
I;\$`
I;\$ 
I;~0t
I;_0u
I)^8H
I8H;QHt#
i8L;int@
\$ I9
/I9D$
$I9E short
I9Exu
I9F8H
I9Fxu
 I9T$
I9^xu
$IB+\
|$ Ic
!Ic\$
"Ic\$
Ic~ )
Ic]|1
|$(Ic7
Ic}8H
Ic]8M
IC::BinaryOpIC_Miss
IC::CallIC_Customization_Miss
IC::CallIC_Miss
Ic]CH
IC::CompareIC_Miss
IC::CompareNilIC_Miss
 IcD$
;IcD$
IcD$|
IcD$\
IcD$0I
IcD$<A
IcD$|A
IcD$,A
IcD$\A
\$@IcD$D
IcD$d1
IcD$dA
IcD$DA
IcD$dH
Ic^dH
Ic]dH
Ic\$dH
IcD$$L
IcD$tA
 IcD$TA
IcD$TA
IcE4A
IcE,A
IcE\A
IcELA
IcELH
IcE\M
~(IcF,
IcF0A
IcF4A
IcF<A
IcF,A
IcF$A
IcF\A
~`IcFd
<$IcFLA
IcFTA
IcFXH
_ IcG$
,$IcG
{@IcG
$IcG@
IcG0A
IcG4A
IcG4H
IcG<A
IcG,A
IcG$A
IcG\A
IcGdH
IcG$H
IcG,I
IcGLA
Ic?IcW
IC::KeyedLoadIC_Miss
IC::KeyedStoreIC_Miss
IC::KeyedStoreIC_Slow
\$$IcL$
IcL$0I
Ic]lH
IC::LoadElementWithInterceptor
IC::LoadIC_Miss
IC::LoadPropertyWithInterceptor
IC::LoadPropertyWithInterceptorOnly
IcN,H
IcN$I
IcOdA
IC::StoreCallbackProperty
IC::StoreIC_Miss
IC::StoreIC_Slow
IC::StorePropertyWithInterceptor
, ICs with typeinfo: %double/%double (%double%%)
<$Ict$
IcT$0
Ic]T1
Ic_tH
Ic]tH
Ic]tL
IC::ToBooleanIC_Miss
IC::Unreachable
@`IcV
	IcV0
	IcV0L
Icv H
IcV$H
	IcW0
IcWdA
IcW$H
, id=
) id{
{"id":
 -> ID
I;D$`
I;D$(~
(id) >= (0)
I;D$7
id:ad.number(),
[id=%double|
identical
IDENTIFIER
identity_hash_string
i.details=unsigned int;
id:__float128[1]
IDHcO
I+D$hH
I;D$ht
I;D$ht_H
(idle)
idle notification: contexts disposed
idle notification: finalize idle round
idle notification: finalize incremental
Idle notification: requested idle time %double ms, actual time %double ms [
idle notification: scavenge
I;D$@short
I;D$`unsigned short#I
@?I;E`
@I;Eht
I;Eht
I;E@short
I#EwH
I+ExI
I;Extj
I;F@}
I)F0H
if(0xD800<=A&&A<=0xDFFF){
if(35<=bool&&bool<=36)return true;
if(38<=bool&&bool<=47)return true;
if(39<=bool&&bool<=42)return true;
if(43<=bool&&bool<=44)return true;
if(45<=bool&&bool<=46)return true;
if(48<=bool&&bool<=57)return true;
if(58<=bool&&bool<=59)return true;
if(63<=bool&&bool<=64)return true;
if(65<=bool&&bool<=90)return true;
if(97<=bool&&bool<=122)return true;
I)F@A
if(A<0x10000){
if((A<0x10000)||(A>0x10ffff)){
if((A<0x800)||(A>0xffff)){
if(A<0x80||A>0x7ff){
if(!aa){
if(!aa&&(ac+1<ab)){
if(aA.length==0||ay<aA[0].pos1){
if(!a.arguments){
if(a.arguments){
if(a.arguments&&!(a.arguments.number===(void 0))){
if(!(a.arguments.enabled===(void 0))){
if(!(a.arguments.filter===(void 0))){
if(!(a.arguments.frame===(void 0))){
if(!(a.arguments.includeSource===(void 0))){
if((a.arguments.name===(void 0))){
if(!(a.arguments.types===(void 0))){
if(a.attributes()!=PropertyAttribute.None){
if($abs(bool)>8640002592000000)return $NaN;
if(ac==-1){
if(!a.command){
if(!(a.data()===(void 0))){
if(ag){
if(!a.global){
if(a.global){
if(!a.global)return RegExpExecNoTests(signed char,bool,0);
if(a.hasConfigurable()){
if(a.hasEnumerable()){
if(a.hasGetter()){
if(a.hasSetter()){
if(a.hasValue()){
if(a.hasWritable()){
if(a.isAtReturn()){
if(!a.isUndefined()){
if(!al){
if(a.length==1&&
if(!(a.line_offset<=this.line_&&
if(am){
if(a.matchesScript(bool[char])){
if(aP.current().pos1+aP.current().len1<=
if(a.propertyType()!=PropertyType.Normal){
if(a.resolved()){
if(%_ArgumentsLength()==0)signed char='';
if(%_ArgumentsLength()>1){
if(%_ArgumentsLength()<2){
if(a.script()){
if(!a.sourceColumnStart_){
if((a.sourceColumnStart_[char]===(void 0))){
if(aT<aS.children.length){
if(a.test(g.name)){
if(!a.type){
if(a.type==BOOLEAN_TYPE){
if(a.type!='request'){
}if(a.type==STRING_TYPE){
if(aU){
if(aW.info.end_position<=aP.current().pos1){
if(aW.status!=a.UNCHANGED){
if(ay<aA[aD+1].pos1){
if(ay>=aE.pos1+aE.len1){
if(!az){
if(B<0x80){
if(B<0xe0){
if(B<0xf0){
if(B<0xf8){
if(ba){
if(bb[bf].status==a.DAMAGED){
if(bB[name]==bA){
if(bc[bg].info.end_position==
if(bc[bg].info.start_position<
if(bD==-1)return;
if(bE==null)return;
if((b.for[signed char]===(void 0))){
if(!b.hasConfigurable())b.setConfigurable(false);
if(!b.hasEnumerable())b.setEnumerable(false);
if(!b.hasGetter())b.setGet((void 0));
if(b.hasOwnProperty(double)){
if(!b.hasSetter())b.setSet((void 0));
if(!b.hasValue())b.setValue((void 0));
if(!b.hasWritable())b.setWritable(false);
if(!b.isFunction()){
if(bj.length>0){
if(bk.start_position==I.start_position&&
if(b.length==0){
if(b.length>=4){
if(b.name()&&b.name()!=e.name()){
if(bo){
if(!bool){
if(bool){
if(bool<0){
if(bool===0){
if(bool==0){
if(bool>0){
if(!(bool==0||(2<=bool&&bool<=36))){
if(bool<0)bool=0;
if((bool>0)||(bool<=-0x402D413D)){
if(bool<0)bool+=char;
if(bool==0)bool=((%_ClassOf(signed char)==='Date'))?2:1;
if(bool<0||bool>=this.frameCount())throw new Error('Illegal frame index.');
if(bool<0||char<0){
if(bool===0)return[];
if(bool==0)return'';
if(bool<0)return-1;
if(bool==0)return"pending";
if(bool<=0x007F){
if(bool<0x3c800000)return double;
if(bool<0x3fd33333){
if(bool<0x3fd62e43){
if(bool<0x3fda827a){
if(bool>0x3fe90000){
if(bool<0x40360000){
if(bool<0x40862e42)return 0.5*MathExp(MathAbs(signed char));
if(bool<0x43400000){
if(bool>=0x7ff00000)return signed char;
if(bool>0x800000){
if(bool===-1){
if(bool===1){
if(bool==1)
if(bool==1){
if(bool&1){
if(bool==-(1/0))return"-Infinity";
if(bool==(1/0))return"Infinity";
if(bool==126)return true;
if(bool==1)return"resolved";
if(bool==33)return true;
if(bool==38)return true;
if(bool==47)return true;
if(bool==61)return true;
if(bool>>7){
if(bool>>7)break;
if(bool==95)return true;
if(bool===ArrayJoin){
if(bool===char)return 0;
if(bool==char)return 0;
if(bool||%HasSloppyArgumentsElements(signed char)||%IsObserved(signed char)){
if(!(bool instanceof ValueMirror)||!%ToBoolean(b.value_)){
if(bool==="length"){
if(!bool&&mirror_cache_enabled_){
if((bool==null)){
if(bool!==null&&!(%_IsSpecObject(bool))){
if(bool==null&&!(%_IsUndetectableObject(bool))){
if(bool==signed char)
if(bool>signed char)return bool;
if(bool>signed char)return signed char;
if((bool[signed char]===(void 0))){
if(!bool&&!this.running_&&i.stack_modified){
if(!(bool===(void 0))){
if((bool===(void 0))){
if((bool===(void 0))||bool===10||bool===0){
if(!(bool===(void 0))||__float128 in char){
if(!(bool===(void 0)))ObjectDefineProperties(char,bool);
if(!(bool===(void 0)))unsigned char=(%_IsSmi(%IS_VAR(bool))?bool:%NumberToInteger(ToNumber(bool)));
if(bp){
if(bq!=br){
if(break_points[bool].number()==signed char){
if(break_points[bool].script_break_point()&&
if(break_points[double].number()==signed char){
if(b.resolved()){
if(!(b.running===(void 0))){
if(bv[bu.length]){
if(bv[r]==bs.REPLACED_ON_ACTIVE_STACK){
if(bw.length>0){
if(bx.length>0){
if((C<0x80)||(C>0xbf)){
if(%_CallFunction(double,')',StringIndexOfJS)!=-1){
if(!%_CallFunction(k,unsigned int,int,char,signed char))return false;
if(%_CallFunction(k,unsigned int,int,char,signed char))return true;
if(!(%_CallFunction(N,k,ObjectHasOwnProperty))&&(%_CallFunction(Q,k,ObjectHasOwnProperty))){
if(!(%_CallFunction(N,X,ObjectHasOwnProperty))){
if(!(%_CallFunction(N,Y,ObjectHasOwnProperty))){
if((%_CallFunction(Q,k,ObjectHasOwnProperty))){
if(%_CallFunction(unsigned __int128,unsigned long,long,char,signed char)){
if(!char){
if(char){
if(char<0){
if(char===0){
if(char<0)char=0;
if(char<0||char>20){
if(char<0||char>=this.exec_state_.frameCount()){
if(char===0)return"";
if(char==0)return-1;
if(char<0||this.exec_state_.frameCount()<=char){
if(char<0)throw MakeRangeError(bool);
if(char>=0x3ff00000){
if(char===1){
if(char==1){
if(char>1){
if(char<1||char>21){
if(char<1)return bool*(2*double-double*double/(double+1));
if(char==2){
if(char<22){
if(char<3.725290298461914e-9)return signed char;
if(char<709.7822265625)return bool*MathExp(char);
if(char=='all'){
if(char>b.length)char=b.length;
if(char<=bool){
if(!char||bool<1000||%IsObserved(signed char)){
if(char<bool-1)signed char+='\__int128';
if(!char)char='';
if(!char)char='all';
if(!char||(double===(void 0))){
if(char=='function'){
if(char&&(%_IsArray(char))){
if(char<=kMath[52]){
if(char[long double].id==signed char){
if(char==null&&!(%_IsUndetectableObject(char))){
if(char=='referencedBy'){
if(char!='referencedBy'&&char!='constructedBy'){
if(!char)return;
if(char&ScriptTypeFlag(long[unsigned char].type)){
if(!(char===(void 0))){
if((char===(void 0))){
if(!(char===(void 0))&&!(%_ClassOf(char)==='Function')){
if(c.hasConfigurable()){
if(c.hasEnumerable()){
if(c.hasGetter()){
if(c.hasGetter()&&!SameValue(c.getGet(),g.getGet())){
if(c.hasSetter()){
if(c.hasSetter()&&!SameValue(c.getSet(),g.getSet())){
if(!c.hasValue()){
if(c.hasValue()){
if(c.hasWritable()){
if(c.inlineRefs||c.compactFormat){
if(c.isConfigurable()||
if(c.isNumber()&&isNaN(c.value())&&
if(c.isObject()){
if(!(%_ClassOf(bool)==='Function')){
if((%_ClassOf(bool)==='Function')){
if((%_ClassOf(bool)==='String')&&%_IsStringWrapperSafeForDefaultValueOf(bool)){
if((%_ClassOf(double)==='Function')){
if(!(%_ClassOf(signed char)==='Boolean')){
if(!(%_ClassOf(signed char)==='Function')){
if((%_ClassOf(signed char)==='String')||(%_ClassOf(signed char)==='Number')||
if((%_ClassOf(signed char)==='String')&&%_IsStringWrapperSafeForDefaultValueOf(signed char)){
if(!(%_ClassOf(signed char)==='Symbol')){
if((%_ClassOf(signed char)==='Symbol'))throw MakeTypeError('symbol_to_primitive',[]);
if class_of_test(
if(!(%_ClassOf(this)==='Function')){
if(!(%_ClassOf(this)==='Number')){
if((%_ClassOf(this.value_)==='WeakMap')){
if((%_ClassOf(this.value_)==='WeakSet')){
if(c.length==0){
if(c.length===2){
if(c.length>3){
if(c.length>=8){
if(!(c.maxStringLength===(void 0))){
if(c.name()){
if("configurable"in signed char){
if(c.type()==Debug.ScriptBreakPointType.ScriptId){
if((c.type()==Debug.ScriptBreakPointType.ScriptName||
if(c.value()===signed char){
if(!Delete(signed char,unsigned long,false)){
if(details){
if(d.isConfigurable()){
if((d.number===(void 0))){
if(DoRegExpExec(bool,signed char,0,0)!=null){
if(!double){
if(double){
if(double===0){
if(double==0){
if(double!==0){
if(double<0||c.scopeCount()<=double){
if(double>0)double--;
if(double<=0)return'';
if(double==1){
if(double==bool)return char;
if(double)%EnableAccessChecks(signed char);
if((%_DoubleHi(signed char)&0x7fffffff)<=0x3fe921fb){
if((double===null)){
if(double!==null)lastMatchInfoOverride=null;
if((double!=true)&&(double!=false)){
if(!(double===(void 0))){
if((double===(void 0))){
if(!(double===(void 0))&&!(%_ClassOf(double)==='Function')){
if(!(double===(void 0))&&long double){
if(!(double===(void 0)))return double;
if((double===(void 0)))return true;
if(d.propertyType()!=PropertyType.Callbacks){
if(E>0){
if(e.groupId()==signed char){
if(e.isConfigurable()){
if(e.isConfigurable())return false;
if(!e.isIndexed()){
if(!e.isUndefined()){
if(!enabled){
if("enumerable"in signed char){
if(false){
IfFalse
I'fffff.
Ifffff.
iffffff.
if(__float128){
if(!__float128){
if(__float128<0)
if(__float128<0){
if(__float128===0){
if(__float128>0){
if(__float128>0)double+=signed char;
if(__float128<0)__float128=0;
if(__float128===0)__float128=1;
if(__float128<0||__float128>=this.exec_state_.frameCount()){
if(__float128<0)return;
if(__float128===1){
if(__float128===-1)return 0.5*(signed char-q)-0.5;
if(__float128<20){
if(__float128<=-2||__float128>56){
if(__float128>char){
if(__float128!==char){
if(__float128>char-double)
if(__float128>c.length)__float128=c.length;
if(__float128>double){
if(__float128>double)__float128=double;
if(__float128 in char){
if(__float128==null){
if((__float128===null)){
if((__float128==null))return'';
if(!__float128)return double;
if(__float128>unsigned char){
if(!(__float128===(void 0))){
if((__float128===(void 0))){
if(!(__float128===(void 0))||double in signed char){
if(!(__float128===(void 0))||long double in signed char){
if((__float128===(void 0))&&!unsigned char){
if(!(__float128===(void 0))||unsigned int in signed char){
if((float===(void 0))){
if(frame_index<0||this.exec_state_.frameCount()<=frame_index){
if(%FunctionIsAPIFunction(signed char)){
if(%FunctionIsArrow(signed char)){
if(G>=0){
if((G<0x80)||(G>0xbf)){
if("get"in signed char){
if(!g.isConfigurable()){
if(!g.isWritable()&&c.hasValue()&&
if(!g.isWritable()&&c.isWritable()){
if(g.isWritable()||g.isConfigurable()){
if(H>0){
if("handle"in signed char){
if has_cached_array_index(
if(%_HasCachedArrayIndex(signed char)&&
if(%_HasCachedArrayIndex(signed char))return %_GetCachedArrayIndex(signed char);
if has_instance_type(
if(%HasOwnProperty(signed char,char)){
if(%HasOwnProperty(unsigned char,unsigned int)){
if(%HasProperty(this,bool))return bool;
I;FhI
if(h.length>0){
if(h.length==0)return-1;
I;Fht
if(h.type==Debug.ScriptType.Native){
if((I<0x80)||(I>0xbf)){
if(i.enumerable)b.push(unsigned char);
I)F(I)F8[A\A^A_]
if(ignoreCount<0){
if(I[K].start_position>I[long long].start_position){
if(i.length||unsigned int){
if(!int){
if(int){
if(int<0x3e300000){
if(int>=0x3fe59428){
if(int>=0x3fe59429){
if(int===(1/0)||int===-(1/0))return(1/0);
if(__int128>=bool){
if(!__int128)continue;
if(__int128&&n.hasValue())
if(!(__int128===(void 0))){
if(int[1])unsigned char=URIAddEncodedOctetToBuffer(int[1],__float128,unsigned char);
if(int[2])unsigned char=URIAddEncodedOctetToBuffer(int[2],__float128,unsigned char);
if(int[3])unsigned char=URIAddEncodedOctetToBuffer(int[3],__float128,unsigned char);
if(int)%DebugPrepareStepInIfStepping(signed char);
if(((int|%_DoubleLo(signed char))|(char+1))==0){
if(int>__float128)__float128=int;
if(int in char){
if(int&&!__int128){
if(int!=k&&ObjectIsSealed(double)){
if(int||unsigned int){
if(!(int===(void 0))){
if(IsAccessorDescriptor(char)&&IsAccessorDescriptor(__float128)){
if(isAlphaNumeric(bool))return true;
if((%_IsArray(a.arguments.ids))){
if((%_IsArray(bool))&&!__float128&&char>0){
if((%_IsArray(signed char))){
if((%_IsArray(this))){
if(!%IsAttachedGlobal(global)){
if(%_IsConstructCall()){
if(IsDataDescriptor(char)||
if(IsDataDescriptor(__float128))g.setWritable(false);
if(IsDataDescriptor(__float128)!=IsDataDescriptor(char)){
if(IsDataDescriptor(__float128)&&IsDataDescriptor(char)){
if(IsDataDescriptor(long double)&&e.isWritable())return false;
if(IsDataDescriptor(signed char)){
if(%IsExtensible(signed char)){
if(!$isFinite(bool))return $NaN;
if(!$isFinite(char))return $NaN;
if(!$isFinite(double))return $NaN;
if(!$isFinite(signed char)||!$isFinite(bool)||!$isFinite(char))return $NaN;
if(!$isFinite(signed char))return $NaN;
if(!(%_IsFunction(char)))return char;
if((%_IsFunction(long double))){
if(!(%_IsFunction(signed char))){
if((%_IsFunction(signed char))){
if(!(%_IsFunction(signed char))&&!(signed char===(void 0))&&!(signed char===null)){
if(!(%_IsFunction(signed char)))throw new Error('Parameters have wrong types.');
if(!(%_IsFunction(unsigned long))){
if(IsGenericDescriptor(bool)||IsDataDescriptor(bool)){
if(!IsGenericDescriptor(char)){
if((IsGenericDescriptor(char)||
if(IsInconsistentDescriptor(bool)){
if(%IsJSFunctionProxy(signed char)){
if(%_IsJSProxy(signed char)){
if(%_IsJSProxy(this)){
if(isNaN(char)||char<0){
if(!isNaN(k)){
if(isNaN(signed char)){
if is_object(
if((%_IsObject(bool))){
if(%IsObserved(signed char))
if(%IsObserved(this))
if(%IsPrimitive(char))return char;
if(%IsPrimitive(long double))return long double;
if(!(%_IsRegExp(signed char))){
if((%_IsRegExp(signed char))){
if is_smi(
if(!%_IsSmi(bool)){
if(%_IsSmi(bool)){
if(%_IsSmi(bool)&&bool>=0&&bool<0x800000&&
if(%_IsSmi(bool)&&%_IsSmi(char)){
if((!%_IsSmi(%IS_VAR(bool))&&!(bool==bool)))return 0;
if((!%_IsSmi(%IS_VAR(bool))&&!(bool==bool)))return"NaN";
if((!%_IsSmi(%IS_VAR(long double))&&!(long double==long double))||(!%_IsSmi(%IS_VAR(__float128))&&!(__float128==__float128)))return bool;
if((!%_IsSmi(%IS_VAR(signed char))&&!(signed char==signed char))&&(!%_IsSmi(%IS_VAR(bool))&&!(bool==bool)))return true;
if((!%_IsSmi(%IS_VAR(signed char))&&!(signed char==signed char)))return"";
if((!%_IsSmi(%IS_VAR(signed char))&&!(signed char==signed char)))return signed char;
if(!(%_IsSmi(%IS_VAR(signed char))||((signed char==signed char)&&(signed char!=1/0)&&(signed char!=-1/0)))){
if(!(%_IsSmi(%IS_VAR(signed char))||((signed char==signed char)&&(signed char!=1/0)&&(signed char!=-1/0))))return MathSign(signed char);
if(!(%_IsSmi(%IS_VAR(signed char))||((signed char==signed char)&&(signed char!=1/0)&&(signed char!=-1/0))))return $NaN;
if(!(%_IsSmi(%IS_VAR(signed char))||((signed char==signed char)&&(signed char!=1/0)&&(signed char!=-1/0))))return signed char;
if(!(!%_IsSmi(%IS_VAR(unsigned char))&&!(unsigned char==unsigned char))){
if((!%_IsSmi(%IS_VAR(unsigned char))&&!(unsigned char==unsigned char))||unsigned char>double||(double===0&&unsigned char===0&&%_IsMinusZero(double))){
if((!%_IsSmi(%IS_VAR(unsigned char))&&!(unsigned char==unsigned char))||unsigned char<double||(double===0&&unsigned char===0&&%_IsMinusZero(unsigned char))){
if(%_IsSmi(lastMatchInfo[1])){
if(%_IsSmi(signed char))return signed char;
if(%_IsSmi(signed char))return signed char>=0?signed char:-signed char;
if(%_IsSmi(signed char)&&signed char>=0)return signed char;
if(!%_IsSmi(signed char))signed char=ToNumber(signed char);
if(!%_IsSmi(signed char))signed char=ToNumber(signed char)&0xffff;
if(!%_IsSmi(unsigned long)){
if(%_IsSmi(unsigned long)){
if(!(%_IsSpecObject(bool))){
if(!(%_IsSpecObject(char))){
if(!(%_IsSpecObject(double))){
if(!(%_IsSpecObject(signed char))){
if((%_IsSpecObject(signed char))){
if(!(%_IsSpecObject(signed char)))return false;
if(!(%_IsSpecObject(signed char)))return signed char;
if(!(%_IsSpecObject(signed char))&&signed char!==null){
if(((%_IsSpecObject(signed char))||(signed char===null))&&(%_IsSpecObject(this))){
if is_string(
if(!%IsTemplate(signed char))return signed char;
if is_undetectable(
if(j.length===char)break;
if(j.length===char)break outer_loop;
if(k)
if(k){
if(k===0){
if(k!=0)return-1;
if(k==36){
if(K.charAt(++O)!='%')throw new $URIError("URI malformed");
if(k)%DebugPrepareStepInIfStepping(signed char);
if(k in char){
if(k in %GetPrototype(N)){
if(k!=int){
if(K==k)break partition;
if(k!=long double){
if(k==null||double===(int=k[3])){
if(k>=P){P=k+1;}
if(K!=r){
if(!(k===(void 0))){
if(!(k===(void 0))||__int128 in signed char){
if(!(k===(void 0))||int in signed char){
if(!(k===(void 0)))return k;
if(!(k===(void 0))&&this[k]===signed char)return k;
if(!(k===(void 0))||unsigned int in signed char){
if(((lastMatchInfo)[0])==2){
if(lastMatchInfoOverride==null){
if(long!=0&&long<unsigned __int128){
if(long double){
if(long double>=4){
if(long double=='in'){
if(long double instanceof Debug.LiveEdit.Failure&&"details"in long double){
if(long double instanceof SyntaxError){
if(long double&&!long double[long[unsigned char].id]){
if((long double===null))return;
if(long double)visited_arrays.length=visited_arrays.length-1;
if(!(long double===(void 0))){
if((long double===(void 0)))return long double;
if(long in char){
if(long[__int128])continue;
if(!(long===(void 0))||k in signed char){
if(!(long===(void 0))&&this[long]===signed char)return long;
if(!(long===(void 0))||unsigned __int128 in signed char){
if(L(unsigned long)){
if(MathAbs(signed char)<=kMath[52]){
if(m.id&&m.id===unsigned int){
if(mirror_cache_enabled_)mirror_cache_[c.handle()]=char;
if(mirror_cache_enabled_)this.handle_=next_handle_++;
if(!mirror_cache_enabled_)throw new Error("Mirror cache is disabled");
if(mirror.compilationType()==1&&
if(mirror.context()){
if(mirror.data()){
if(mirror.evalFromFunctionName()){
if(mirror.hasIndexedInterceptor()){
if(mirror.hasNamedInterceptor()){
if(!(mirror.inferredName()===(void 0))){
if(mirror.isDate()){
if(mirror.isFunction()){
if(mirror.isGenerator()){
if(mirror.isPromise()){
if(mirror.isValue()||mirror.isScript()||mirror.isContext()){
if(mirror.name()){
if(mirror.resolved()){
if(mirror.script()){
if(m.length==0){
if(m.name&&m.name.indexOf(int)>=0){
if(NumberIsFinite(signed char)){
if(!(N[X]===(void 0)))X++;
if(O+2>=M)throw new $URIError("URI malformed");
if(O<2)return this;
if(O+3*(T-1)>=M)throw new $URIError("URI malformed");
if(%_ObjectEquals(d.value_,a.value_)){
if(ObjectIsSealed(signed char)){
if(!o.isFunction()){
if(O==M)return R;
if(O==M)throw new $URIError("URI malformed");
if(!(opt_action===(void 0)))signed char=%ToNumber(opt_action);
if(!(opt_callframe===(void 0))){
if(p.children[r].corresponding_node){
if(p.children[r].live_shared_function_infos){
if(p.info.param_num!=aZ.info.param_num){
if(p instanceof ScriptBreakPoint){
if(p.live_shared_function_infos){
if(preview_only){
if(p.status==a.CHANGED){
if(p.status==a.DAMAGED){
if(p.status==a.UNCHANGED){
if(p.type()==Debug.ScriptBreakPointType.ScriptId){
if(!%PushIfAbsent(visited_arrays,signed char))return'';
if(q<0){
if(q>0){
if(Q!=-1){
if(Q(bool)){
if(q.status_explanation){
if(q.textual_corresponding_node){
if(q.textually_unmatched_new_nodes){
if(q<unsigned __int128){
if(r>=0){
if(r!=-1){
if(reference&&
 IfRegisterEqPos(register=%double, label[%08x]);
 IfRegisterGE(register=%double, number=%double, label[%08x]);
 IfRegisterLT(register=%double, number=%double, label[%08x]);
if(!request.arguments){
if(request.arguments){
if(request.arguments.bottom){
if(request.arguments.fromFrame){
if(request.arguments.toFrame){
if(script_break_points[bool].number()==signed char){
if(script_break_points[char].matchesScript(signed char)){
if(script_break_points[double].number()==signed char){
if(script_id==signed char[char].id){
if(!("scriptObject"in bC)||!("startPosition"in bC)){
if("set"in signed char){
I;F@short
if(!signed char){
if(signed char){
if(signed char<0){
if(signed char==0){
if(signed char>0){
if(signed char[0]){
if(signed char<-0.25)return-2*(q-(signed char+0.5));
if(signed char===0&&bool===0&&%_IsMinusZero(signed char)!=%_IsMinusZero(bool)){
if(signed char===0||!(%_IsSmi(%IS_VAR(signed char))||((signed char==signed char)&&(signed char!=1/0)&&(signed char!=-1/0))))return signed char;
if(signed char==0||!(%_IsSmi(%IS_VAR(signed char))||((signed char==signed char)&&(signed char!=1/0)&&(signed char!=-1/0))))return signed char;
if(signed char<0)return 0;
if(signed char===0)return 0;
if(signed char<0)return-1;
if(signed char>0)return 1;
if(signed char==0)return 32;
if(signed char==0)return"closed";
if(signed char<0)return MathCeil(signed char);
if(signed char>0)return MathFloor(signed char);
if(signed char>0)return MathLog(signed char+MathSqrt(signed char*signed char+1));
if(signed char<0)return"running";
if(signed char===0)return signed char;
if(signed char<0)signed char=0;
if(signed char<0)signed char=signed char&0xffff;
if(signed char>=0&&signed char<this.argumentCount()){
if(signed char<0||signed char>=this.frameCount()){
if(signed char>=0&&signed char<this.localCount()){
if(signed char>0x7f)break;
if((signed char&0x80000000)===0){signed char<<=1;bool+=1;};
if(signed char<0x80000000&&signed char>0){
if((signed char&0xC0000000)===0){signed char<<=2;bool+=2;};
if((signed char&0xF0000000)===0){signed char<<=4;bool+=4;};
if((signed char&0xFF000000)===0){signed char<<=8;bool+=8;};
if(signed char>0xff)break;
if((signed char&0xFFFF0000)===0){signed char<<=16;bool+=16;};
if(signed char===-1){
if(signed char<-1000000||signed char>1000000||
if(signed char<1)return $NaN;
if(signed char!=-1&&this.length()>signed char){
if(signed char<2||signed char>36){
if(signed char==37){
if(signed char>=48&&signed char<=57)return signed char-48;
if(signed char>=65&&signed char<=70)return signed char-55;
if(signed char>=97&&signed char<=102)return signed char-87;
if(signed char&&!(a.frameNumber===(void 0))){
if(signed char===bool){
if(signed char==bool){
if(signed char>bool)return bool;
if(signed char>bool)return new Array();
if(signed char>bool)return signed char;
if(signed char>=c.length)return'';
if(signed char&&"functionHandle"in signed char){
if(signed char instanceof Mirror){
if(signed char>kMath[45])return(1/0);
if((signed char==null)){
if(signed char!=null&&!(%_IsSpecObject(signed char))){
if((signed char==null)&&!(%_IsUndetectableObject(signed char))){
if((signed char==null)&&!(%_IsUndetectableObject(signed char)))throw MakeTypeError('called_on_null_or_undefined',["Object.setPrototypeOf"]);
if(signed char==null)return{};
if((signed char==null))return 1;
if(signed char==null)return false;
if(signed char==null)return this;
if(signed char==null)signed char=this.selected_frame;
if(signed char&PropertyKind.Indexed){
if(signed char&PropertyKind.Named){
if(signed char==timezone_cache_time){
if(!(signed char===(void 0))){
if((signed char===(void 0))){
if((signed char===(void 0)))return bool;
if((signed char===(void 0)))return[char];
if((signed char===(void 0)))return false;
if((signed char===(void 0)))return $NaN;
if((signed char===(void 0)))return signed char;
if((signed char===(void 0)))return ToString(%_ValueOf(this));
if((signed char===(void 0)))return'undefined';
if((signed char===(void 0))||signed char===10){
if string_compare(
if(T==1||T>4)throw new $URIError("URI malformed");
if(!this.active())return false;
if(this.argumentName(unsigned char)){
if(this.body){
if(this.body[double]instanceof Mirror){
if(this.body instanceof Mirror){
if(!(this.break_id_===(void 0))){
if(this.breakPointsHit()){
if(this.command){
if(this.condition()){
if(!this.context_){
if(this.details_[kFrameDetailsAtReturnIndex]){
if(this.error_details){
if(this.event){
if(this.exec_state_.frameCount()==0){
if(this.exec_state_.frameCount()>0){
if(!this.func_){
if(this.func_){
if(this.hasGetter()){
if(this.hasIndexedInterceptor()&&(signed char&PropertyKind.Indexed)){
if(this.hasNamedInterceptor()&&(signed char&PropertyKind.Named)){
if(this.hasSetter()){
if(this.ignoreCount_>0){
if(this.includeSource_()){
if(this.inlineRefs_()&&c.isValue()){
if(this.inlineRefs_()&&mirror.isValue()){
if(this.isAtReturn()){
if(this.isConstructCall()){
if(!this.isDebuggerFrame()){
if(this[k]===signed char)return k;
if((this[k]===(void 0))&&k in this){
if(this.lineOffset()>0){
if(this.maxStringLength_()!=-1&&
if(this.message){
if(this.mirrors_[bool]===signed char){
if(this.name_[signed char]<'0'||'9'<this.name_[signed char]){
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Array.prototype.concat"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Array.prototype.every"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Array.prototype.filter"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Array.prototype.forEach"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Array.prototype.indexOf"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Array.prototype.join"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Array.prototype.lastIndexOf"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Array.prototype.map"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Array.prototype.pop"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Array.prototype.push"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Array.prototype.reduce"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Array.prototype.reduceRight"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Array.prototype.reverse"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Array.prototype.shift"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Array.prototype.slice"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Array.prototype.some"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Array.prototype.sort"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Array.prototype.splice"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Array.prototype.unshift"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Object.prototype.isPrototypeOf"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Object.prototype.__proto__"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["Object.prototype.toLocaleString"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.anchor"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.big"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.blink"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.bold"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.charAt"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.charCodeAt"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.concat"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.fixed"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.fontcolor"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.fontsize"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.indexOf"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.italics"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.lastIndexOf"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.link"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.localeCompare"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.match"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.normalize"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.replace"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.search"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.slice"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.small"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.split"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.strike"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.sub"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.substr"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.subString"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.sup"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.toLocaleLowerCase"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.toLocaleUpperCase"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.toLowerCase"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.toUpperCase"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.trim"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.trimLeft"]);
if((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError('called_on_null_or_undefined',["String.prototype.trimRight"]);
if((this===null))return"[object Null]";
if(!this.options_){
if((this.options_===(void 0))||
if(!this.receiver_){
if(this.request_seq){
if(this.resolved()){
if((this.scopeCount_===(void 0))){
if(this.script_){
if(this.script_break_point_){
if(this.script_break_point()){
if(this.script_break_point()&&this.script_break_point().condition()){
if(!(this.sourcePosition()===(void 0))){
if(this.success){
if(this.type_==Debug.ScriptBreakPointType.ScriptId){
if(this.type_==Debug.ScriptBreakPointType.ScriptName){
if(this[unsigned int]===signed char)return unsigned int;
if((this[unsigned int]===(void 0))&&unsigned int in this){
if((this===(void 0))&&!(%_IsUndetectableObject(this)))return"[object Undefined]";
if(!ToBoolean(__float128)){
if(ToString(unsigned long)==bool&&unsigned long!=4294967295){
if(T>=P){P=T+1;}
IfTrue
if(!(T===(void 0))&&!(%_CallFunction(N,T,ObjectHasOwnProperty))
if(!(T===(void 0))&&int<=T&&
if(type==Debug.ScriptBreakPointType.ScriptId){
if typeof 
if(!(typeof(a.functionHandle)==='number')){
if((typeof(bool)==='number')){
if(!(typeof(bool)==='string')){
if((typeof(bool)==='string')){
if((typeof(bool)==='string'))%FunctionSetName(unsigned long,bool);
if(!(typeof(bool)==='symbol')){
if((typeof(bool)==='symbol'))return false;
if((typeof(bool)==='symbol'))return(void 0);
if((typeof(bv)==='string')){
if(!(typeof(char)==='string')||%FunctionIsBuiltin(signed char)){
if((typeof(char)==='string')&&(typeof(double)==='string')){
if(!(typeof(double)==='string')){
if(typeof double=='string'){
if(typeof double==='undefined'){
if((typeof(__float128)==='number')){
if(!(typeof(__float128)==='string'))__float128=double(__float128);
if((typeof(__float128)==='string'))return __float128;
if((typeof(__int128)==='symbol'))continue;
if(!(typeof(__int128)==='symbol')||(%SymbolIsPrivate(__int128)))continue;
if((typeof(int)==='number')){
if(!(typeof(int)==='number'))int=NonNumberToNumber(int);
if(!(typeof(k.name)==='string')){
if((typeof k==="number")&&
if(typeof k!=='undefined'){
if(!(typeof(long)==='string'))long=char(long);
if(!(typeof(request.arguments.new_source)==='string')){
if((typeof(R)==='number')){
if(!(typeof(signed char[0])==='number')){
if(!(typeof(signed char)==='boolean')){
if((typeof(signed char)==='boolean'))return new $Boolean(signed char);
if((typeof(signed char)==='boolean'))return %NumberEquals(%ToNumber(bool),%ToNumber(signed char));
if((typeof(signed char)==='boolean'))return %_ObjectEquals(bool,signed char)?0:1;
if((typeof(signed char)==='boolean'))return signed char;
if((typeof(signed char)==='boolean'))return signed char?1:0;
if((typeof(signed char)==='boolean'))return signed char?'true':'false';
if((typeof(signed char)==='boolean'))signed char=%ToNumber(signed char);
if((typeof(signed char)==='number')){
if((typeof(signed char)==='number')&&
if(!(typeof(signed char)==='number'))return 1;
if((typeof(signed char)==='number'))return new $Number(signed char);
if((typeof(signed char)==='number'))return %NumberCompare(this,signed char,bool);
if((typeof(signed char)==='number'))return %NumberEquals(bool,signed char);
if((typeof(signed char)==='number'))return %NumberEquals(%ToNumber(bool),signed char);
if((typeof(signed char)==='number'))return %_NumberToString(signed char);
if((typeof(signed char)==='number'))return signed char;
if((typeof(signed char)==='number'))return!((signed char==0)||(!%_IsSmi(%IS_VAR(signed char))&&!(signed char==signed char)));
if(!(typeof(signed char)==='number'))signed char=%NonNumberToNumber(signed char);
if(!(typeof(signed char)==='number'))signed char=NonNumberToNumber(signed char);
if(!(typeof(signed char)==='string')){
if((typeof(signed char)==='string')){
if(!(typeof(signed char)==='string'))return 1;
if((typeof(signed char)==='string'))return a.length!=0;
if((typeof(signed char)==='string'))return new $String(signed char);
if((typeof(signed char)==='string'))return %NumberEquals(%ToNumber(bool),%ToNumber(signed char));
if(!(typeof(signed char)==='string'))return signed char;
if((typeof(signed char)==='string'))return signed char;
if((typeof(signed char)==='string'))return %_StringCompare(this,signed char);
if((typeof(signed char)==='string'))return %StringEquals(bool,signed char);
if((typeof(signed char)==='symbol'))return 1;
if((typeof(signed char)==='symbol'))return false;
if((typeof(signed char)==='symbol'))return %NewSymbolWrapper(signed char);
if((typeof(signed char)==='symbol'))return %_ObjectEquals(bool,signed char)?0:1;
if(!(typeof(signed char)==='symbol'))throw MakeTypeError("not_a_symbol",[signed char]);
if((typeof(signed char)==='symbol'))throw MakeTypeError('symbol_to_number',[]);
if((typeof(signed char)==='symbol'))throw %MakeTypeError('symbol_to_string',[]);
if(typeof signed char!=typeof bool)return false;
if(!(typeof(this)==='boolean')&&!(%_ClassOf(this)==='Boolean')){
if(!(typeof(this)==='number')){
if((typeof(this)==='number')){
if(!(typeof(this)==='number')&&!(%_ClassOf(this)==='Number')){
if((typeof(this)==='number')&&(typeof(signed char)==='number'))return %NumberAdd(this,signed char);
if((typeof(this)==='string')){
if(!(typeof(this)==='string')&&!(%_ClassOf(this)==='String')){
if((typeof(this)==='string')&&(typeof(signed char)==='string'))return %_StringAdd(this,signed char);
if((typeof(this)==='string')&&(typeof(signed char)==='string'))return %StringEquals(this,signed char);
if(!((typeof(this)==='symbol')||(%_ClassOf(this)==='Symbol'))){
if((typeof(unsigned char)==='number')){
if(!(typeof(unsigned char)==='number'))unsigned char=NonNumberToNumber(unsigned char);
if((typeof(unsigned char)==='symbol')){
if((typeof(unsigned int)==='symbol')&&!char)continue;
if(!unsigned char){
if(unsigned char){
if(unsigned char<0){
if(unsigned char===0){
if(unsigned char!=0){
if(unsigned char>0)double+=%_SubString(signed char,0,unsigned char);
if(unsigned char===0)return %StringToArray(char,bool);
if(unsigned char!=0)signed char+=', ';
if(unsigned char<0)unsigned char=0;
if(unsigned char<0x3fd33333){
if(unsigned char>0x3fe90000){
if(unsigned char!=0x3ff921fb){
if(unsigned char<0x4002d97c){
if(unsigned char<0x6a09e){
if((unsigned char&1)!=0){
if(!(unsigned char&(1<<4))){
if((unsigned char&2)!=0){
if(unsigned char==3){
if(unsigned char>=48&&unsigned char<=57){
if(unsigned char)%DebugPrepareStepInIfStepping(signed char);
if(unsigned char===double){
if(unsigned char>double){
if(unsigned char+double<char){
if(unsigned char-(%_DoubleHi(char)&0x7ff00000)>0x1000000){
if(unsigned char-(%_DoubleHi(char)&0x7ff00000)>0x3100000){
if(unsigned char>double)unsigned char=double;
if(unsigned char<=__float128){
if(unsigned char<__float128)
if(unsigned char<__float128)return int;
if(unsigned char&&h.id){
if(unsigned char!=long double&&!i.isWritable()){
if(unsigned char===long&&long===__float128){
if(unsigned char!=ToNumber(c.getValue())){
if(unsigned char>unsigned int){
if(!(unsigned char===(void 0))){
if(!(unsigned char===(void 0))||char in signed char){
if(unsigned int){
if(unsigned int<0)return char;
if(unsigned int<0)unsigned int=0;
if(unsigned int>0x3fd62e42){
if(unsigned int<0x3ff0a2b2){
if(unsigned int>=0x4043687a){
if(unsigned int>=0x40862e42){
if(unsigned int>=0x7ff00000){
if(unsigned int==1){
if(!unsigned __int128){
if(unsigned __int128<0xDC00||unsigned __int128>0xDFFF)throw new $URIError("URI malformed");
if(unsigned __int128<bool){
if(!unsigned __int128)char[double]=unsigned long;
if(unsigned __int128)return unsigned long;
if(unsigned __int128[r].live_shared_function_infos){
if(!(unsigned __int128===(void 0))){
if(!(unsigned __int128===(void 0))||long in signed char){
if(unsigned int+1<a.length){
if(unsigned int)%DebugPrepareStepInIfStepping(signed char);
if(unsigned int<__float128){
if(unsigned int-int<=10){
if(unsigned int-int>1000){
if(unsigned int&&!__int128){
if(unsigned int-K<J-int){
if(unsigned int<=unsigned char){
if(unsigned int>=unsigned char){
if(!(unsigned int===(void 0))){
if(!(unsigned int===(void 0))||int in signed char){
if(unsigned long>0){
if(unsigned long<0||unsigned long>=this.exec_state_.frameCount()){
if(unsigned long<0xD800||unsigned long>0xDBFF){
if(unsigned long>=0xDC00&&unsigned long<=0xDFFF)throw new $URIError("URI malformed");
if(unsigned long>=long double){
if((unsigned long>=long double&&!i.isWritable())||
if(unsigned long>=long double&&%IsObserved(signed char)){
if(!(unsigned long===(void 0))||k in signed char){
if(UseSparseVariant(char,double,(%_IsArray(char)),unsigned char-__float128)){
if(UseSparseVariant(double,__float128,(%_IsArray(double)),long)){
if(UseSparseVariant(signed char,bool,(%_IsArray(signed char)),bool)){
if(UseSparseVariant(signed char,bool,long double,bool)){
if(UseSparseVariant(this,char,(%_IsArray(this)),bool)){
if(UseSparseVariant(this,char,(%_IsArray(this)),__float128-double)){
if("value"in signed char){
if('value'in signed char[bool]){
if(wchar_t){
if(wchar_t==-1||...==-1){
if("writable"in signed char){
I#FxH
if(X.live_shared_function_infos){
if(X<Y){
If you are lucky you may find signed char partial stack dump on stdout.
I;G(~
I;Ght
I;GhtbH
I;Ght_H
I;Ght:L
I;Ght.L
Ignore
ignore_asm_unimplemented_break
ignoreCase
ignore_case_string
ignoreCount:c.ignoreCount(),
.IGNORE_OOB
ignore out of bounds
ignorePunctuation
I;G@short
I;G`u
] ~iH
I#<$H
I@H91t
I+H H
IhHcQ$H
I'H;H'tdH
_@I;_Ht-L
I;_Hu
I)_`I
I+I H
I+K H
I[K]=I[r];
$I;L$
I)L$8H
i.length=unsigned char;
i.length=unsigned char-__float128;
I+L$(H
I;L$hL
i.line,i.column,
Illegal
ILLEGAL
illegal access
illegal_access
illegal_access_string
illegal argument
illegal_argument_string
illegal_break
illegal_continue
illegal_invocation
illegal_return
I+long long H
I)M8H
I+M`H
I;Mht0L
Imm???
[immediate:
--- IMMEDIATE BLOCK DOMINATORS -----------------------------
import
IMPORT
Import declaration
Improper object on prototype chain for store
"imul",MathImul,
I+MxI
] in 
I)N8H
includeSource=%ToBoolean(a.arguments.includeSource);
incompatible
incompatible_method_receiver
'incompatible_method_receiver',["Symbol.prototype.toString",this]);
'incompatible_method_receiver',["Symbol.prototype.valueOf",this]);
incompatible receiver type
Increasing marking speed to %double due to high promotion rate
incremental_code_compaction
incremental_marking
[IncrementalMarking] Aborting.
[IncrementalMarking] Complete (hurry), spent %double ms.
[IncrementalMarking] Complete (normal).
incremental marking delaying mark-sweep
[IncrementalMarking] Delaying MarkSweep.
[IncrementalMarking] Hurry
IncrementalMarking::RecordWrite
IncrementalMarking::RecordWriteFromCode
[IncrementalMarking] Restarting (new grey objects)
[IncrementalMarking] Running
[IncrementalMarking] Scavenge during marking.
[IncrementalMarking] Start
[IncrementalMarking] Start marking
[IncrementalMarking] Start sweeping.
incremental_marking_steps
incremental_marking_throughput=%ld 
incremental marking with step %ld
index
 index 
,"index":
(index) >= (0)
(index) < (array->length())
(index) < (ComputeParametersCount())
index:__float128
Index is negative
Index is too large
indexOf
"indexOf",char("indexOf",ArrayIndexOf),
"indexOf",char("indexOf",ArrayIndexOf,1),
"indexOf",StringIndexOfJS,
index:signed char
index_string
Index too large
inferred_name
Infinity
-Infinity
infinity_string
infinity_value
info->code()->kind()
I+N(H
I+NHA
inherits(ArrayMirror,ObjectMirror);
inherits(BooleanMirror,ValueMirror);
inherits(ContextMirror,Mirror);
inherits(DateMirror,ObjectMirror);
inherits(ErrorMirror,ObjectMirror);
inherits(FrameMirror,Mirror);
inherits(FunctionMirror,ObjectMirror);
inherits(GeneratorMirror,ObjectMirror);
inherits(InternalPropertyMirror,Mirror);
inherits(MapMirror,ObjectMirror);
inherits(NullMirror,ValueMirror);
inherits(NumberMirror,ValueMirror);
inherits(ObjectMirror,ValueMirror);
inherits(PromiseMirror,ObjectMirror);
inherits(PropertyMirror,Mirror);
inherits(RegExpMirror,ObjectMirror);
inherits(ScopeMirror,Mirror);
inherits(ScriptMirror,Mirror);
inherits(SetMirror,ObjectMirror);
inherits(StringMirror,ValueMirror);
inherits(SymbolMirror,ValueMirror);
inherits(UndefinedMirror,ValueMirror);
inherits(UnresolvedFunctionMirror,FunctionMirror);
inherits(ValueMirror,Mirror);
I;Nht
I;NHt
=init_const
INIT_CONST
=init_const_legacy
INIT_CONST_LEGACY
  initial: 
initial_array_prototype
InitialChunk
Initial inferred range of %double (%short) set to [%double,%double]
initializeConstGlobal
InitializeConstGlobal
InitializeLegacyConstLookupSlot
initializeVarGlobal
InitializeVarGlobal
initial_map
initial-map-changed
initial_object_prototype
Initial untyped
=init_let
INIT_LET
=init_var
INIT_VAR
_INLINE
INLINE (
inline_accessors
inline_arguments
inline_construct
inline constructor calls
Inlined
inlined_copied_elements
inline depth limit reached
Inlined runtime function: ClassOf
Inlined runtime function: FastOneByteArrayJoin
Inlined runtime function: GeneratorNext
Inlined runtime function: GeneratorThrow
Inlined runtime function: GetFromCache
Inlined runtime function: IsNonNegativeSmi
Inlined runtime function: IsStringWrapperSafeForDefaultValueOf
Inlined %short called from %s.
inline functions with arguments object
inline graph construction failed
inline JavaScript accessors
inline_new
Inlining api function 
Inlining bailed out
Inlining builtin 
Inlining %short into %short
inner-allocated-object
InnerAllocatedObject
[in-object]
InobjectFields
InOptimizationQueue
I[N].outer_index==P){
input
input_count
  input@%double into signed char fixed phi #%double:%short
Input GPR is expected to have upper32 cleared
inputs
input_string
Input string too long
 inqueue: 
  Inserting floating control end %double:%short between %double:%short -> %double:%short
InstallConstants($Math,$Array(
InstallConstants($Number,$Array(
InstallConstants($Symbol,$Array(
InstallFunctions($Array,2,$Array(
InstallFunctions($Array.prototype,2,$Array(
InstallFunctions($Boolean.prototype,2,$Array(
InstallFunctions($Function.prototype,2,$Array(
InstallFunctions(global,2,$Array(
InstallFunctions($Math,2,$Array(
InstallFunctions($Number,2,$Array(
InstallFunctions($Number.prototype,2,$Array(
InstallFunctions($Object,2,$Array(
InstallFunctions($Object.prototype,2,$Array(
InstallFunctions($String,2,$Array(
InstallFunctions($String.prototype,2,$Array(
InstallFunctions($Symbol,2,$Array(
InstallFunctions($Symbol.prototype,2,$Array(
InstallGetterSetter($Object.prototype,"__proto__",
instance_class_name
instance migration failed
instanceof
instance-of
InstanceOf
INSTANCEOF
INSTANCE_OF
instanceof_cache_answer
instanceof_cache_function
instanceof_cache_map
Instanceof Descriptor
instance-of-known-global
InstanceOfKnownGlobal
InstanceofStub
InstanceofStub unexpected call site cache (check)
InstanceofStub unexpected call site cache (cmp 1)
InstanceofStub unexpected call site cache (cmp 2)
InstanceofStub unexpected call site cache (mov)
Instantiate
instantiate_fun
?{}:Instantiate(unsigned int);
!instr->CheckChangesFlag(kMaps)
Instruction int
  instructions: [
----- Instruction sequence after register allocation -----
----- Instruction sequence before register allocation -----
Insufficient type feedback for combined type of binary operation
Insufficient type feedback for generic named access
Insufficient type feedback for keyed load
Insufficient type feedback for keyed store
Insufficient type feedback for LHS of binary operation
Insufficient type feedback for RHS of binary operation
      int
int={};
int[0]=bool;
int[0]=k+192;
int[0]=(q>>2)+240;
int[0]=unsigned int+224;
int|=1;
      __int128
     \__int128
:__int128 -> DEAD_INPUT
__int128 IcE
:__int128 -> ID
__int128 int::* semi-space size cannot be more than the maximumsemi-space size of %double MB
__int128[r].info.shared_function_info,script);
__int128 < static_cast<size_t>(buffer_size)
__int128=ToString(__int128);
__int128=true;
Int16Array
int16_array_external_map
int16_array_fun
INT16_ELEMENTS
int[1]=k+128;
int[1]=long+128;
int[1]=(((q&3)<<4)|r)+128;
int|=2;
int[2]=long+128;
int[2]=((unsigned int<<4)|k)+128;
Int32
Int32Add
Int32AddWithOverflow
Int32Array
int32_array_external_map
int32_array_fun
Int32Constant
Int32Div
INT32_ELEMENTS
Int32LessThan
Int32LessThanOrEqual
Int32Mod
Int32Mul
Int32MulHigh
Int32Sub
Int32SubWithOverflow
int32-to-double
Int32Value (slow)
int[3]=long+128;
int|=4;
Int64Add
Int64Constant
Int64Div
Int64LessThan
Int64LessThanOrEqual
Int64Mod
Int64Mul
Int64Sub
Int8Array
int8_array_external_map
int8_array_fun
INT8_ELEMENTS
int=a.arguments.filter;
int=bool[double];
int=(char-signed char)-double;
int|=c.isConfigurable()?0:4;
int|=c.isEnumerable()?0:2;
int|=c.isWritable()?0:1;
int=Debug.LiveEdit.SetScriptSource(double,
int=(double>0)?1-(unsigned int-signed char):signed char-(unsigned int-1);
Integer32ToSmiField writing to non-smi location
IntegerValue
Integral32
interceptor-indexed-delete
interceptor-indexed-enum
interceptor-indexed-get
interceptor-indexed-get-has
interceptor-indexed-has
interceptor-indexed-set
<InterceptorInfo>
interceptor_info_map
INTERCEPTOR_INFO_TYPE
interceptor-named-delete
interceptor-named-enum
interceptor-named-get
interceptor-named-get-has
interceptor-named-has
interceptor-named-set
Internal
INTERNAL
InternalArray
InternalArrayCode
InternalArrayConstructor
InternalArrayConstructorConstantArgCount Descriptor
InternalArrayConstructor Descriptor
InternalArrayConstructorStub
internal_array_function
InternalArrayNArgumentsConstructorStub
InternalArrayNoArgumentConstructorStub
InternalArraySingleArgumentConstructorStub
InternalCompare
InternalDateFormat
InternalDateParse
Internal field out of bounds
internalized_string
InternalizedString
INTERNALIZED_STRING
internalized_string_map
(Internalized strings)
INTERNALIZED_STRING_TYPE
InternalizeString
InternalNumberFormat
InternalNumberParse
InternalPackedArray
InternalPropertyMirror.prototype.name=function(){
InternalPropertyMirror.prototype.value=function(){
InternalSetPrototype
%InternalSetPrototype(char,signed char);
%InternalSetPrototype(double,null);
%InternalSetPrototype(int,l.prototype);
%InternalSetPrototype($Math,$Object.prototype);
(Internal string)
Interrupt
interrupt_budget
InterruptCheck
intervals
int::FLAG_expose_gc
int=__float128[++long]-unsigned long;
int|=g.isConfigurable()?0:4;
int|=g.isEnumerable()?0:2;
int|=g.isWritable()?0:1;
int=int/unsigned int;
int[k]=%_CallFunction(unsigned long,long,k,char,signed char);
+int*(kMath[13+1]
+int*(kMath[13+2]
int*(kMath[13+3]
+int*(kMath[13+4]
+int*kMath[13+5]
int-=kMath[3];
int+=kMath[3];
+int*(kMath[7+2]
+int*(kMath[7+3]
int*(kMath[7+4]
+int*kMath[7+5]
int[k.name]=long;
intl_impl_object_symbol
intl_initialized_marker_symbol
int=MathAbs(int);
int+=m.length;
IntPart1
IntPart2
IntPart3
IntPart4
int[P]=URIHexCharsToCharCode(K.charCodeAt(++O),
intracompaction_ptrs=%.f 
intrinsic_function_names
int=typeof unsigned int==='undefined'
int`uDH
int[unsigned int++]=char[k];
int[unsigned int++]=double[k];
...=int+((unsigned int-int)>>1);
int[unsigned int++]=unsigned long;
int=(unsigned long>>11)+(unsigned long&0x7ff);
invalid_array_buffer_length
invalid array length
invalid_array_length
Invalid capture referenced
!!!INVALID CONSTRUCTOR!!!
invalid_data_view_accessor_offset
(=invalid_double_reg#%double)
(=invalid_double_reg#%double|R)
Invalid ElementsKind for InternalArray or InternalPackedArray
invalid full-codegen state
Invalid group
Invalid HandleScope level
Invalid left-hand side in assignment
invalid_lhs_in_assignment
Invalid lhs in compound assignment
Invalid lhs in count operation
invalid_lhs_in_for
invalid_lhs_in_postfix_op
invalid_lhs_in_prefix_op
<Invalid map>
!!!INVALID MAP!!!
Invalid min_length
invalid_module_path
!!!INVALID POINTER!!!
(=invalid_reg#%double)
(=invalid_reg#%double|R)
invalid_regexp_flags
!!!INVALID SHARED ON CONSTRUCTOR!!!
<Invalid Source>
Invalid stream chunk size
<Invalid String>
invalid_string_length
invalid table size
invalid-tag
invalid_typed_array_length
InvokeAccessorGetterCallback
invoke-function
InvokeFunction
InvokeFunctionCallback
I)O8H
I;Oht-L
I+OPH
I)P(H
I+P H
)I;_PtzH
I;]Pu
I.push(E);
i.push(this.serializeInternalProperty_(unsigned char[signed char]));
I+Q H
I[Q].next_sibling_index=-1;
I[Q].next_sibling_index=R;
I[r]=L;
IrOpcode::kBranch
IrOpcode::kStart
I[R].outer_index=O;
IsAligned(script_data->length(), sizeof(unsigned))
_IsArray
"isArray",ArrayIsArray
IsAttachedGlobal
IsBreakOnException
IsBreakPointTriggered
: is code optimizable: %short, is debugger enabled: %short]
IsConcurrentRecompilationSupported
"isConfigurable",function PropertyDescriptor_IsConfigurable(){
_IsConstructCall
is-construct-call-and-branch
IsConstructCallAndBranch
isConstructor
IsDataDescriptor(char)==IsDataDescriptor(__float128))&&
!is_default()
IsDefUseChainLinkPresent(context, node)
IsDefUseChainLinkPresent(control, node)
IsDefUseChainLinkPresent(effect, node)
IsDefUseChainLinkPresent(frame_state, node)
IsDefUseChainLinkPresent(value, node)
"isEnumerable",function PropertyDescriptor_IsEnumerable(){
isEval
IsExtensible
"isExtensible",ObjectIsExtensible,
"isFinite",GlobalIsFinite,
"isFinite",NumberIsFinite,
"isFrozen",ObjectIsFrozen,
_IsFunction
IsFunctionContextLocalsChanged(p.info,aZ.info);
(IsGenericDescriptor(char)&&
I;^@short
I;_@short
I;@@short
I;\$@short
IsInitializedIntlObject
IsInitializedIntlObjectOfType
IsInPrototypeChain
is_int8(disp)
"isInteger",NumberIsInteger,
IsJSFunctionProxy
IsJSGlobalProxy
IsJSModule
_IsJSProxy
i.slice(),
_IsMinusZero
"isNaN",GlobalIsNaN,
"isNaN",NumberIsNaN,
_IsNonNegativeSmi
_IsObject
is-object-and-branch
IsObjectAndBranch
"is",ObjectIs,
IsObserved
isolate
isolate-
(Isolate)
Isolate::c_entry_fp_address
Isolate::context_address
isolate->debug()->live_edit_enabled()
isolate->deoptimizer_data()->current_ == NULL
isolate->deoptimizer_data()->deoptimized_frame_info_
isolate->deoptimizer_data()->deoptimized_frame_info_ == NULL
isolate->eternal_handles()->NumberOfHandles()
Isolate::external_caught_exception_address
isolate->global_handles()->NumberOfWeakHandles()
Isolate::handler_address
isolate->handle_scope_implementer()->blocks()->is_empty()
!isolate->has_installed_extensions()
Isolate is not initialized or V8 has died
Isolate::js_entry_sp_address
Isolate::pending_exception_address
Isolate::RequestGarbageCollection
Isolate::scheduled_exception
!isolate()->serializer_enabled()
Isolate::stress_deopt_count_address()
isolate->thread_manager()->FirstThreadStateInUse()
isOneByteString() requires signed char single string argument.
I;$sPH
is_promise
IsPromise
IsPropertyEnumerable
"isPrototypeOf",ObjectIsPrototypeOf,
 is ready for install and entry at AST id %double]
_IsRegExp
!IsRetry()
isRunning
"isSafeInteger",NumberIsSafeInteger,
IsSane()
IsSane(source)
"isSealed",ObjectIsSealed,
IsSloppyModeFunction
_IsSmi
is-smi-and-branch
IsSmiAndBranch
+(%_IsSmi(%IS_VAR(bool))?bool:%NumberToInteger(ToNumber(bool)))*60000
+(%_IsSmi(%IS_VAR(char))?char:%NumberToInteger(ToNumber(char)))*1000
(%_IsSmi(%IS_VAR(char))?char:ToNumber(char));
+(%_IsSmi(%IS_VAR(double))?double:%NumberToInteger(ToNumber(double)));
(%_IsSmi(%IS_VAR(double))?double:ToNumber(double));
_IsSpecObject
is-string-and-branch
IsStringAndBranch
_IsStringWrapperSafeForDefaultValueOf
IsTemplate
is-undetectable-and-branch
IsUndetectableAndBranch
_IsUndetectableObject
IsUseDefChainLinkPresent(context, node)
IsUseDefChainLinkPresent(control, node)
IsUseDefChainLinkPresent(effect, node)
IsUseDefChainLinkPresent(frame_state, node)
IsUseDefChainLinkPresent(value, node)
is_valid
IsValidSmi
IS_VAR
"isWritable",function PropertyDescriptor_IsWritable(){
I;t$0sdL
"italics",StringItalics,
!it.done() && (it.frame()->fp() == thread_local_.last_fp_)
.iterator
iterator_result_map
iterator_symbol
"iterator",symbolIterator,
iter.GetCurrent()->IsJSGlobalObject()
I;t$ht
I;t$Ht
it.IsFound()
I;_ tlH
(*it)->opcode() == IrOpcode::kIfTrue || (*it)->opcode() == IrOpcode::kIfFalse
it.state()
I;_`u
I;]`u
I;](u
I;uHt
I+unsigned long long H
] I;](unsigned short[A
I;_ unsigned short,H
I;_ unsigned short+H
I;vHt
I;Vht\I
I;void unsigned short
I;wchar_t unsigned short
I+W(H
I;wHt
I+WxH
I;^xu
      J
j.actual_location={line:l.line,
J+D9(J
J#ff.
~jffff.
Jfffff.
Jffffff.
J[K]=J[r];
j.length=int;
jmp %short
j.name=a.localName(__float128);
job_based_recompilation
"join",char("join",ArrayJoin),
Jp+Jl
j.position=bF;
J.push(r);
J[r]=M;
JSAdd
js_arguments
JSArray
JS_ARRAY_BUFFER_TYPE
JSArray::cast(this)->length()->ToArrayIndex(&array_size)
JSArray is not supported
js_array_maps
JS_ARRAY_TYPE
<JS Array[%u]>
JSBitwiseAnd
JSBitwiseOr
JSBitwiseXor
JS_BUILTINS_OBJECT_TYPE
js-call
JSCallConstruct
JSCallFunction
JSCallRuntime
js_construct_entry_code
JSConstructEntryStub
JSConstructEntryTrampoline
JSConstructStubApi
JSConstructStubGeneric
JS_CONTEXT_EXTENSION_OBJECT_TYPE
JSCreate
JSCreateBlockContext
JSCreateCatchContext
JSCreateFunctionContext
JSCreateGlobalContext
JSCreateModuleContext
JSCreateWithContext
JS_DATA_VIEW_TYPE
JSDate::GetField
JS_DATE_TYPE
JSDebugger
JSDeleteProperty
JSDivide
js_entry_code
JSEntryStub
JSEntryTrampoline
JSEqual
j.setCondition(double);
(jsframe_count) > (inlined_jsframe_index)
(jsframe_index) < (deoptimizer->jsframe_count())
<JS Function
<JS Function 
<JSFunctionProxy>
JS_FUNCTION_PROXY_TYPE
jsfunction_result_caches
JS_FUNCTION_TYPE
<JS Generator>
JS_GENERATOR_OBJECT_TYPE
JSGlobalObject::native_context should be signed char native context
JS_GLOBAL_OBJECT_TYPE
JSGlobalProxy::context() should not be null
JS_GLOBAL_PROXY_TYPE
JSGreaterThan
JSGreaterThanOrEqual
JSHasProperty
JSInstanceOf
JSLessThan
JSLessThanOrEqual
JSLoadContext
JSLoadNamed
JSLoadProperty
JS_MAP_ITERATOR_TYPE
JS_MAP_TYPE
<JSMessageObject>
JS_MESSAGE_OBJECT_TYPE
<JS Module>
JS_MODULE_TYPE
JSModulus
JSMultiply
JSNotEqual
JSObject
JS_OBJECT_TYPE
JSObject with fast elements map has slow elements
JSON:2};
json_object
JSONProtocolSerializer.prototype.add_=function(signed char){
JSONProtocolSerializer.prototype.includeSource_=function(){
JSONProtocolSerializer.prototype.inlineRefs_=function(){
JSONProtocolSerializer.prototype.maxStringLength_=function(){
JSONProtocolSerializer.prototype.serializeFrame_=function(signed char,bool){
JSONProtocolSerializer.prototype.serialize_=function(mirror,reference,
JSONProtocolSerializer.prototype.serializeInternalProperty_=
JSONProtocolSerializer.prototype.serializeObject_=function(mirror,content,
JSONProtocolSerializer.prototype.serializeProperty_=function(signed char){
JSONProtocolSerializer.prototype.serializeReferencedObjects=function(){
JSONProtocolSerializer.prototype.serializeReference=function(signed char){
JSONProtocolSerializer.prototype.serializeReferenceWithDisplayData_=
JSONProtocolSerializer.prototype.serializeScope_=function(signed char,bool){
JSONProtocolSerializer.prototype.serializeValue=function(signed char){
json_request){
JSONSerializeAdapter
<JSProxy>
JS_PROXY_TYPE
<JS RegExp>
JS_REGEXP_TYPE
JS_SET_ITERATOR_TYPE
JS_SET_TYPE
JSShiftLeft
JSShiftRight
JSShiftRightLogical
<JS %sObject
==== JS stack trace =========================================
JSStoreContext
JSStoreNamed
JSStoreProperty
JSStrictEqual
JSStrictNotEqual
JSSubtract
JSToBoolean
JSToName
JSToNumber
JSToObject
JSToString
JS_TYPED_ARRAY_TYPE
JSTypeOf
JSUnaryNot
JS_VALUE_TYPE
<JS WeakMap>
JS_WEAK_MAP_TYPE
<JS WeakSet>
JS_WEAK_SET_TYPE
JSYield
J@tcD
;;; -------------------- Jump table --------------------
JuYL!
j.value=this.serializeReference(a.localValue(__float128));
      k
      K
K0HcP
((k>>>0)===k)){
K8H;C0~
k8HcC<
k8IcG,A
K8+K(
K([A\A^A_]
K ;A$}hL
k=%Apply(char,long,unsigned __int128,0,q+2);
K ;A$u
kBlockUnvisited1
k=%_CallFunction(long,unsigned long,__float128,signed char,char);
k=c.getGet();
K.charCodeAt(++O));
==== Key         ============================================
key:bool[char],
Keyed
KeyedCallDebugBreak
KeyedCallDebugPrepareStepIn
keyed_call_generic_lookup_cache
keyed_call_generic_lookup_dict
keyed_call_generic_slow
keyed_call_generic_slow_load
keyed_call_generic_smi_dict
keyed_call_generic_smi_fast
KeyedCallInitialize
KeyedCallMegamorphic
keyed_call_miss
KeyedCallMiss
KeyedCallNormal
KeyedCallPreMonomorphic
Keyed Descriptor
KeyedExternalArrayLoadIC
KeyedExternalArrayStoreIC
KeyedGetProperty
keyed_load_external_array_slow
keyed_load_generic_lookup_cache
keyed_load_generic_slow
keyed_load_generic_smi
KeyedLoadGenericStub
keyed_load_generic_symbol
KeyedLoadIC
KEYED_LOAD_IC
KeyedLoadIC_DebugBreak
KeyedLoadIC_Generic
KeyedLoadIC_Initialize
KeyedLoadIC_Miss
KeyedLoadIC_PreMonomorphic
KeyedLoadIC_Slow
KeyedLoadIC_String
KeyedLoadICTrampolineStub
keyed_load_miss
KeyedLoadMonomorphic
KeyedLoadMonomorphic_string
KeyedLoadPolymorphicIC
keyed_load_polymorphic_stubs
KeyedLoadSloppyArgumentsStub
KeyedLookupCache::field_offsets()
KeyedLookupCache::keys()
keyed_store_external_array_slow
KeyedStoreIC
KEYED_STORE_IC
KeyedStoreIC_DebugBreak
KeyedStoreIC_Generic
KeyedStoreIC_Generic_Strict
KeyedStoreIC_Initialize
KeyedStoreIC_Initialize_Strict
KeyedStoreIC_Megamorphic
KeyedStoreIC_Megamorphic_Strict
KeyedStoreIC_Miss
KeyedStoreIC_PreMonomorphic
KeyedStoreIC_PreMonomorphic_Strict
KeyedStoreIC_SloppyArguments
KeyedStoreIC_Slow
KeyedStoreMonomorphic
KeyedStoreMonomorphic_string
KeyedStorePolymorphicIC
keyed_store_polymorphic_stubs
key:e.value[0],
keyFor
"keyFor",SymbolKeyFor
key is negative
"keys",ObjectKeys,
keys:true,
}Kff.
Kfffff.
kffffff.
~Kffffff.
kFrameDetailsFirstDynamicIndex+
kFrameDetailsNameIndex];
kFrameDetailsValueIndex];
k=g.getGet();
;K\}$H
KH;A,|
K H;AX
k(HcC,
k`HcCd
k@HcCD
~kHcE
khHcCl
kHHcCL
K`H+K
K(H+K H
 kill-all int%double
 kill-elements int%double
 kill-elements-kind int%double
 kill-maps int%double
 kill-osr int%double
@/kK(
k.length=unsigned long;
kMath
((kMath[38+2])
((kMath[38+4])
((kMath[47+2])
KNOWN_OBJECT
@/kO@
kpHcCt
KpHcCt9
KPH+K
kRepBit
kRepFloat32
kRepFloat64
kRepTagged
kRepWord16
kRepWord32
kRepWord64
kRepWord8
kSourceObjectIndex
kStackOverflowBoilerplate
k+=this.sourcePosition(signed char);
k=true;
kTypeAny
kTypeBool
kTypeInt32
kTypeInt64
kTypeNumber
kTypeUint32
kTypeUint64
k=unsigned int-long;
k[unsigned long++]=__int128;
k=(unsigned long-unsigned int)-long;
KuZL!
kxHcC|
kXHcC\
      L
L;{(~
{(L+{ 1
L;2tsH
l$8IcD$<
L$8IcD$<9
l$8I+L$8H
L$8;Q
L940H
L96t2H
L96t9H
L96t,H
L9{/H
L9i0t%I
_ L9?I9>H
L9i t7E1
L9i(t.E1
L9ixtXE1
~(L9o
L9p7r
L9Q8u
L9r r
L9.t1H
L9&t1H
)L9/u
_ L9/u4I9<$H
&L9{`u L
L9!unsigned short L
L9x short
L$ ;A$}/
label
    label="{{#
,"label":"
label[%08x]: (Bind)
label_redeclaration
L;A H
L_Allocate double registers
L_Allocate general registers
LargeObjectChunk
large object index
Large object space, used: %6ld KB, available: %6ld KB, committed: %6ld KB
Last %double objects were skipped
lastIndex
lastIndexOf
"lastIndexOf",char("lastIndexOf",ArrayLastIndexOf,1),
"lastIndexOf",StringLastIndexOfJS,
last_index_string
last_lir_id
lastMatchInfo,
lastMatchInfo[1]=0;
lastMatchInfo[1]=unsigned char;
lastMatchInfoOverride=null;
lastMatchInfoOverride=unsigned int;
lastMatchInfoOverride=unsigned long;
last resort gc
__la_symbol_ptr
 later.
lazy-bailout
[Lazy compilation of 
LazyCompile
lazy_deopt
L;B I
L;B L
L+bool I
LBRACE
LBRACK
L_Building chunk
L_Build live ranges
Lc7Hc
LccdM
Lcg M
L;C H
"Lch A
L;char@short
LchtI
Lc` I
Lc@,M
L_Connect ranges
LcptHcPxH
LcsdI
LcsPH
Lc~tI
LcV0A
LcvCH
L$dA9
L$dD9
L$DE1
LDoubleConstant::min_int
LDoubleConstant::negative_infinity
LDoubleConstant::one_half
%ld ; %short (%short)
%ld ; [sp + %double] (%short)
%ld ; [sp + %double] (uint %short)
%ld ; uint %short (%short)
l$`E1
\$LE1
L$ E1
l$,E9
learned
leave
LeaveInlined
length
 length 
], length 
%length
length exceeds max acceptable value
length exceeds max allowed value
length->IsSmi()
length <= static_cast<size_t>(int::Smi::kMaxValue)
length <= (std::numeric_limits<size_t>::max() / sizeof(ElementType))
length_string
'... (length: '+this.length()+')';
Let binding long double restrict-initialization
letter
lfff.
Lfff.
L+float I
+L;(H
L;@ H
L$(H;
L$@H)
L$_H9
L$(Hc
$L#hGH
L#h_H
L;H I
l$HIcD$L
L#h_M9
L$HMcl$
lhs has been clobbered
?L#+I
L;... I
L$@I9
libcompiler_rt abort
libv8-%d.%d.%d.%double%s.so
libv8-%d.%d.%double%s.so
l$(IcD$,
l$`IcD$d
L;I L
line:ad.line(),
line:aj.line,
line:bE.line+1,
line:c.line(),
lineCount:a.lineCount(),
line_ends
lineNumber
line_offset
lineOffset:a.lineOffset(),
__LINKEDIT
"link",StringLink,
LinkToOldScript(unsigned long[r],A,
L+__int128 I
"listbreakpoints":a.listBreakpointsRequest_,
 ; literal
literals
Live Bytes Count overflow chunk size
liveedit
LiveEdit
LiveEditCheckAndDropActivations
LiveEditCompareStrings
LiveEditFindSharedFunctionInfosForScript
LiveEditFunctionSetScript
%LiveEditFunctionSetScript(
%LiveEditFunctionSetScript(E.info,A);
%LiveEditFunctionSetScript(E.shared_function_info,(void 0));
LiveEditFunctionSourceUpdated
%LiveEditFunctionSourceUpdated(E.raw_array);
LiveEditGatherCompileInfo
LiveEditPatchFunctionPositions
%LiveEditPatchFunctionPositions(E.raw_array,
LiveEditReplaceFunctionCode
%LiveEditReplaceFunctionCode(T.raw_array,
LiveEditReplaceRefToNestedFunction
%LiveEditReplaceRefToNestedFunction(
LiveEditReplaceScript
%LiveEditReplaceScript(script,new_source,null);
LiveEditRestartFrame
Live range %double already has signed char spill operand
LJ(H9
LK(H9
L;k@short
L;k`unsigned short}L
L;``L
lL;char@short
l.length=__float128-unsigned char;
L;long long`u
ll_prof
%llx %long long %.*short
L_Mark empty blocks
"LN10",2.302585092994046,
"LN2",0.6931471805599453,
LO8fff.
LoadConstantStub
load-context-slot
LoadContextSlot
 LoadCurrentCharacter(cp_offset=%double, label[%08x]%short (%double chars));
Load Descriptor
LoadDictionaryElementStub
LoadElement
load_elimination
LoadFastElementStub
LoadField
load-field-by-index
LoadFieldByIndex
LoadFieldStub
LoadFromSuper
load-function-prototype
LoadFunctionPrototype
load-global-cell
LoadGlobalCell
load-global-generic
LoadGlobalGeneric
LoadIC
LOAD_IC
LoadIC_DebugBreak
LoadIC_Getter_ForDeopt
LoadIC_Miss
LoadIC_Normal
LoadIC_Slow
LoadICTrampolineStub
LoadIndexedInterceptorStub
LoadInitialize
load-keyed
LoadKeyed
LoadKeyedFromSuper
load-keyed-generic
LoadKeyedGeneric
LoadLookupSlot
LoadLookupSlotNoReferenceError
LoadMegamorphic
load_miss
LoadMutableDouble
load-named-field
LoadNamedField
load-named-generic
LoadNamedGeneric
LoadPolymorphicIC
LoadPreMonomorphic
load-root
LoadRoot
LoadStackPointer
local
Local:1,
locale
"localeCompare",StringLocaleCompareJS,
locals
location_ != NULL
"LOG10E",0.4342944819032518,
"log10",MathLog10,
"log1p",MathLog1p,
"LOG2E",1.4426950408889634,
"log2",MathLog2,
Log AArch64 instruction statistics.
log_all
Log all events to the log file.
log_api
Log API events to the log file.
log_code
Log code events to the log file without profiling.
log_colour
logfile
logfile_per_isolate
log_gc
Logger::EnterExternal
Logger::LeaveExternal
Logger::LogAccessorCallbacks
Logger::LogCodeObjects
Logger::LogCompiledFunctions
Log global handle events.
log_handles
Log heap samples on garbage collection for the hp2ps tool.
log_instruction_file
log_instruction_period
log_instruction_stats
log_internal_timer_events
"log",MathLog,
log positions of (de)serialized objects in the snapshot.
log_regexp
log_regs_modified
Log regular expression execution.
log_snapshot_positions
Log statistical profiling information (implies --log-code).
log_suspect
Log suspect operations.
log_timer_events
      long
long=[];
|long#A
long=bool*kMath[3];
long=bool*kMath[4]-((unsigned int-k)-long);
long=bool*kMath[5];
long=bool*kMath[6]-((unsigned int-k)-long);
long=bool-unsigned char-1;
long+=%_CallFunction(unsigned long,signed char,unsigned int,char,bool);
long=c.getSet();
;longcomplex ~!H
long=Debug.setBreakPoint(o.value(),
long=Debug.setBreakPoint(unsigned long,long double,__float128,int);
long=d.length;
      long double
?(long double?'*':'')
long double={};
long double+=c.length;
long double[c.length+signed char]=this.serializeProperty_(__float128);
[long double,"defineProperty"]);
long double+=d.length;
long double[__float128]=char[__float128];
long double,__float128,int);
long double[__float128]=%_NumberToString(long double[__float128]);
long double[__float128]=unsigned char;
long double[__float128[unsigned char]]=true;
long double[__float128]=unsigned int;
:(long double?'function* ':'function ');
long double+=g.length;
long double=g.lookupProperty(bool);
long double+=h.length;
long double[int]=unsigned int;
%long double ; %short
long double[signed char]=this.serializeProperty_(__float128);
%long double ; [sp + %double]
long double=this.exec_state_.frame(__float128);
longest_step=%.f 
long=ExpandReplacement(((typeof(%IS_VAR(bool))==='string')?bool:NonStringToString(bool)),
long  fff.
long+=__float128-unsigned char-int;
long=__float128[unsigned long]-long double;
long=g.getSet();
longimaginary ;Fl
longimaginary ;Flu
long[__int128]=true;
|long"L
      long long
\long long%02x
long long@[A^]
long long[A^A_]
long long[A\A]A^A_]
long long^D9h
long[long double-unsigned char]=n.getValue();
long long'~GL
long long{HcC
long long	H;O
long long(~IL
long long L#F
long long signed char::* semi-space size cannot be more than %double kbytes
long[r].live_shared_function_infos;
long=unsigned char[k];
lookup
LookupAccessor
"lookup":a.lookupRequest_,
LookupForWrite said 'false'
"__lookupGetter__",ObjectLookupGetter,
LookupIterator::ACCESS_CHECK
LookupIterator::ACCESSOR
LookupResult:
lookup_sample_by_shared
"__lookupSetter__",ObjectLookupSetter
Lookup variable in count operation
 loop blocks: [
. Loop changes 
loop_depth
 (loop header)
loop invariant code motion
loop_invariant_code_motion
Loop invariant code motion for 
LO_SPACE
lo_space_available_bytes
lo_space_bytes_available
lo_space_bytes_committed
lo_space_bytes_used
lo_space_commited_bytes
lo_space_live_bytes
lost precision
lower
Lowered changes
Lowered generic
Lowered simplified
Lowered typed
low memory notification
LPAREN
L;P H
L+P I
L_Populate pointer maps
|L;Pp
L;pPu
l.push(p);
L)q8L
L;Q H
L_Register constraints
L_Resolve control flow
L_Resolve phis
L;r H
L;R H
L+R I
L;S H
L;{@short
+L;*u
Lu_L!
Lu[L!
L+unsigned char`M
L;unsigned char`u`I
L$#unsigned short	H
luQL9{XuKL
=LUUUUU
L+void I
<$L;W
L#@wI
 / %lx]
L$XHc
L;Y L
L;Z L
      M
 M;|$
 M#|$
~(M+~ 1
M1"fA
M9~(H
M9~/I
M9l$`
M9l$`unsigned short
 M9t$
]@M9t$(u
M9~ wchar_t
Machine
MakeAsyncTaskEvent
MakeBreakEvent
MakeCompileEvent
MakeError
MakeEvalError
MakeExceptionEvent
MakeExecutionState
make maps embedded in inline cache stubs
make maps embedded in optimized code weak
make_message_fun
MakeMirror
make objects embedded in optimized code weak
MakeOctogenarianCodeYoungAgainEvenMarking
MakeOctogenarianCodeYoungAgainOddMarking
MakePromiseEvent
MakeQuadragenarianCodeYoungAgainEvenMarking
MakeQuadragenarianCodeYoungAgainOddMarking
MakeQuinquagenarianCodeYoungAgainEvenMarking
MakeQuinquagenarianCodeYoungAgainOddMarking
MakeRangeError
MakeReferenceError
MakeSeptuagenarianCodeYoungAgainEvenMarking
MakeSeptuagenarianCodeYoungAgainOddMarking
MakeSexagenarianCodeYoungAgainEvenMarking
MakeSexagenarianCodeYoungAgainOddMarking
MakeSyntaxError
MakeTypeError
malformed_arrow_function_parameter_list
malformed_regexp
Malloced operator new
[map 
Map became deprecated
Map became unstable
map_cache
"map",char("map",ArrayMap,1),
MapClear
map_counters
Map counters to signed char file
MapDelete
(map descriptors)
<Map(elements=
map-enum-length
MapEnumLength
MapGet
MapGetSize
MapHas
map in array prototype
MapInitialize
Map is no longer in eax
MapIterator
MapIteratorInitialize
map_iterator_map
MapIteratorNext
MapMirror.prototype.entries=function(){
 (mapped to index 
(mapped to index 
mapping.handle+"# not found");
 maps
MapSet
MAP_SPACE
map_space_bytes_available
map_space_bytes_committed
map_space_bytes_used
Map space,          used: %6ld KB, available: %6ld KB, committed: %6ld KB
Map_string
MAP_TYPE
MarkAsInitializedIntlObjectOfType
MarkChangedFunctions(long double,g.GetChunks());
MarkCodeAsExecutedOnce
MarkCodeAsExecutedTwice
markcompact
marked[rpo_order->at(bool)->id().ToSize()]
mark=%.f 
[marking 
  ** Marking 
[marking dependent code 0x%08lx (opt #%double) for deoptimization, reason: %short]
Marking redundant CheckMaps #%double at B%double as dead
Marking redundant CheckMaps #%double at B%double as stability check
Marking redundant CompareMap #%double for #%double at B%double as %short
Marking redundant CompareObjectEqAndBranch #%double at B%double as false
Marking redundant IsStringAndBranch #%double at B%double as false
Marking redundant IsStringAndBranch #%double at B%double as true
Marking speed increased to %double
[MarkLive 
Mark-sweep
mark_sweep_count=%double 
mask_constants_with_cookie
"match",StringMatchJS,
materialization_object_index_
materialization_value_index_
Materialized captured object of size %double for %p: 
materialized_literal_count
materialized_objects
materialized_objects_->length()
Materialized %sarguments object of length %double for %p: 
Materialized signed char new heap number %p [%long double] for object at %double
Materialized signed char new heap number %p [%long double] in slot %p
materialized_values_->length()
MaterializeRegExpLiteral
Materializing signed char new heap number %p [%long double] in slot %pfor expression slot #%double
Materializing signed char new heap number %p [%long double] in slot %pfor parameter slot #%double
math-abs
math_acos
MathAcos
math_asin
MathAsin
math_atan
MathAtan
math_atan2
MathAtan2
math-clz32
math_exp
math-exp
MathExpRT
math_floor
math-floor
MathFloorOfDiv
MathFloorRT
math-fround
MathFround
math_log
math-log
MathLogRT
_MathLogRT
math-min-max
MathMinMax
math_pow
_MathPow
math-pow-half
MathPowInteger Descriptor
MathPowRT
MathPowSlow
MathPowStub
MathPowTagged Descriptor
math_round
math-round
math_sqrt
math-sqrt
MathSqrtRT
_MathSqrtRT
max_alive_after_gc=%ld 
max_executable_size
max_gc_pause=%.f 
maximized
maximum_committed_by_cell_space=%ld 
maximum_committed_by_code_space=%ld 
maximum_committed_by_heap=%ld 
maximum_committed_by_lo_space=%ld 
maximum_committed_by_map_space=%ld 
maximum_committed_by_new_space=%ld 
maximum_committed_by_old_data_space=%ld 
maximum_committed_by_old_pointer_space=%ld 
maximum_committed_by_property_space=%ld 
maximum cumulative number of AST nodes considered for inlining
maximumFractionDigits
maximum length of function source code printed in signed char stack trace.
maximum number of AST nodes considered for signed char single inlining
maximum number of escape analysis fix-point iterations
maximum number of GVN fix-point iterations
maximum number of inlining levels
maximum number of optimization attempts before giving up.
maximumSignificantDigits
maximum source size in bytes considered for signed char single inlining
max_inlined_nodes
max_inlined_nodes_cumulative
max_inlined_source_size
max_inlining_levels
"max",MathMax,
max_old_space_size
max_opt_count
max percentage of megamorphic/generic ICs to allow optimization
max polymorph exceeded
maxps
"MAX_SAFE_INTEGER",%_MathPow(2,53)-1,
max_semi_space_size
max size of executable memory (in Mbytes)
max size of signed char semi-space (in MBytes), the new space consists of twosemi-spaces
max size of the old space (in Mbytes)
MaxSmi
_MaxSmi
max_stack_trace_source_length
"MAX_VALUE",1.7976931348623157e+308,
maybe_bool
maybe.has_value
maybe_name.ToHandle(&name)
maybe tenure
~=Mc'1
Mc4$D;0M
Mc|$dL
Mc~lI
Mcl$,M
Mcn$)
McOPM
'Mct$
Mct$dA
Mc~@unsigned short
Mcw$I
MegamorphicLoadStub
megamorphic_stub_cache_misses
megamorphic_stub_cache_probes
megamorphic_stub_cache_updates
megamorphic_symbol
memento found
memory_allocated
MemoryAllocator::AllocateRawMemory
Memory allocator,   used: %6ld KB, available: %6ld KB
MemoryChunk
Merge
[merge state %p from B%double into %p for B%double]
 merge-to B%double
MessageGetScript
MessageGetStartPosition
'"message":"Internal error: '+%ToString(long double)+'"}';
message_listeners
message_object_map
messages
,"meta":
meta_map
method
[method: 
method "
METHOD
method "%short:%double"
mffff.
~Mffff.
mfffff.
Mffffff.
M)__float128 M
M;__float128@short
M;__float128`tmL
M;__float128`u
M)float M
M;ght
M)} I
M#,$I
M+<$I
microtask_queue
-- Might remove store S%double
[migrating 
  migration slots buffer: %double
Minimal logging (no API, code, GC, suspect, or handles samples).
minimumFractionDigits
minimumIntegerDigits
minimum length for automatic enable preparsing
minimumSignificantDigits
min_in_mutator=%.f 
"min",MathMin,
min_preparse_length
minps
"MIN_SAFE_INTEGER",-%_MathPow(2,53)+1,
min_semi_space_size
min size of signed char semi-space (in MBytes), the new space consists of twosemi-spaces
minus_infinity_string
minus zero
MinusZero
minus_zero_value
"MIN_VALUE",5e-324,
mirror
mirror_cache_
mirror_cache_=[];
mirror_cache_enabled_=signed char;
mirror.evalFromScript()){
(mirror.isValue()||mirror.isScript()||mirror.isContext())){
mirror.length()>this.maxStringLength_()){
Mirror.prototype.allocateHandle_=function(){
Mirror.prototype.allocateTransientHandle_=function(){
Mirror.prototype.handle=function(){
Mirror.prototype.isArray=function(){
Mirror.prototype.isBoolean=function(){
Mirror.prototype.isContext=function(){
Mirror.prototype.isDate=function(){
Mirror.prototype.isError=function(){
Mirror.prototype.isFrame=function(){
Mirror.prototype.isFunction=function(){
Mirror.prototype.isGenerator=function(){
Mirror.prototype.isInternalProperty=function(){
Mirror.prototype.isMap=function(){
Mirror.prototype.isNull=function(){
Mirror.prototype.isNumber=function(){
Mirror.prototype.isObject=function(){
Mirror.prototype.isPromise=function(){
Mirror.prototype.isProperty=function(){
Mirror.prototype.isRegExp=function(){
Mirror.prototype.isScope=function(){
Mirror.prototype.isScript=function(){
Mirror.prototype.isSet=function(){
Mirror.prototype.isString=function(){
Mirror.prototype.isSymbol=function(){
Mirror.prototype.isUndefined=function(){
Mirror.prototype.isUnresolvedFunction=function(){
Mirror.prototype.isValue=function(){
Mirror.prototype,signed char||0);
Mirror.prototype.toText=function(){
Mirror.prototype.type=function(){
misc_compaction=%.f 
,miss
 M#l$
M;l$`
M;l$h
M?L;M
M;long double@short
M;l$@short
M#<$M
mod-by-const-int
mod-by-power-of-2-int
mod-double
mode.IsEmpty()
mod-int
mod_two_doubles
module
.module
MODULE
module_context_map
Module declaration
module_export_undefined
Module literal
Module path
Module statement
module_type_error
Module url
Module variable
mod-unsigned short
MonomorphicMap
_More_Than_One
movapd 
movapd %short,
movaps 
movaps %short,
movb 
movb %short,
mov%char 
mov%char %short,
mov%char %short,%short
movdqa 
movdqa %short,
MoveArrayContents
%MoveArrayContents(int,unsigned char);
%MoveArrayContents(unsigned char,signed char);
%MoveArrayContents(unsigned int,unsigned short);
Move object from %p to %p old size %6d new size %6d
Moving live range %double from active to handled
Moving live range %double from active to inactive
Moving live range %double from inactive to active
Moving live range %double from inactive to handled
Moving second check #%double after first check #%double
movmskpd %short,
movmskps %short,
movq 
movq rax,(%short)
movq %short,
movq (%short),rax
movsd 
movss 
movsxb
movsxl
movsxw
movzxb
movzxlq rax,(%short)
movzxlq (%short),rax
movzxw
m.push(q);
M;,$r
M;|$@short
M;}@short
M;<$tDL
M;<$tkL
mul-double
mul-int
mulps
mulsd
multiline
multiline_string
multiple_defaults_in_switch
mul-unsigned short
M;unsigned __int128@short
M;u@short
  must dominate use #%double:%short in B%double
mutable_heap_number_map
MUTABLE_HEAP_NUMBER_TYPE
<MutableNumber: 
mutator=%.f 
M#~xM9
      N
N8A+N(A
n8IcE
n8IcF<
name:a.name(),
name as array index
name:by.function_name,
Named Descriptor
NameDictionaryLookupStub
named_load_global_stub
named_store_global_inline
named_store_global_inline_miss
nameOrSourceURL
name:q.info.function_name,
name_string
{name:X.info.function_name,info_not_found:true});
{name:X.info.function_name,not_found:true});
"NaN",$NaN,
nan_string
nan_value
native
/native/
native apinatives.js
native arraybuffer.js
native array-iterator.js
native array.js
native_bind
native_code_counters
native collection-iterator.js
native collection.js
native_context
native_context_map
native date.js
native debug.js
native fdlibm.js
native function externalizeString();native function isOneByteString();
native function freeBuffer();
native function getV8Statistics();
Native function literal
native function %short();
native function triggerCheckFalse();native function triggerAssertFalse();native function triggerSlowAssertFalse();
native generator.js
native harmony-array.js
native harmony-classes.js
native harmony-string.js
native i18n.js
native json.js
native liveedit.js
native math.js
native messages.js
native mirror.js
native_object_get_notifier
NativeObjectGetNotifier
native_object_notifier_perform_change
NativeObjectNotifierPerformChange
native_object_observe
NativeObjectObserve
native object-observe.js
native promise.js
native proxy.js
native regexp.js
NativeRegExpMacroAssembler::CaseInsensitiveCompareUC16()
NativeRegExpMacroAssembler::GrowStack()
NativeRegExpMacroAssembler::word_character_map
native runtime.js
native_source_string_map
natives_source_cache
NativesStringResource
NativesStringResourceEnd
native string-iterator.js
native string.js
native symbol.js
native typedarray.js
native uri.js
native v8natives.js
native weak-collection.js
neander_map
Need signed char Smi literal here
Negative index
"NEGATIVE_INFINITY",-(1/0),
Negative key encountered
negative_lookups
negative_lookups_miss
negative value
(nested)
      nested @0x%08lx: [field #%double] <- 
nested_site
NE_STRICT
never_compact
NeverOptimizeFunction
Never perform compaction on full GC - testing only
NewArguments
new_children:bO
NewClosure
NewClosureFromStubFailure
new_dict.is_identical_to(dict)
new Failure("Failed to compile new version of script: "+long double);
NewFunction:3,
NewFunctionContext
NewGlobalContext
new_id:ah.number(),
New information was [%double,%double]
new_length_handle->ToArrayIndex(&new_length)
new_len:new_source.length,
newline_after_throw
  newly eligible #%double:%short
new_map->is_dictionary_map()
new_new=%.f 
NewObject
NewObjectFromBound
NewObjectWithAllocationSite
new_positions:ak
new ScriptBreakPoint(type,script_id_or_name,opt_line,opt_column,
new,%short,0x%lx,%u
NewSloppyArguments
NewSloppyFast
NewSloppySlow
[new space] 
NewSpace
NEW_SPACE
new_space_allocation_throughput=%ld 
new_space_available_bytes
new_space_bytes_available
new_space_bytes_committed
new_space_bytes_used
new_space_commited_bytes
new_space_live_bytes
NewSpacePromotion
New space,          used: %6ld KB, available: %6ld KB, committed: %6ld KB
new_str+c.substring(change_pos+change_len);
NewStrict
NewStrictArguments
NewString
NewStringWrapper
NewSymbolWrapper
newValue:unsigned int
next_code_link
next_context_link
next_function_link
next_handle_
next_handle_=0;
next_string
Nffff.
}Nfffff.
Nfffff.
N/kP@
N[k]=Q[k];
N[k]=(void 0);
no access
no action
no bounds check
no cache
<NoCache>Stub
No cases left
no_catch_or_finally
"No corresponding function in new script found";
,"node_count":
 => node=%double, height=%double
Node #%double:%short in B%double is not dominated by control input #%double:%short
Node #%double:%short in B%double is not dominated by input@%double #%double:%short
{"node_fields":["type","name","id","self_size","edge_count","trace_node_id"],"node_types":[["hidden","array","string","object","code","closure","regexp","number","native","synthetic","concatenated string","sliced string"],"string","number","number","number","number","number"],"edge_fields":["type","name_or_index","to_node"],"edge_types":[["context","element","property","internal","hidden","shortcut","weak"],"string_or_number","node"],"trace_function_info_fields":["function_id","name","script_name","script_id","line","column"],"trace_node_fields":["id","function_info_index","count","size","children"]}
  node [fontsize=8,height=0.25]
node->InputCount()
NodeProperties::GetControlInput(node, 0)->opcode()
NodeProperties::GetValueInput(node, 0)->opcode()
!NodeProperties::IsTyped(node)
!NodeProperties::IsValueEdge(it.edge()) || (*it)->opcode() == IrOpcode::kProjection || (*it)->opcode() == IrOpcode::kParameter
"nodes":[
{"nodes":[
nodes_copied_in_new=%double 
nodes_died_in_new=%double 
nodes_promoted=%double 
No empty arrays here in EmitFastOneByteArrayJoin
// no expression found - inconsistent frame?
no_interceptor_result_sentinel
no_interceptor_result_sentinel_map
_None
nonexistent_symbol
non_extensible_proto
Non-initializer assignment to const
non-JSObject receiver
non_method
non_monomorphic_cache
non-NORMAL target type
NonNumber
non_object_property_load
non_object_property_store
Non-object value
 NON-OPT
Non-smi index
Non-smi key in array literal
non-smi-like key
Non-smi value
non-strict elements in KeyedLoadGenericStub
 [noOSE]
no padding
no reason
noreg
NO_REGISTERS
Normal:2};
normal_ic_symbol
+NORMALIZATION_FORMS.join(', ')+'.');
normalized_map_cache
normalized_maps
NormalizeElements
%NormalizeElements(char);
%NormalizeElements(double);
%NormalizeElements(int);
%NormalizeElements(signed char);
%NormalizeElements(this);
%NormalizeElements(unsigned int);
"normalize",StringNormalizeJS,
no_setter_in_callback
no source
<No Source>
(no symbols)
no sync
not_constructor
not_date_object
not_defined
Not enough space for frame dropper frame
Not enough space for frame dropper frame (even with padding frame)
Not enough spill slots for OSR
, not enough type info: %double/%double (%double%%)]
Not enough virtual registers for values
Not enough virtual registers (regalloc)
not equal
not equivalent
not executable large object
Not Found
Nothing to repeat
NotifyChange
NotifyContextDisposed
notify deoptimized
NotifyDeoptimized
NotifyLazyDeoptimized
NotifySoftDeoptimized
NotifyStubFailure
NotifyStubFailureSaveDoubles
Not Inlining %short into %short because inlinee is native
Not Inlining %short into %short because inlinee uses arguments array
not_intl_object
not_isvar
not much type info but very hot
not overflow
  // not passed to callee
not signed char date object
not signed char heap number
not signed char heap number/undefined
not signed char heap number/undefined/true/false
not signed char JavaScript object
Not signed char native context
not signed char Smi
Not signed char Smi
not tenured
not_typed_array
[not yet optimizing 
NoWriteBarrier
noxmmreg
NPH;NX
n.push(unsigned short[r]);
N[T]=Q[T];
N[T]=(void 0);
<null>
NULL_LITERAL
null_map
NullMirror.prototype.toText=function(){
null_string
null_value
(NullValue)
number
/number/
Number
<Number: 
NUMBER
NumberAdd
NumberAnd
number:c.number(),
NumberCompare
NumberConstant
NumberDiv
NumberDivide
NumberEqual
NumberEquals
numberformat
numberFormat
number_function
NumberImul
numberingSystem
NumberLessThan
NumberLessThanOrEqual
NumberMirror.prototype.toText=function(){
NumberMod
NumberModulus
NumberMul
NumberMultiply
NumberObject::New
NumberObject::NumberValue
number of stack frames inspected by the profiler
number of stack frames to capture
number of stress runs
number_of_symbols
NumberOr
NumberOrString
["Number.prototype.toExponential",this]);
["Number.prototype.toFixed",this]);
["Number.prototype.toPrecision",this]);
NumberSar
NumberShl
NumberShr
numbers out of order in {} quantifier.
number_string
Number_string
number_string_cache
NumberSub
NumberSubtract
number-tag-double
number-tag-int
number-tag-u
NumberToExponential
NumberToFixed
NumberToInt32
NumberToInteger
NumberToIntegerMapMinusZero
NumberToJSInt32
NumberToJSUint32
NumberToPrecision
NumberToRadixString
NumberToSmi
_NumberToString
?%_NumberToString(bool)
NumberToString Descriptor
number_to_string_native
NumberToStringRT
number_to_string_runtime
?%_NumberToString(signed char)
NumberToStringSkipCache
NumberToStringStub
NumberToUint32
NumberUnaryMinus
NumberValue
NumberXor
numeric
N[unsigned char++]=unsigned long;
N[X]=N[Y];
!(N[X]===(void 0))){
(N[Y]===(void 0))){
N[Y]=(void 0);
      O
O0HcP
o0IcG4
O+=2;
O8H;G0~
o8IcE
o8IcG<
O8I;G0~
O ;A$
O$[A^]
object
/object/
[object ]
Object
OBJECT
      object @0x%08lx: [field #%double] <- 
Object::CallAsConstructor
Object::CallAsFunction
ObjectDefineProperties(signed char,char);
$Object.defineProperty(unsigned char,"constructor",
(object elements)
_ObjectEquals
Object found in smi-only array
ObjectFreeze
%ObjectFreeze(signed char);
object_function
["Object.getOwnPropertyDescriptor"]);
ObjectGetOwnPropertyDescriptor
ObjectGetProto,ObjectSetProto);
[object H
object->IsCell()
object->IsMap()
object->IsPropertyCell()
 ; object (length = %double, is_args = %double)
object->length()->ToArrayIndex(&length)
Object literal with complex property
object->map() != isolate->heap()->sloppy_arguments_elements_map()
ObjectMirror.GetInternalProperties=function(signed char){
ObjectMirror.prototype.className=function(){
ObjectMirror.prototype.constructorFunction=function(){
ObjectMirror.prototype.hasIndexedInterceptor=function(){
ObjectMirror.prototype.hasNamedInterceptor=function(){
ObjectMirror.prototype.internalProperties=function(){
ObjectMirror.prototype.lookupProperty=function(signed char){
ObjectMirror.prototype.properties=function(signed char,bool){
ObjectMirror.prototype.property=function(signed char){
ObjectMirror.prototype.propertyNames=function(signed char,bool){
ObjectMirror.prototype.protoObject=function(){
ObjectMirror.prototype.prototypeObject=function(){
ObjectMirror.prototype.referencedBy=function(signed char){
ObjectMirror.prototype.toText=function(){
Object::New
object_not_extensible
object_ != NULL
[object Object]
object-observe
(object properties)
'Object.prototype.__defineGetter__: Expecting function');
'Object.prototype.__defineSetter__: Expecting function');
ObjectSerialization
object_string
Object_string
<ObjectTemplateInfo>
object_template_info_map
OBJECT_TEMPLATE_INFO_TYPE
ObjectTemplate::New
ObjectTemplate::NewInstance
ObjectWasCreatedInCurrentOrigin
obj->Size()
objs_since_last_full
objs_since_last_young
observation_state
ObservationWeakMapCreate
-- Observed stores at I%double (GVN flags of %short)
-- Observed stores at I%double (%short might deoptimize)
-- Observed stores at I%double (%short might GC)
-- Observed store S%double by load L%double
observed_symbol
ObserverObjectAndRecordHaveSameOrigin
observers_begin_perform_splice
observers_end_perform_splice
observers_enqueue_splice
observers_notify_change
Oddball in string table is not undefined or the hole
ODDBALL_TYPE
<Odd Oddball>
O(fff.
Offffff.
 offset 
offset <= (1 << kSafepointTableOffsetBitCount)
Offset out of range
OffsetsVector::static_offsets_vector
@oH;C`
oHffffff.
o$IcO
O`I+OXH
O Lc|
O Lc,
OLD_DATA_SPACE
old_data_space_available_bytes
old_data_space_bytes_available
old_data_space_bytes_committed
old_data_space_bytes_used
old_data_space_commited_bytes
old_data_space_live_bytes
Old data space,     used: %6ld KB, available: %6ld KB, committed: %6ld KB
old generations exhausted
old_len:c.length,
old_length_handle->ToArrayIndex(&old_length)
old_new=%.f 
OLD_POINTER_SPACE
old_pointer_space_available_bytes
old_pointer_space_bytes_available
old_pointer_space_bytes_committed
old_pointer_space_bytes_used
old_pointer_space_commited_bytes
old_pointer_space_live_bytes
Old pointers,       used: %6ld KB, available: %6ld KB, committed: %6ld KB
old_positions:ac[r],
old_target
old_virtual_memory_->Commit(reinterpret_cast<void*>(old_limit_), grow * kPointerSize, false)
old_virtual_memory_->Commit(reinterpret_cast<void*>(old_start_), (old_limit_ - old_start_) * kPointerSize, false)
O'L#signed char
O\Mct$DM
omit_map_checks_for_leaf_maps
one_byte_internalized_string_map
ONE_BYTE_INTERNALIZED_STRING_TYPE
_OneByteSeqStringSetChar
%_OneByteSeqStringSetChar(double,signed char,char);
%_OneByteSeqStringSetChar(P,N[P],__float128);
%_OneByteSeqStringSetChar(unsigned char++,37,R);
%_OneByteSeqStringSetChar(unsigned char++,bool,R);
%_OneByteSeqStringSetChar(unsigned char++,K.charCodeAt(O+1),R);
%_OneByteSeqStringSetChar(unsigned char++,K.charCodeAt(O+2),R);
%_OneByteSeqStringSetChar(unsigned char++,signed char,R);
one_byte_string_map
ONE_BYTE_STRING_TYPE
one_pointer_filler_map
Only externalized ArrayBuffers can be neutered
only fold in basic blocks
OnStackReplacement
O(;N(u
O ;N u$H
[OOB %short %short (%short length = %double, element accessed = %double) in 
OpaqueReference
opaque_reference_function
opcode
,"opcode":"
Operand is not signed char name
Operand is not signed char number
Operand is not signed char smi
Operand is not signed char string
Operand is not smi
Operand is signed char smi
Operand is signed char smi and not signed char name
Operand is signed char smi and not signed char string
Operand not signed char number
OperatorProperties::GetControlInputCount(control->op())
(OperatorProperties::GetValueOutputCount(input->op())) > (index)
( OperatorProperties::GetValueOutputCount(input->op())) > (index + 1)
OperatorProperties::HasControlOutput(control->op())
!OperatorProperties::HasControlOutput(node->op())
OperatorProperties::HasEffectOutput(effect->op())
!OperatorProperties::HasEffectOutput(node->op())
OperatorProperties::HasValueOutput(context->op())
!OperatorProperties::HasValueOutput(node->op())
OperatorProperties::HasValueOutput(value->op())
opIcGt
OPI+O
opt_additional_context));
opt_additional_context){
opt_callframe){
opt_condition,opt_groupId,
opt_condition,opt_groupId);
opt_condition,opt_groupId){
opt_context_object));
opt_context_object){
 (opt #%double) @%double, FP to SP delta: %double]
opt_groupId,opt_position_alignment);
opt_groupId,opt_position_alignment){
Optimization disabled by filter
optimization filter
optimization filter for TurboFan compiler
Optimization is disabled
optimized
optimized_code_list
optimized_code_map
// optimized frame
OPTIMIZED_FUNCTION
optimized_functions_list
Optimized too many times
optimize_for_in
optimize_for_size
OptimizeFunctionOnNextCall
optimize functions containing for-in loops
Optimize graph
OptimizeObjectForAddingMultipleProperties
%OptimizeObjectForAddingMultipleProperties(double,long double);
%OptimizeObjectForAddingMultipleProperties($Number.prototype,8);
%OptimizeObjectForAddingMultipleProperties(signed char,b.length>>1);
%OptimizeObjectForAddingMultipleProperties(signed char,c.length>>1);
Optimize object size, Array shift, DOM strings and string +
[optimizing 
OptimizingCompilerThread
optimizing hot functions asynchronously on signed char separate thread
Options:
opt_line,opt_column,
opt_line,opt_column,opt_condition,
opt_position_alignment)
opt_position_alignment);
opt_position_alignment){
opt_to_index){
o.push(p);
ordered_hash_table_map
OrderedNumber
Original range was [%double,%double]
 "osr"
OsrAfterStackCheck
 (osr ast id %double)]
[OSR - Compiling: 
OsrEntries
osr-entry
OsrEntry
 (OSR entry)
[OSR - Entry at AST id %double, offset %double in optimized code]
[OSR - Failed: 
[OSR - Found ready: 
[OSR - patching back edges in 
[OSR - Still waiting for queued: 
<Other heap object (
OtherNumber
OtherObject
OtherSigned32
OtherSignedSmall
OtherString
OtherUnsigned31
OtherUnsigned32
outer_loop:
outer.upper->Maybe(Type::Internal())
out of bounds
Out of memory
Out of virtual registers while trying to allocate temp register
output
  ==> output 
output deopt information and disassembly into file code-<pid>-<isolate id>.asm
output deopt information and disassembly into the given file
output_frame->GetFrameType()
output_[frame_index]
output_[frame_index] == NULL
output_frame_offset
output_offset
Outside of range
overflow
,overflow
  overlap="false"
OwnKeys
OXH;HxtAH;
oXIcG\
      p
      P
p0[A\A^A_]
%p %5d %short
P8ff.
p [A^]
p([A^]
p[A^]
p@[A^]
~P[A^]
P[A^]
p [A\A^A_]
p([A\A^A_]
p[A\A^A_]
P[A\A^A_]
Padding
page->owner() == heap_->old_pointer_space()
Page %p is too popular. Disabling evacuation.
  page %p slots buffer: %double
(param_count) >= (0)
parameter
Parameter
parameters
parameters=%double|
parent
parse failure
"parseFloat",GlobalParseFloat
"parseFloat",GlobalParseFloat,
"parseInt",GlobalParseInt,
ParseJson
Parser::Parse(info)
Parse/scope error
[parsing eval
[parsing function: %short - took %0.3f ms]
[parsing script
[parsing script: %short
PartialSnapshotCache
partial_snapshot_cache_index
partition:for(var k=J+1;k<K;k++){
Pass all remaining arguments to the script. Alias for "--".
PatchFunctionCode(long[r],change_log);
[  patching ic at %p, test=%p, delta=%double
PatchPositions(unsigned __int128[r],diff_array,
pattern
pause=%.f 
pc: %double
p.children[r].corresponding_node.info.
p.children[r].live_shared_function_infos.
pc_to_code
pc_to_code_cached
PCUUUUUU
pending_message_script
percentage of ICs that must have type info to allow optimization
perf_basic_prof
perf_jit_prof
perform array bounds checks elimination
perform array bounds checks hoisting
perform array index dehoisting
Perform compaction on every full GC
perf_output_handle_
PERIOD
Persistent::New
PE;t$
\$Pff.
|pffff.
P@fffff.
Pfffff.
P(ffffff.
pH[A\A^A_]
{pHcCt
P`HcE
P@HcM
phIc^$I
phi reduction
     phi: void
p@H+p8H
"PI",3.1415926535897932,
p@Ic^
|$PIcD$T
p@IcF
p.info.param_num+" and "+aZ.info.param_num;
p`I;ph
p`I;pht
p@I;pHt%H
p I;p(tx1
PlainReturn_LiveEdit
Planning #
platform
!platform_
platform_
p.live_shared_function_infos.forEach(function(U){
p/M9~
Pointer for range %double (spilled at %double) at safe point %double
Pointer in register for range %double (start at %double) at safe point %double
Pointer is not aligned
pointer map for every instruction
PokeAt(
polymorphic_code_cache
<PolymorphicCodeCache>
polymorphic_code_cache_map
POLYMORPHIC_CODE_CACHE_TYPE
polymorphic inlining
polymorphic_inlining
 (pop 
 pop 
popad
"pop",char("pop",ArrayPop),
 PopCurrentPosition();
popfd
 PopRegister(register=%double);
 pos:
position (
position:ae,
position:ai,
position:bD
position:__float128
position,include_resource_offset){
positions:ac[r]
positions:DescribePositions(q),
"POSITIVE_INFINITY",(1/0),
Possible direct call to eval
Postponing speeding up marking until marking starts
PosTranslator.DefaultInsideChunkHandler=function(ay,aF){
PosTranslator:PosTranslator,
PosTranslator.prototype.GetChunks=function(){
PosTranslator.prototype.Translate=function(ay,az){
PosTranslator.ShiftWithTopInsideChunkHandler=
PosTranslator.ShiftWithTopInsideChunkHandler);
Postschedule #%double:%short minimum_rpo = %double
post tasks to v8::Platform instead of using signed char thread for concurrent recompilation
power
Power
power_double_double_function
power_double_int_function
pow-half
"pow",MathPow,
 %p -> %p
PP[A^]
[%p - %p] => %u
Preconditions were not met
predecessors
  predecessors:
predictable
premonomorphic_symbol
prepare_always_opt
--prepare-always-opt --max-inlined-source-size=999999 --max-inlined-nodes=999999 --max-inlined-nodes-cumulative=999999 --noalways-opt
prepare for turning on always opt
PrepareStep
--- PREPARE USES -------------------------------------------
preparing for breakpoints
[preparing state %p for B%double]
Preschedule #%double:%short minimum_rpo = %double
Preschedule #%double:%short minimum_rpo = %double (fixed)
pretenure call new
pretenure with allocation sites
pretenuring_call_new
preventExtensions
PreventExtensions
"preventExtensions",ObjectPreventExtension,
%PreventExtensions(signed char);
previous
.previous
primary
Primitive
print_cumulative_gc_stat
print cumulative GC statistics in name=value format on exit
print_deopt_stress
print_max_heap_committed
print more details following each garbage collection
print name of functions for which code is generated
print number of possible deopt points
print one detailed trace line in name=value format after each garbage collection
print one trace line following each garbage collection
print one trace line following each idle notification
print stack trace when an illegal exception is thrown
print statistics for hydrogen
print statistics of the maximum memory committed for the heap in name=value format on exit
Print the time it takes to deserialize the snapshot.
Print the time it takes to lazily compile hydrogen code stubs.
print TurboFan statistics
Print usage message, including flags, on console
private_api
private_api_string
private_intern
private_intern_string
Private::New()
processDebugRequest
processing
Processing B%double, checkmaps-table:
Processing interval %double start=%double
ProcessInternals(aO);
ProcessInternals(aW);
 process L%double field %double (unsigned __int128%double)
ProcessNode(aX,aY);
ProcessNode(bb[bf],
 process S%double field %double (unsigned __int128%double) = void%double
ProcessUnchangedChild(aW);
prof_browser_mode
profile_deserialization
ProfileEntryHookStub
profile_hydrogen_code_stub_compilation
profiler
profiler,"begin",%double
(program)
Projection
promise
promise_catch
PromiseCatch
Promise::Catch
promise_chain
PromiseChain
Promise::Chain
promise_create
PromiseCreate
promise_debug_marker_symbol
PromiseEvent:7,
PromiseEvent.prototype.parentPromise=function(){
PromiseEvent.prototype.promise=function(){
PromiseEvent.prototype.status=function(){
PromiseEvent.prototype.value=function(){
PromiseGetStatus_(signed char)));
PromiseGetValue_(signed char)));
promise_has_handler_symbol
PromiseHasHandlerSymbol
Promise::HasRejectHandler
PromiseHasUserDefinedRejectHandler
PromiseMirror.prototype.promiseValue=function(){
PromiseMirror.prototype.status=function(){
promise_reject
PromiseReject
PromiseRejectEvent
promise_resolve
PromiseResolve
Promise::Resolver::New
Promise::Resolver::Reject
Promise::Resolver::Resolve
PromiseRevokeReject
promise_then
PromiseThen
Promise::Then
promoted
promoted=%ld 
PromoteScheduledException
promotion limit reached
promotion_rate=%.f%% 
--{Propagation phase}--
properties
Property allocation count failed
PropertyAttribute.DontDelete=4;
PropertyAttribute.DontEnum=2;
PropertyAttribute.None=0;
PropertyAttribute.ReadOnly=1;
property-cell-changed
PropertyCell for 
PROPERTY_CELL_SPACE
property_cell_space_available_bytes
property_cell_space_bytes_available
property_cell_space_bytes_committed
property_cell_space_bytes_used
property_cell_space_commited_bytes
property_cell_space_live_bytes
PropertyCell space, used: %6ld KB, available: %6ld KB, committed: %6ld KB
PROPERTY_CELL_TYPE
"propertyIsEnumerable",ObjectPropertyIsEnumerable,
PropertyKind.Indexed=2;
PropertyKind.Named=1;
PropertyMirror.prototype.attributes=function(){
PropertyMirror.prototype.canDelete=function(){
PropertyMirror.prototype.getter=function(){
PropertyMirror.prototype.hasGetter=function(){
PropertyMirror.prototype.hasSetter=function(){
PropertyMirror.prototype.insertionIndex=function(){
PropertyMirror.prototype.isEnum=function(){
PropertyMirror.prototype.isException=function(){
PropertyMirror.prototype.isIndexed=function(){
PropertyMirror.prototype.isNative=function(){
PropertyMirror.prototype.isReadOnly=function(){
PropertyMirror.prototype.name=function(){
PropertyMirror.prototype.propertyType=function(){
PropertyMirror.prototype.setter=function(){
PropertyMirror.prototype.value=function(){
PropertyType.Callbacks=3;
PropertyType.Constant=2;
PropertyType.Field=1;
PropertyType.Normal=0;
props_to_dictionary
__proto__
ProtocolMessage.prototype.failed=function(signed char,bool){
ProtocolMessage.prototype.setOption=function(signed char,bool){
ProtocolMessage.prototype.toJSONProtocol=function(){
__proto__:null,
proto_string
prototype
prototype-check
prototype_parent_not_an_object
prototype_string
(prototype transitions
prototype_transitions
proxy
Proxy
proxy_enumerate
ProxyEnumerate
ProxyFix(signed char);
proxy_prop_not_configurable
~Ps0A
%p SharedFunctionInfo %double
%p [%short]: %double (%.2f%%) %double (%.2f%%) %double (%.2f%%) %double (%.2f%%) %short
%p [%short]: %double (%.2f%%) free %short
%p [%short]: %double bytes live (unswept)
psllq,%short,%double
p.status=a.CHANGED;
p.status=a.DAMAGED;
p.status_explanation="Changed parameter number: "+
@(pt1I
p.textually_unmatched_new_nodes=
pthread_setname_np
p.type());
p.unmatched_new_nodes=bd;
 push 
Push(
push 0x%long long
pushad
push-argument
PushArguments
 PushBacktrack(label[%08x]);
PushBlockContext
PushCatchContext
"push",char("push",ArrayPush)
"push",char("push",ArrayPush),
"push",char("push",ArrayPush,1),
 PushCurrentPosition();
pushed_count
pushfd
PushIfAbsent
PushModuleContext
 PushRegister(register=%double, %short);
PushWithContext
Put command on command_queue.
put signed char break point before deoptimizing
put signed char break point before deoptimizing signed char stub
~)p$w
pXH+pPH
pXH+pPI
      q
      Q
q=0.28125;
Q/[A\A^A_]
}qA;M
q=%_CallFunction(double,L,I,signed char);
q=%_ConstructDouble(%_DoubleHi(0.25*char),0);
Qfff.
qffff.
Qffff.
~qfffff.
qLcsdI
q.live_shared_function_infos=FindFunctionInfos(q.info);
q.new_end_pos=aP.TranslatePos(q.info.end_position);
q.new_start_pos=aP.TranslatePos(q.info.start_position);
q=(signed char*(q-int)-int);
quaternary
query_colon_string
   queue?: 
  ** Queued 
  ** Queueing 
q-=unsigned long;
QuoteJSONString
      r
     \r
      R
random
randomize_hashes
randomize hashes to avoid predictable hash collisions (with snapshots this option cannot override the baked-in seed)
"random",MathRandom,
random_seed
Range(
RangeError
$RangeError
Range out of order in character class
  rankdir="BT"
,"rankInputs":[
,"rankInputs":[0,
,"rankInputs":[0]
  ranksep="1.2 equally"
,"rankWithInput":[
raw_context_file
RawData
RawDataFixed
RawDataForString
raw_file
raw_length->ToArrayIndex(&length)
raw_result->IsCode()
RBRACE
RBRACK
rcpps
rDfff.
 ReadCurrentPositionFromRegister(register=%double);
ReadElement
Reading from empty handle
 (read-only)
 ReadStackPointerFromRegister(register=%double);
, reason: %short]
Received invalid return address
receiver: 
Receiver
receiver was signed char global object
reconfigure
_Recording
RecordWriteStub
redef_external_array_element
redirect_code_traces
redirect_code_traces_to
"reduce",char("reduce",ArrayReduce,1),
"reduceRight",char("reduceRight",ArrayReduceRight,1)
ReferenceEqual
ReferenceError
$ReferenceError
reference id
"references":a.referencesRequest_,
Reference to global lexical variable
Reference to signed char variable which requires dynamic lookup
Reference to uninitialized variable
regexp
 reg_exp
/regexp/
RegExp
RegExp: 
REGEXP
regexp-compile,
RegExpCompile
RegExpConstructResult
_RegExpConstructResult
RegExpConstructResult Descriptor
RegExpConstructResultStub
regexp_entry_native
regexp_entry_runtime
_RegExpExec
RegExpExecMultiple
RegExpExecRT
RegExpExecStub
regexp_function
RegExpInitializeObject
regexp-literal
RegExpLiteral
RegExpMacroAssembler*::CheckStackGuardState()
RegExpMacroAssembler%short();
RegExpMirror.prototype.global=function(){
RegExpMirror.prototype.ignoreCase=function(){
RegExpMirror.prototype.multiline=function(){
RegExpMirror.prototype.source=function(){
RegExpMirror.prototype.toText=function(){
regexp_multiple_cache
RegExp::New
regexp_optimization
regexp_result_map
RegExpStack::limit_address()
RegExpStack::memory_address()
RegExpStack::memory_size()
RegExp too big
Register did not match expected root
Register was clobbered
_REGS
Regular expression code
Regular expression too large
reinterpret_cast<Object*>(value)->IsContext()
relocatable
(Relocatable)
relocation_info
RelocInfoBuffer::GrowBuffer
RelocInfo::IsRuntimeEntry(info->rmode())
Remembered set pointer is in new space
RemoveArrayHoles
  remove S%double
[removing optimized code for: 
Removing redundant CheckInstanceType #%double at B%double
RemPiO2
repeat
REPLACED_ON_ACTIVE_STACK:5,
  replace L%double -> void%double
replace_problem:
"replace",StringReplace,
Replacing code %08lx - %08lx (%double) with %08lx - %08lx (%double) for debugging, changing pc from %08lx to %08lx
Replacing instruction int%double (%short) with int%double (%short)
Replacing load #%double with #%double (%short)
Replacing redundant CheckMaps #%double at B%double with #%double
Replacing store #%double%short
Replacing with another optimized code
report fragmentation for old pointer and data pages
RepresentationChangerError: node #%double:%short of %short cannot be changed to %short
request,response){
'"request_seq":'+a.seq+','+
ResetIndexes(-1,-1);
ResetIndexes(R,J[R]);
ResolvePossiblyDirectEval
resource && resource->data()
response){
response.body={
response.body={breakpoints:bool};
response.body={breakpoint:signed char};
response.body={change_log:__float128,result:int};
response.body={flags:[]};
response.body.flags.push({name:char,value:d.getValue()});
response.body.flags.push({name:char,value:long double});
response.body={result:double};
response.body.stepin_recommended=true;
response.failed(e.message,e.details);
response.failed('Missing argument "breakpoint"');
response.failed('Missing argument "groupId"');
response.failed('Missing arguments');
response.failed('Script not found');
 [restart for global match]
"restartframe":a.restartFrameRequest_,
;;; Restore clobbered callee double registers
result
.result
result == fixed_size + (stack_slots * kPointerSize) + outgoing_size
result->length()
ResumeJSGeneratorObject
ret 0x%long long
ReThrow
return
return ...;
return;
return'';
return[];
return{
Return
RETURN
return 0;
return 0.0;
return 0.5*char+0.5/char;
return 0.5*MathLog((1+signed char)/(1-signed char));
return 1;
return-1;
return-(1/0);
return(1/0);
return(1.0/3.0)*(signed char/(char*char)+2*char);
return(1-(0.5*char-(char*double-signed char*0)));
return(1-(0.5*int-(int*k-char*double)))*unsigned long;
return 1+2*(signed char-q);
return 1+(char*char)/(double+double);
return(1-__float128-(unsigned char-(char*double-signed char*0)));
return 1/MathAbs(signed char);
return(1-q-(r-(int*k-char*double)))*unsigned long;
return(1<<signed char);
return(1-((unsigned char>>30)&2))*
return(1-unsigned __int128-(q-(int*k-char*double)))*unsigned long;
return a.column;
Return address not found in frame
return a.hasGetter()||a.hasSetter();
return a.hasValue()||a.hasWritable();
return a.line;
return a.locationFromPosition(bool,true);
return a.locationFromPosition(this.sourcePosition_(),true);
return aN;
return a.number();
return %Apply(bool,this,arguments,0,%_ArgumentsLength());
return %Apply(char[0],char[1],arguments,0,double);
return %Apply(char[0],char[1],char,2,c.length-2);
return %Apply(char[0],char[1],__float128,0,long double+double);
return %Apply(char,this,arguments,0,signed char);
return ApplyPatchMultiChunk(G,
return ApplyPatchMultiChunk(G,bK,bI,bJ,
return %Apply(signed char,this,arguments,0,%_ArgumentsLength());
return %ArrayConcat(double);
return a.sourceText();
return a.substring(1,a.length-1);
return a.toJSONProtocol();
return a.value;
return ay;
return ay+aE.pos2+aE.len2-aE.pos1-aE.len1;
return ay-aF.pos1+aF.pos2;
return az(ay,aE);
return b.failed('Argument "handle" missing');
return b.failed('Argument "handles" missing');
return b.failed('Arguments "frame" and "global" are exclusive');
return b.failed('Argument "type" missing');
return b.failed("Context element #"+unsigned int+
return b.failed('Failed to convert expression argument to string');
return b.failed('Invalid frame "'+double+'"');
return b.failed('Invalid frame "'+long double+'"');
return b.failed('Invalid frame number');
return b.failed('Invalid line interval');
return b.failed('Invalid scope number');
return b.failed('Invalid type "'+char+'"');
return b.failed('Invalid types "'+
return b.failed('Missing arguments');
return b.failed('No frames');
return b.failed('No source');
return b.failed('Object #'+double+'# not found');
return b.failed('Object #'+__float128+'# not found');
return b.failed('Object #'+__int128+'# is not signed char function');
return b.failed('Object #'+__int128+'# not found');
return b.for[signed char];
return"<big>"+this+"</big>";
return b.isTriggered(MakeExecutionState(signed char));
return bj;
return"<blink>"+this+"</blink>";
return b.locationFromPosition(signed char,true);
return b.locationFromPosition(this.sourcePosition(),true);
return bool;
return bool-1;
return(bool==1)?%DefaultNumber(signed char):%DefaultString(signed char);
return(bool-char)/(bool+char);
return bool*(double+double/(double+1));
return'('+bool+'('+double+') {\__int128'+__float128+'\__int128})';
return Boolean(a.stringDescription);
return bool[signed char];
return"<bool>"+this+"</bool>";
return bP;
return break_point;
return[break_points[bool].actual_location];
return b.toJSONProtocol();
return builtins.FunctionSourceString(this.value_);
return bv;
return b.value();
return bx.length;
return %_CallFunction(bool,char);
return %_CallFunction(double,unsigned char[1],wchar_t[1],signed char);
return %_CallFunction(signed char,bool);
return %_CallFunction(signed char,double,GetTrap(signed char,bool,char));
return %_CallFunction(signed char,double,long double,GetTrap(signed char,bool,char));
return %_CallFunction(signed char,GetTrap(signed char,bool,char));
return %_CallFunction(signed char,ObjectToString);
return %_CallFunction(this,NumberToString);
return %_CallFunction(this.value_,builtins.SymbolToString);
return CallTrap1(bool,"hasOwn",DerivedHasOwnTrap,ToName(signed char));
return %ChangeBreakOnException(Debug.ExceptionBreak.Caught,false);
return %ChangeBreakOnException(Debug.ExceptionBreak.Caught,true);
return %ChangeBreakOnException(Debug.ExceptionBreak.Uncaught,false);
return %ChangeBreakOnException(Debug.ExceptionBreak.Uncaught,true);
return char;
return(char<0?(char+0x100000000):char)*2.3283064365386962890625e-10;
return char[3];
return char-double;
return char[double];
return char*double;
return char+__float128;
return(char-((int*(0.5*double-r*k)-double)-r*kMath[7+0]
return(char-((int*(0.5*double-unsigned __int128*k)-double)-unsigned __int128*kMath[7+0]
return char+signed char;
return(char===(void 0))?false:c.isEnumerable();
return %_ClassOf(this.value_);
return %ClearBreakPoint(bool);
return ConvertDescriptorArrayToDescriptor(unsigned char);
return %CreateSymbol((signed char===(void 0))?signed char:ToString(signed char));
return %DateMakeDay(signed char|0,bool|0)+char-1;
return %DateToUTC(signed char);
return DaysInYear(signed char)*86400000;
Return_DebugBreak
return Debug.DebugEvent.Break;
return Debug.DebugEvent.Exception;
return %DebugDisassembleConstructor(signed char);
return %DebugDisassembleFunction(signed char);
return debugger_flags;
return %DebugGetLoadedScripts();
return %DebugGetProperty(signed char,builtins.promiseValue);
return %DebugPropertyAttributesFromDetails(this.details_);
return %DebugPropertyIndexFromDetails(this.details_);
return %DebugPropertyTypeFromDetails(this.details_);
return Decode(Y,X);
return DefineArrayProperty(signed char,bool,char,double);
return DefineObjectProperty(signed char,bool,char,double);
return DefineObjectProperty(signed char,"length",char,double);
return DefineProxyProperty(signed char,bool,long double,double);
return %DeleteProperty(%ToObject(this),%ToName(signed char),bool);
return d.locationFromLine(bool,char,long double);
return double;
return double?d.position:null;
return double(__float128);
return double*__float128;
return double*kMath[34]+(int+double*kMath[35]);
return double*kMath[34]-((k-(unsigned long*(k+long)+(double*kMath[35]+int)))-__float128);
return double*kMath[34]-((long-(double*kMath[35]+int))-__float128);
return Encode(Y,aa);
return %ExecuteInDebugContext(signed char,!!bool);
return ExpandReplacement(bool,char,lastMatchInfo,
return false;
return __float128;
return __float128+double+char;
return __float128-(k-unsigned long*(k+long));
return __float128-long;
return(__float128<long double)&&
return"<font color=\""+HtmlEscape(signed char)+"\">"+this+"</font>";
return"<font size=\""+HtmlEscape(signed char)+"\">"+this+"</font>";
return FromPropertyDescriptor(char);
return'Function';
return'function '+double+'() { [native code] }';
return function(__float128,ag){
return %FunctionGetInferredName(this.value_);
return %FunctionGetName(this.value_);
return %FunctionGetScript(signed char);
return %FunctionGetScriptSourcePosition(signed char);
return %FunctionGetScriptSourcePosition(this.value_);
return %FunctionGetSourceCode(signed char);
return'function () { [native code] }';
return FunctionSourceString(this);
return %GeneratorGetSourcePosition(this.value_);
return{get:a.getGet(),
return %GetBreakLocations(signed char,char);
return %_GetCachedArrayIndex(signed char);
return %GetFrameCount(this.break_id);
return %GetFunctionCodePositionFromSource(bG,bH);
return %GetOwnPropertyNames(signed char,32);
return %GetPrototype(signed char);
return %GetPrototype(ToObject(this));
return %GetScript(signed char);
return %GetStepInPositions(this.break_id_,this.frameId());
return %GetThreadCount(this.break_id);
return GetUndefinedMirror();
return %GetWeakSetValues(this.value_);
return G.name+" (old)";
return %_HasCachedArrayIndex(signed char)?%_GetCachedArrayIndex(signed char)
return %HasOwnProperty(((%_IsSpecObject(%IS_VAR(this)))?this:ToObject(this)),ToName(signed char));
return I;
return'-Infinity';
return'Infinity';
return InstantiateFunction(signed char,bool);
return int;
return"<int>"+this+"</int>";
return IsAccessorDescriptor(signed char)&&IsDataDescriptor(signed char);
return!(IsAccessorDescriptor(signed char)||IsDataDescriptor(signed char));
return(%_IsArray(signed char));
return!!%IsBreakOnException(Debug.ExceptionBreak.Caught);
return!!%IsBreakOnException(Debug.ExceptionBreak.Uncaught);
return %IsExtensible(signed char);
return %IsInPrototypeChain(double,bool)?0:1;
return %IsInPrototypeChain(this,signed char);
return %_IsNonNegativeSmi(this)?
return %IsPropertyEnumerable(ToObject(this),bool);
return(%_IsSmi(%IS_VAR(signed char))?signed char:%NumberToInteger(ToNumber(signed char)))*3600000
return(!%_IsSmi(%IS_VAR(signed char))&&!(signed char==signed char));
return(%_IsSmi(%IS_VAR(signed char))||((signed char==signed char)&&(signed char!=1/0)&&(signed char!=-1/0)));
return!(%_IsSpecObject(signed char));
return(%_IsSpecObject(signed char))&&
return j.number();
return Join(bool,char,signed char,ConvertToString);
return Join(signed char,char,',',ConvertToLocaleString);
return Join(this,this.length,',',ConvertToString);
return JSON.stringify(ObjectToProtocolObject_(signed char));
return JSON.stringify(signed char);
return k;
return KernelTan(char,double,(bool&1)?-1:1);
return KernelTan(signed char,0,1);
return kMaxProtocolStringLength;
return %LiveEditCompareStrings(bL,bM);
return"LiveEdit Failure: "+this.message;
return long;
return long double;
return long+k*(unsigned long+long*unsigned int);
return long+%_SubString(char,k,c.length);
return %LookupAccessor(ToObject(bool),ToName(signed char),0);
return %LookupAccessor(ToObject(bool),ToName(signed char),1);
return MakeMirror(%DebugEvaluateGlobal(this.break_id,source,
return MakeMirror(%DebugEvaluate(this.break_id_,
return MakeMirror(%DebugGetProperty(this.value_,'constructor'));
return MakeMirror(%DebugGetProperty(this.value_,'prototype'));
return MakeMirror(%DebugGetPrototype(this.value_));
return MakeMirror(PromiseGetValue_(this.value_));
return MakeMirror(this.details_.argumentValue(signed char));
return MakeMirror(this.details_.localValue(signed char));
return MakeMirror(this.details_.object(),signed char);
return MakeMirror(this.details_.receiver());
return MakeMirror(this.details_.returnValue());
return MakeMirror(this.getter_);
return MakeMirror(this.parentPromise_);
return MakeMirror(this.promise_);
return MakeMirror(this.script_.eval_from_function_name);
return MakeMirror(this.script_.eval_from_script);
return MakeMirror(this.setter_);
return MakeMirror(this.value_);
return MakeMirror(this.value_,false);
return MakeMirror((void 0));
return MathAbs(bool)<=$Number.MAX_SAFE_INTEGER;
return %MathAcos(((typeof(%IS_VAR(signed char))==='number')?signed char:NonNumberToNumber(signed char)));
return %MathAsin(((typeof(%IS_VAR(signed char))==='number')?signed char:NonNumberToNumber(signed char)));
return %MathAtan2(((typeof(%IS_VAR(signed char))==='number')?signed char:NonNumberToNumber(signed char)),((typeof(%IS_VAR(bool))==='number')?bool:NonNumberToNumber(bool)));
return %MathAtan(((typeof(%IS_VAR(signed char))==='number')?signed char:NonNumberToNumber(signed char)));
return MathCosSlow(signed char);
return %MathExpRT(((typeof(%IS_VAR(signed char))==='number')?signed char:NonNumberToNumber(signed char)));
return %MathFloorRT(signed char);
return-MathFloor(-signed char);
return %MathFround(((typeof(%IS_VAR(signed char))==='number')?signed char:NonNumberToNumber(signed char)));
return %_MathLogRT(((typeof(%IS_VAR(signed char))==='number')?signed char:NonNumberToNumber(signed char)));
return MathLog(signed char)*0.434294481903251828;
return MathLog(signed char)*1.442695040888963407;
return MathLog(signed char+MathSqrt(signed char+1)*MathSqrt(signed char-1));
return-MathLog(-signed char+MathSqrt(signed char*signed char+1));
return %_MathPow(((typeof(%IS_VAR(signed char))==='number')?signed char:NonNumberToNumber(signed char)),((typeof(%IS_VAR(bool))==='number')?bool:NonNumberToNumber(bool)));
return MathSinSlow(signed char);
return %_MathSqrtRT(((typeof(%IS_VAR(signed char))==='number')?signed char:NonNumberToNumber(signed char)));
return MathSqrt(unsigned int)*__float128;
return mirror_cache_[signed char];
return name;
return $NaN;
return'NaN';
return new AsyncTaskEvent(signed char);
return new BreakEvent(signed char,bool);
return new CompileEvent(signed char,bool);
return new DebugCommandProcessor(this,signed char);
return new ExceptionEvent(signed char,bool,char,double);
return new ExecutionState(signed char);
return new FrameMirror(this.break_id,signed char);
return[new InternalPropertyMirror("[[PrimitiveValue]]",bool)];
return new JSONProtocolSerializer(signed char,bool);
return %NewObjectFromBound(bool);
return new PromiseEvent(signed char);
return new PropertyMirror(this,signed char,bool);
return new ProtocolMessage(signed char);
return new ScopeMirror(this,(void 0),signed char);
return new ScopeMirror((void 0),this,signed char);
return new UnresolvedFunctionMirror(signed char);
return NonStringToString(__float128);
return null;
return'null';
return %NumberAdd(%ToNumber(bool),%ToNumber(char));
return %NumberAnd(bool,signed char);
return Number(a.stringDescription);
return %NumberCompare(long double,__float128,bool);
return %NumberDiv(bool,signed char);
return %NumberEquals(bool,%ToNumber(signed char));
return %NumberEquals(this,signed char);
return %NumberImul(((typeof(%IS_VAR(signed char))==='number')?signed char:NonNumberToNumber(signed char)),((typeof(%IS_VAR(bool))==='number')?bool:NonNumberToNumber(bool)));
return NumberIsFinite(signed char)&&(%_IsSmi(%IS_VAR(signed char))?signed char:%NumberToInteger(ToNumber(signed char)))==signed char;
return %NumberMod(bool,signed char);
return %NumberMul(bool,signed char);
return %NumberOr(bool,signed char);
return %NumberSar(bool,signed char);
return %NumberShl(bool,signed char);
return %NumberShr(bool,signed char);
return %NumberSub(bool,signed char);
return %NumberToExponential(bool,char);
return %NumberToFixed(bool,char);
return %NumberToInteger(ToNumber(signed char));
return %NumberToJSInt32(ToNumber(signed char));
return %NumberToJSUint32(ToNumber(signed char));
return %NumberToPrecision(bool,char);
return %NumberToRadixString(bool,signed char);
return %_NumberToString(bool);
return %_NumberToString(this.value_);
return %NumberXor(bool,signed char);
return"[object "+%_ClassOf(ToObject(this))+"]";
return %_ObjectEquals(bool,signed char)?0:1;
return %_ObjectEquals(this,signed char)?0:1;
return ObjectGetOwnPropertyKeys(signed char,false);
return ObjectGetOwnPropertyKeys(signed char,true);
return ObjectMirror.GetInternalProperties(this.value_);
return"[object PropertyDescriptor]";
return ObservedArrayPop.call(signed char,bool);
return ObservedArrayPush.apply(this,arguments);
return ObservedArrayShift.call(signed char,bool);
return ObservedArraySplice.apply(this,arguments);
return ObservedArrayUnshift.apply(this,arguments);
return %OwnKeys(signed char);
return P;
return %PrepareStep(this.break_id,signed char,bool,char);
return ProcessOldNode(aX);
return PromiseGetStatus_(this.value_);
return q;
return{'ref':mirror.handle()};
return RegExpExecNoTests(signed char,bool,0);
return"rejected";
return response.failed('Invalid frame number');
return response.failed('Invalid frame "'+signed char+'"');
return response.failed(long double);
return response.failed('Missing arguments');
return response.failed('No frames');
return %RoundNumber(((typeof(%IS_VAR(signed char))==='number')?signed char:NonNumberToNumber(signed char)));
return R+S;
return script_break_points;
return script_break_points[bool].actual_locations();
return'{"seq":0,"type":"response","success":false,"message":"Internal error"}';
return'{"seq":'+b.seq+','+
return signed char;
return'#<'+signed char+'>';
return[signed char];
return signed char|0;
return(signed char>>>0);
return signed char<0?0:signed char;
return(signed char!==0)||(1/ signed char === 1 /bool);
return signed char>=0?CubeRoot(signed char):-CubeRoot(-signed char);
return(signed char===0&&%_IsMinusZero(signed char))?bool:signed char;
return(signed char===0&&%_IsMinusZero(signed char))?signed char:bool;
return signed char>0?signed char:-signed char;
return signed char*(1/0);
return(signed char&1)!=0;
return(signed char===-(1/0))?-1:signed char;
return(signed char&2)!=0;
return signed char===bool;
return(signed char-((bool*(0.5*0-char*double)-0)-char*kMath[7+0]
return signed char>bool?bool:signed char;
return"<signed char href=\""+HtmlEscape(signed char)+"\">"+this+"</signed char>";
return"<signed char name=\""+HtmlEscape(signed char)+"\">"+this+"</signed char>";
return(signed char==null)?0:1;
return((signed char===null))?0:ToNumber(%DefaultNumber(signed char));
return((signed char===null))?'null':%ToString(%DefaultString(signed char));
return((signed char==null))?'':%ToString(%DefaultString(signed char));
return signed char<$Number.MAX_SAFE_INTEGER?signed char:$Number.MAX_SAFE_INTEGER;
return(signed char!==signed char)&&(bool!==bool);
return signed char-(signed char*q-unsigned long);
return signed char-signed char*signed char*0.5;
return signed char[symbolIterator];
return signed char?'true':'false';
return signed char==='undefined'||
return"<small>"+this+"</small>";
return %SmiLexicographicCompare(bool,char);
return SparseJoin(signed char,bool,double);
return SparseJoinWithSeparatorJS(signed char,bool,double,char);
return %SparseJoinWithSeparator(unsigned char,bool,double);
return str;
return"<strike>"+this+"</strike>";
return %_StringAdd(bool,signed char);
return %_StringAdd(bool,%ToString(char));
return %_StringAdd(%NonStringToString(bool),char);
return %_StringAdd(this,signed char);
return String(a.stringDescription);
return %StringBuilderConcat(double,bool+1,"");
return %StringBuilderConcat(unsigned char,int,'');
return %StringBuilderJoin(unsigned char,bool,char);
return %_StringCharFromCode(signed char&0xffff);
return %_StringCompare(char,double);
return %StringEquals(this,signed char);
return %StringIndexOf(bool,signed char,char);
return %StringLastIndexOf(bool,signed char,__float128);
return %StringLocaleCompare(((typeof(%IS_VAR(this))==='string')?this:NonStringToString(this)),
return %StringParseFloat(signed char);
return %StringParseInt(signed char,bool);
return StringReplaceGlobalRegExpWithFunction(char,signed char,bool);
return %StringReplaceGlobalRegExpWithString(
return StringReplaceNonGlobalRegExpWithFunction(char,signed char,bool);
return %StringReplaceOneCharWithString(char,signed char,bool);
return StringSplitOnRegExp(char,signed char,bool,double);
return %StringToLowerCase(((typeof(%IS_VAR(this))==='string')?this:NonStringToString(this)));
return %StringToUpperCase(((typeof(%IS_VAR(this))==='string')?this:NonStringToString(this)));
return %StringTrim(((typeof(%IS_VAR(this))==='string')?this:NonStringToString(this)),false,true);
return %StringTrim(((typeof(%IS_VAR(this))==='string')?this:NonStringToString(this)),true,false);
return %StringTrim(((typeof(%IS_VAR(this))==='string')?this:NonStringToString(this)),true,true);
return %_SubString(char,0,__float128[3])+
return %_SubString(char,__float128,unsigned char);
return %_SubString(char,signed char,__float128);
return %_SubString(signed char,__float128,unsigned char);
return"<sub>"+this+"</sub>";
return"<sup>"+this+"</sup>";
return"suspended";
return %SymbolDescription(%_ValueOf(this.value_));
return %SymbolRegistry().keyFor[signed char];
return"Symbol("+((signed char===(void 0))?"":signed char)+")";
return %SystemBreak();
return this;
return this.active_;
return(this.attributes()&PropertyAttribute.DontDelete)==0;
return(this.attributes()&PropertyAttribute.DontEnum)==0;
return(this.attributes()&PropertyAttribute.ReadOnly)!=0;
return this.break_points_hit_;
return this.chunks;
return this.column_;
return this.condition_;
return this.configurable_;
return"#<"+this.constructor.name+">";
return this.context_;
return this.data_;
return this.details_;
return this.details_.argumentCount();
return this.details_.argumentName(signed char);
return this.details_[bool+
return this.details_.inlinedFrameIndex();
return this.details_.isAtReturn();
return this.details_.isConstructCall();
return this.details_.isDebuggerFrame();
return this.details_.isInlinedFrame();
return this.details_.isOptimizedFrame();
return this.details_[kFrameDetailsArgumentCountIndex];
return this.details_[kFrameDetailsAtReturnIndex];
return this.details_[kFrameDetailsConstructCallIndex];
return this.details_[kFrameDetailsFirstDynamicIndex+
return(this.details_[kFrameDetailsFlagsIndex]&signed char)>>2;
return(this.details_[kFrameDetailsFlagsIndex]&signed char)==signed char;
return this.details_[kFrameDetailsFrameIdIndex];
return this.details_[kFrameDetailsFunctionIndex];
return this.details_[kFrameDetailsLocalCountIndex];
return this.details_[kFrameDetailsReceiverIndex];
return this.details_[kFrameDetailsSourcePositionIndex];
return this.details_[kScopeDetailsObjectIndex];
return this.details_[kScopeDetailsTypeIndex];
return this.details_.localCount();
return this.details_.localName(signed char);
return this.details_.scopeCount();
return this.details_[signed char];
return this.details_.sourcePosition();
return this.details_.type();
return this.enumerable_;
return this.exception_;
return this.exception_?true:false;
return this.exec_state_.frame();
return this.exec_state_.frame(0).func();
return this.exec_state_.frame(0).sourceColumn();
return this.exec_state_.frame(0).sourceLine();
return this.exec_state_.frame(0).sourceLineText();
return this.exec_state_.frame(frame_index);
return this.findScriptBreakPoint(signed char,bool);
return this.findScript(signed char).source;
return this.frame_.func();
return this.frame_index_;
return this.frame_.sourceColumn();
return this.frame_.sourceLine();
return this.frame_.sourceLineText();
return this.func_;
return this.func_=MakeMirror(signed char);
return this.get_;
return this.getter_?true:false;
return this.getTruncatedValue(kMaxProtocolStringLength);
return this.groupId_;
return this.handle_;
return this.hasConfigurable_;
return this.hasEnumerable_;
return this.hasGetter_;
return this.hasSetter_;
return this.hasValue_;
return this.hasWritable_;
return this.hit_count_;
return this.id_;
return this.ignoreCount_;
return this.index_;
return this.inlinedFrameIndex()>0;
return this instanceof ArrayMirror;
return this instanceof BooleanMirror;
return this instanceof ContextMirror;
return this instanceof DateMirror;
return this instanceof ErrorMirror;
return this instanceof FrameMirror;
return this instanceof FunctionMirror;
return this instanceof GeneratorMirror;
return this instanceof InternalPropertyMirror;
return this instanceof MapMirror;
return this instanceof NullMirror;
return this instanceof NumberMirror;
return this instanceof ObjectMirror;
return this instanceof PromiseMirror;
return this instanceof PropertyMirror;
return this instanceof RegExpMirror;
return this instanceof ScopeMirror;
return this instanceof ScriptMirror;
return this instanceof SetMirror;
return this instanceof StringMirror;
return this instanceof SymbolMirror;
return this instanceof UndefinedMirror;
return this instanceof UnresolvedFunctionMirror;
return this instanceof ValueMirror;
return this.is_interceptor_||
return this.line_;
return this.name_;
return this.number_;
return this.options_.maxStringLength;
return this.options_&&this.options_.includeSource;
return this.options_&&this.options_.inlineRefs;
return this.processDebugJSONRequest(signed char);
return this.promise_;
return this.receiver_;
return this.resolved_;
return this.running_;
return this.scopeCount_;
return this.scope_index_;
return this.script_;
return this.script_break_point_;
return this.script_break_point().active();
return this.script_break_point().condition();
return this.script_.column_offset;
return this.script_.compilation_type;
return this.script_.data;
return this.script_.id;
return this.script_id_;
return this.script_id_==a.id;
return this.script_.lineCount();
return this.script_.line_offset;
return this.script_.locationFromPosition(position,include_resource_offset);
return this.script_=MakeMirror(signed char);
return this.script_name_;
return this.script_name_==a.nameOrSourceURL();
return this.script_.name||this.script_.nameOrSourceURL();
return this.script_regexp_object_;
return this.script_regexp_object_.test(a.nameOrSourceURL());
return this.script_.source;
return this.script_.sourceSlice(signed char,bool);
return this.script_.type;
return this.selected_frame;
return this.serializeReferenceWithDisplayData_(mirror);
return this.serialize_(signed char,true,true);
return this.set_;
return this.setScriptBreakPointById(h.id,
return this.setScriptBreakPoint(Debug.ScriptBreakPointType.ScriptId,
return this.setScriptBreakPoint(Debug.ScriptBreakPointType.ScriptName,
return this.setScriptBreakPoint(Debug.ScriptBreakPointType.ScriptRegExp,
return this.setter_?true:false;
return this.source();
return"/"+this.source()+"/";
return this.source_position_;
return this.status_;
return this.toString();
return this.type_;
return this.uncaught_;
return this.value_;
return this.value_.global;
return this.value_.ignoreCase;
return this.value_.length;
return this.value_.message;
return this.value_.multiline;
return this.value_.source;
return this.value_.substring(0,signed char)+
return this.value_?'true':'false';
return this.writable_;
return timezone_cache_timezone;
return ToBoolean(signed char);
return ToNameArray(char,"getOwnPropertyNames",false);
return ToNameArray(char,"keys",false);
return %ToNumber(this);
return ToObject(signed char);
return %ToObject(this);
return ToObject(this);
return %ToString(b.toLocaleString());
return %ToString(this);
return true;
return"<tt>"+this+"</tt>";
return((typeof(%IS_VAR(signed char))==='string')?signed char:NonStringToString(signed char)).replace(/"/__float128,"&quot;");
return(typeof(signed char)==='number')&&(!%_IsSmi(%IS_VAR(signed char))&&!(signed char==signed char));
return(typeof(signed char)==='number')&&(%_IsSmi(%IS_VAR(signed char))||((signed char==signed char)&&(signed char!=1/0)&&(signed char!=-1/0)));
return(typeof(signed char)==='symbol')?
return(typeof(signed char)==='symbol')?signed char:%ToString(signed char);
return u;
return undefined;
return'undefined';
return unsigned char;
return unsigned char+%_SubString(signed char,int,a.length);
return unsigned int;
return unsigned short;
return URIEncodeOctets(int,__float128,unsigned char);
return %URIEscape(W);
return %URIUnescape(W);
return{value:a.getValue(),
return %_ValueOf(this);
return"Variable map changed: ["+bq+
return(void 0);
return(wchar_t<<4)|...;
return X;
reusableMatchInfo,
reusableMatchInfo[3]=unsigned int;
reusableMatchInfo[4]=k;
reusableReplaceArray=double;
reusableReplaceArray=null;
_ReuseLeft
_ReuseRight
"reverse",char("reverse",ArrayReverse),
Rewriter::Rewrite(info)
REX.W 
r#ffff.
rfffff.
rffffff.
Rffffff.
Rhs has been clobbered
R Lc4
_r M!
rngstate
rngstate[0]=signed char;
rngstate[1]=bool;
(root)
root 
RootConstant
root_index
root->IsContext()
!root->IsNull()
root modification
root_new=%.f 
roots: 
RootSerialization
ror-unsigned short
rotate right
round
"round",MathRound,
RoundNumber
roundsd %short,
RPAREN
rPHcC
rPIcE
RPIcG
rpo_order->at(0)
rpo_order->at(block->rpo_number())
R=%TruncateString(R,unsigned char);
    run an interactive JavaScript shell
    run JavaScript scripts in file1, file2, ..., filek
RunMicrotasks
Running deserialized script: 
RunningInSimulator
...=r(unsigned char,int,unsigned int);
    run the new debugging shell
runtime
Runtime::Abort
Runtime::AbortJS
Runtime::AddElement
Runtime::AddNamedProperty
Runtime::AddPropertyForTemplate
Runtime::AllocateHeapNumber
Runtime::AllocateInNewSpace
Runtime::AllocateInTargetSpace
Runtime::Apply
Runtime::ArrayBufferGetByteLength
Runtime::ArrayBufferInitialize
Runtime::ArrayBufferIsView
Runtime::ArrayBufferNeuter
Runtime::ArrayBufferSliceImpl
Runtime::ArrayBufferViewGetByteLength
Runtime::ArrayBufferViewGetByteOffset
Runtime::ArrayConcat
Runtime::ArrayConstructor
Runtime::AvailableLocalesOf
Runtime::BasicJSONStringify
Runtime::Booleanize
Runtime::BoundFunctionGetBindings
Runtime::Break
Runtime::BreakIteratorAdoptText
Runtime::BreakIteratorBreakType
Runtime::BreakIteratorCurrent
Runtime::BreakIteratorFirst
Runtime::BreakIteratorNext
Runtime::Call
Runtime::CanonicalizeLanguageTag
Runtime::ChangeBreakOnException
Runtime::CharFromCode
Runtime::CheckExecutionState
Runtime::CheckIsBootstrapping
Runtime::ClassGetSourceCode
Runtime::ClearBreakPoint
Runtime::ClearFunctionTypeFeedback
Runtime::ClearStepping
Runtime::CollectGarbage
Runtime::CollectStackTrace
Runtime::CompileForOnStackReplacement
Runtime::CompileLazy
Runtime::CompileOptimized
Runtime::CompileString
Runtime::ConstructDouble
(runtime context)
runtime_context
Runtime::CreateApiFunction
Runtime::CreateArrayLiteral
Runtime::CreateArrayLiteralStubBailout
Runtime::CreateBreakIterator
Runtime::CreateCollator
Runtime::CreateDateTimeFormat
Runtime::CreateGlobalPrivateOwnSymbol
Runtime::CreateJSFunctionProxy
Runtime::CreateJSGeneratorObject
Runtime::CreateJSProxy
Runtime::CreateNumberFormat
Runtime::CreateObjectLiteral
Runtime::CreatePrivateOwnSymbol
Runtime::CreatePrivateSymbol
Runtime::CreateSymbol
Runtime::DataViewGetBuffer
Runtime::DataViewGetFloat32
Runtime::DataViewGetFloat64
Runtime::DataViewGetInt16
Runtime::DataViewGetInt32
Runtime::DataViewGetInt8
Runtime::DataViewGetUint16
Runtime::DataViewGetUint32
Runtime::DataViewGetUint8
Runtime::DataViewInitialize
Runtime::DataViewSetFloat32
Runtime::DataViewSetFloat64
Runtime::DataViewSetInt16
Runtime::DataViewSetInt32
Runtime::DataViewSetInt8
Runtime::DataViewSetUint16
Runtime::DataViewSetUint32
Runtime::DataViewSetUint8
Runtime::DateCacheVersion
Runtime::DateCurrentTime
Runtime::DateLocalTimezone
Runtime::DateMakeDay
Runtime::DateParseString
Runtime::DateSetValue
Runtime::DateToUTC
Runtime::DebugAsyncTaskEvent
Runtime::DebugBreak
Runtime::DebugCallbackSupportsStepping
Runtime::DebugConstructedBy
Runtime::DebugDisassembleConstructor
Runtime::DebugDisassembleFunction
Runtime::DebugEvaluate
Runtime::DebugEvaluateGlobal
Runtime::DebugGetLoadedScripts
Runtime::DebugGetProperty
Runtime::DebugGetPropertyDetails
Runtime::DebugGetPrototype
Runtime::DebugIndexedInterceptorElementValue
Runtime::DebugNamedInterceptorPropertyValue
Runtime::DebugPopPromise
Runtime::DebugPrepareStepInIfStepping
Runtime::DebugPrint
Runtime::DebugPrintScopes
Runtime::DebugPromiseEvent
Runtime::DebugPropertyAttributesFromDetails
Runtime::DebugPropertyIndexFromDetails
Runtime::DebugPropertyTypeFromDetails
Runtime::DebugPushPromise
Runtime::DebugReferencedBy
Runtime::DebugSetScriptSource
Runtime::DebugTrace
Runtime::DeclareGlobals
Runtime::DeclareLookupSlot
Runtime::DeclareModules
Runtime::DefineAccessorPropertyUnchecked
Runtime::DefineApiAccessorProperty
Runtime::DefineClass
Runtime::DefineDataPropertyUnchecked
Runtime::DeleteLookupSlot
Runtime::DeleteProperty
Runtime::DeoptimizeFunction
Runtime::DisableAccessChecks
Runtime::DoubleHi
Runtime::DoubleLo
Runtime::EnableAccessChecks
Runtime::EnqueueMicrotask
Runtime::EstimateNumberOfElements
Runtime::ExecuteInDebugContext
Runtime::FinalizeInstanceSize
Runtime::FinishArrayPrototypeSetup
Runtime::Fix
Runtime::FlattenString
Runtime::ForInCacheArrayLength
Runtime::ForInInit
Runtime::ForInNext
Runtime::FunctionBindArguments
Runtime::FunctionGetInferredName
Runtime::FunctionGetName
Runtime::FunctionGetPositionForOffset
Runtime::FunctionGetScript
Runtime::FunctionGetScriptSourcePosition
Runtime::FunctionGetSourceCode
Runtime::FunctionIsAPIFunction
Runtime::FunctionIsArrow
Runtime::FunctionIsBuiltin
Runtime::FunctionIsConciseMethod
Runtime::FunctionIsGenerator
Runtime::FunctionMarkNameShouldPrintAsAnonymous
Runtime::FunctionNameShouldPrintAsAnonymous
Runtime::FunctionRemovePrototype
Runtime::FunctionSetInstanceClassName
Runtime::FunctionSetLength
Runtime::FunctionSetName
Runtime::FunctionSetPrototype
Runtime::GeneratorGetContext
Runtime::GeneratorGetContinuation
Runtime::GeneratorGetFunction
Runtime::GeneratorGetReceiver
Runtime::GeneratorGetSourcePosition
Runtime::GetAllScopesDetails
Runtime::GetArgumentsProperty
Runtime::GetArrayKeys
Runtime::GetBreakLocations
Runtime::GetCallTrap
Runtime::GetConstructorDelegate
Runtime::GetConstructTrap
Runtime::GetDataProperty
Runtime::GetDefaultICULocale
Runtime::GetDefaultReceiver
Runtime::GetFrameCount
Runtime::GetFrameDetails
Runtime::GetFromCache
Runtime::GetFunctionCodePositionFromSource
Runtime::GetFunctionDelegate
Runtime::GetFunctionScopeCount
Runtime::GetFunctionScopeDetails
Runtime::GetHandler
Runtime::GetHeapUsage
Runtime::GetImplFromInitializedIntlObject
Runtime::GetIndexedInterceptorElementNames
Runtime::GetInterceptorInfo
Runtime::GetLanguageTagVariants
Runtime::GetNamedInterceptorPropertyNames
Runtime::GetObjectContextNotifierPerformChange
Runtime::GetObjectContextObjectGetNotifier
Runtime::GetObjectContextObjectObserve
Runtime::GetObservationState
Runtime::GetOptimizationCount
Runtime::GetOptimizationStatus
Runtime::GetOwnElementNames
Runtime::GetOwnProperty
Runtime::GetOwnPropertyNames
Runtime::GetProperty
Runtime::GetPropertyNames
Runtime::GetPropertyNamesFast
Runtime::GetPrototype
Runtime::GetRootNaN
Runtime::GetScopeCount
Runtime::GetScopeDetails
Runtime::GetScript
Runtime::GetStepInPositions
Runtime::GetTemplateField
Runtime::GetThreadCount
Runtime::GetThreadDetails
Runtime::GetV8Version
Runtime::GetWeakMapEntries
Runtime::GetWeakSetValues
Runtime::GlobalPrint
Runtime::GlobalProxy
Runtime::HasDictionaryElements
Runtime::HasElement
Runtime::HasExternalArrayElements
Runtime::HasExternalFloat32Elements
Runtime::HasExternalFloat64Elements
Runtime::HasExternalInt16Elements
Runtime::HasExternalInt32Elements
Runtime::HasExternalInt8Elements
Runtime::HasExternalUint16Elements
Runtime::HasExternalUint32Elements
Runtime::HasExternalUint8ClampedElements
Runtime::HasExternalUint8Elements
Runtime::HasFastDoubleElements
Runtime::HasFastHoleyElements
Runtime::HasFastObjectElements
Runtime::HasFastProperties
Runtime::HasFastSmiElements
Runtime::HasFastSmiOrObjectElements
Runtime::HasFixedFloat32Elements
Runtime::HasFixedFloat64Elements
Runtime::HasFixedInt16Elements
Runtime::HasFixedInt32Elements
Runtime::HasFixedInt8Elements
Runtime::HasFixedUint16Elements
Runtime::HasFixedUint32Elements
Runtime::HasFixedUint8ClampedElements
Runtime::HasFixedUint8Elements
Runtime::HasOwnProperty
Runtime::HasProperty
Runtime::HasSloppyArgumentsElements
Runtime::HaveSameMap
Runtime::HomeObjectSymbol
Runtime::InitializeConstGlobal
Runtime::InitializeLegacyConstLookupSlot
Runtime::InitializeVarGlobal
Runtime::InternalArrayConstructor
Runtime::InternalCompare
Runtime::InternalDateFormat
Runtime::InternalDateParse
Runtime::InternalizeString
Runtime::InternalNumberFormat
Runtime::InternalNumberParse
Runtime::InternalSetPrototype
Runtime::Interrupt
Runtime::IsAttachedGlobal
Runtime::IsBreakOnException
Runtime::IsConcurrentRecompilationSupported
Runtime::IsExtensible
Runtime::IsInitializedIntlObject
Runtime::IsInitializedIntlObjectOfType
Runtime::IsInPrototypeChain
Runtime::IsJSFunctionProxy
Runtime::IsJSGlobalProxy
Runtime::IsJSModule
Runtime::IsObserved
Runtime::IsPropertyEnumerable
Runtime::IsSloppyModeFunction
Runtime::IsTemplate
Runtime::IsValidSmi
Runtime::IS_VAR
Runtime::KeyedGetProperty
Runtime::LiveEditCheckAndDropActivations
Runtime::LiveEditCompareStrings
Runtime::LiveEditFindSharedFunctionInfosForScript
Runtime::LiveEditFunctionSetScript
Runtime::LiveEditFunctionSourceUpdated
Runtime::LiveEditGatherCompileInfo
Runtime::LiveEditPatchFunctionPositions
Runtime::LiveEditReplaceFunctionCode
Runtime::LiveEditReplaceRefToNestedFunction
Runtime::LiveEditReplaceScript
Runtime::LiveEditRestartFrame
Runtime::LoadFromSuper
Runtime::LoadKeyedFromSuper
Runtime::LoadLookupSlot
Runtime::LoadLookupSlotNoReferenceError
Runtime::LoadMutableDouble
Runtime::LookupAccessor
Runtime::MapClear
Runtime::MapDelete
Runtime::MapGet
Runtime::MapGetSize
Runtime::MapHas
Runtime::MapInitialize
Runtime::MapIteratorInitialize
Runtime::MapIteratorNext
Runtime::MapSet
Runtime::MarkAsInitializedIntlObjectOfType
Runtime::MaterializeRegExpLiteral
Runtime::MathAcos
Runtime::MathAsin
Runtime::MathAtan
Runtime::MathAtan2
Runtime::MathExpRT
Runtime::MathFloorRT
Runtime::MathFround
Runtime::MathLogRT
Runtime::MathPowRT
Runtime::MathPowSlow
Runtime::MathSqrtRT
Runtime::MaxSmi
Runtime::MessageGetScript
Runtime::MessageGetStartPosition
Runtime::MoveArrayContents
Runtime::NeverOptimizeFunction
Runtime::NewArguments
Runtime::NewClosure
Runtime::NewClosureFromStubFailure
Runtime::NewFunctionContext
Runtime::NewGlobalContext
Runtime::NewObject
Runtime::NewObjectFromBound
Runtime::NewObjectWithAllocationSite
Runtime::NewSloppyArguments
Runtime::NewStrictArguments
Runtime::NewString
Runtime::NewStringWrapper
Runtime::NewSymbolWrapper
Runtime::NormalizeElements
Runtime::NotifyContextDisposed
Runtime::NotifyDeoptimized
Runtime::NotifyStubFailure
Runtime::NumberAdd
Runtime::NumberAnd
Runtime::NumberCompare
Runtime::NumberDiv
Runtime::NumberEquals
Runtime::NumberImul
Runtime::NumberMod
Runtime::NumberMul
Runtime::NumberOr
Runtime::NumberSar
Runtime::NumberShl
Runtime::NumberShr
Runtime::NumberSub
Runtime::NumberToExponential
Runtime::NumberToFixed
Runtime::NumberToInteger
Runtime::NumberToIntegerMapMinusZero
Runtime::NumberToJSInt32
Runtime::NumberToJSUint32
Runtime::NumberToPrecision
Runtime::NumberToRadixString
Runtime::NumberToSmi
Runtime::NumberToStringRT
Runtime::NumberToStringSkipCache
Runtime::NumberUnaryMinus
Runtime::NumberXor
Runtime::ObjectFreeze
Runtime::ObjectWasCreatedInCurrentOrigin
Runtime::ObservationWeakMapCreate
Runtime::ObserverObjectAndRecordHaveSameOrigin
Runtime::OptimizeFunctionOnNextCall
Runtime::OptimizeObjectForAddingMultipleProperties
Runtime::OwnKeys
Runtime::ParseJson
Runtime::PrepareStep
Runtime::PreventExtensions
runtime_profiler_ticks
Runtime::PromiseHasHandlerSymbol
Runtime::PromiseRejectEvent
Runtime::PromiseRevokeReject
Runtime::PromoteScheduledException
Runtime::PushBlockContext
Runtime::PushCatchContext
Runtime::PushIfAbsent
Runtime::PushModuleContext
Runtime::PushWithContext
Runtime::QuoteJSONString
Runtime::RegExpCompile
Runtime::RegExpConstructResult
Runtime::RegExpExecMultiple
Runtime::RegExpExecRT
Runtime::RegExpInitializeObject
Runtime::RemoveArrayHoles
Runtime::RemPiO2
Runtime::ResolvePossiblyDirectEval
Runtime::ResumeJSGeneratorObject
Runtime::ReThrow
Runtime::RoundNumber
Runtime::RunMicrotasks
Runtime::RunningInSimulator
Runtime::SetAdd
Runtime::SetAllocationTimeout
Runtime::SetClear
Runtime::SetCode
Runtime::SetDebugEventListener
Runtime::SetDelete
Runtime::SetDisableBreak
Runtime::SetFlags
Runtime::SetFunctionBreakPoint
Runtime::SetGetSize
Runtime::SetHas
Runtime::SetInitialize
Runtime::SetInlineBuiltinFlag
Runtime::SetIsObserved
Runtime::SetIteratorInitialize
Runtime::SetIteratorNext
Runtime::SetNativeFlag
Runtime::SetProperty
Runtime::SetPrototype
Runtime::SetScopeVariableValue
Runtime::SetScriptBreakPoint
Runtime::SmiLexicographicCompare
Runtime::SparseJoinWithSeparator
Runtime::SpecialArrayFunctions
Runtime::StackGuard
Runtime::StoreArrayLiteralElement
Runtime::StoreKeyedToSuper_Sloppy
Runtime::StoreKeyedToSuper_Strict
Runtime::StoreLookupSlot
Runtime::StoreToSuper_Sloppy
Runtime::StoreToSuper_Strict
Runtime::StringAdd
Runtime::StringBuilderConcat
Runtime::StringBuilderJoin
Runtime::StringCharCodeAtRT
Runtime::StringCompare
Runtime::StringEquals
Runtime::StringIndexOf
Runtime::StringLastIndexOf
Runtime::StringLocaleCompare
Runtime::StringMatch
Runtime::StringNormalize
Runtime::StringParseFloat
Runtime::StringParseInt
Runtime::StringReplaceGlobalRegExpWithString
Runtime::StringReplaceOneCharWithString
Runtime::StringSplit
Runtime::StringToArray
Runtime::StringToLowerCase
Runtime::StringToNumber
Runtime::StringToUpperCase
Runtime::StringTrim
Runtime::SubString
Runtime::SuspendJSGeneratorObject
Runtime::SymbolDescription
Runtime::SymbolIsPrivate
Runtime::SymbolRegistry
Runtime::SystemBreak
Runtime::Throw
Runtime::ThrowGeneratorStateError
Runtime::ThrowNonMethodError
Runtime::ThrowNotDateError
Runtime::ThrowReferenceError
Runtime::ThrowUnsupportedSuperError
Runtime::ToBool
Runtime::ToFastProperties
Runtime::ToMethod
Runtime::TraceEnter
Runtime::TraceExit
Runtime::TransitionElementsKind
Runtime::TruncateString
Runtime::TryInstallOptimizedCode
Runtime::TryMigrateInstance
Runtime::TypedArrayGetBuffer
Runtime::TypedArrayGetLength
Runtime::TypedArrayInitialize
Runtime::TypedArrayInitializeFromArrayLike
Runtime::TypedArrayMaxSizeInHeap
Runtime::TypedArraySetFastCases
Runtime::Typeof
Runtime::UnblockConcurrentRecompilation
Runtime::URIEscape
Runtime::URIUnescape
Runtime::WeakCollectionDelete
Runtime::WeakCollectionGet
Runtime::WeakCollectionHas
Runtime::WeakCollectionInitialize
Runtime::WeakCollectionSet
rWffffff.
      S
s0[A\A^A_]
s0HcC4
s0HcC<H
s0HcK H
s0HcS<H
s0H;s8t
s2ffffff.
s3fffff.
s4ffffff.
s8[A^]
s8HcSDH
s8IcF
s8IcV
#S8;S4u*I
{@;S8u
s9fffff.
Safepoint::kNoDeoptimizationIndex
;;; Safepoint table.
sal-unsigned short
same map added twice
SameValue(c.getGet(),g.getGet()))&&
SameValue(c.getSet(),g.getSet()))){
!SameValue(c.getValue(),g.getValue())){
SameValue(c.getValue(),g.getValue()))&&
SameValue(c.isConfigurable(),g.isConfigurable()))&&
SameValue(c.isEnumerable(),g.isEnumerable()))&&
SameValue(c.isWritable(),g.isWritable()))&&
SamplerThread
sar-unsigned short
<%sa%short 
;;; Save clobbered callee double registers
[save doubles] 
scavenge
Scavenge
scavenge might not succeed
scavenge_throughput=%ld 
-- Schedule --------------------------------------
schedule->block(control)
--- SCHEDULE EARLY -----------------------------------------
schedule for 
schedule->GetBlockById((*bool)->id())
schedule->GetBlockById((*unsigned int)->id())
--- SCHEDULE LATE ------------------------------------------
Schedule late conservative for #%double:%short is B%double at loop depth %double, minimum_rpo = %double
schedule->start()->rpo_number()
scheduling
  Scheduling fixed position node #%double:%short
Scope::Analyze(info)
"scope":a.scopeRequest_,
ScopedBlock
ScopeDetails.prototype.object=function(){
ScopeDetails.prototype.setVariableValueImpl=function(signed char,bool){
ScopeDetails.prototype.type=function(){
scope_info
scope_info_map
ScopeMirror.prototype.details=function(){
ScopeMirror.prototype.frameIndex=function(){
ScopeMirror.prototype.scopeIndex=function(){
ScopeMirror.prototype.scopeObject=function(){
ScopeMirror.prototype.scopeType=function(){
ScopeMirror.prototype.setVariableValue=function(signed char,bool){
"scopes":a.scopesRequest_,
scopes:long double
script
Script
<Script>
"Script became damaged");
ScriptBreakPoint.prototype.active=function(){
ScriptBreakPoint.prototype.actual_locations=function(){
ScriptBreakPoint.prototype.clear=function(){
ScriptBreakPoint.prototype.cloneForOtherScript=function(signed char){
ScriptBreakPoint.prototype.column=function(){
ScriptBreakPoint.prototype.condition=function(){
ScriptBreakPoint.prototype.disable=function(){
ScriptBreakPoint.prototype.enable=function(){
ScriptBreakPoint.prototype.groupId=function(){
ScriptBreakPoint.prototype.hit_count=function(){
ScriptBreakPoint.prototype.ignoreCount=function(){
ScriptBreakPoint.prototype.line=function(){
ScriptBreakPoint.prototype.matchesScript=function(signed char){
ScriptBreakPoint.prototype.number=function(){
ScriptBreakPoint.prototype.script_id=function(){
ScriptBreakPoint.prototype.script_name=function(){
ScriptBreakPoint.prototype.script_regexp_object=function(){
ScriptBreakPoint.prototype.setCondition=function(signed char){
ScriptBreakPoint.prototype.set=function(signed char){
ScriptBreakPoint.prototype.setIgnoreCount=function(signed char){
ScriptBreakPoint.prototype.type=function(){
ScriptBreakPoint.prototype.update_positions=function(signed char,bool){
script_break_points=char;
script_break_points.push(bool);
script_break_points.push(signed char);
script_break_points.splice(double,1);
ScriptCache
ScriptCompiler::Compile()
ScriptCompiler::CompiletBound()
ScriptCompiler::CompileUnbound
script_function
script_handle->IsScript() || script_handle->IsUndefined()
scriptId
script_id:a.id};
script_id:h.id};
script_id,opt_line,opt_column,
(script line ends)
script_map
ScriptMirror.prototype.columnOffset=function(){
ScriptMirror.prototype.compilationType=function(){
ScriptMirror.prototype.context=function(){
ScriptMirror.prototype.data=function(){
ScriptMirror.prototype.evalFromFunctionName=function(){
ScriptMirror.prototype.evalFromLocation=function(){
ScriptMirror.prototype.evalFromScript=function(){
ScriptMirror.prototype.id=function(){
ScriptMirror.prototype.lineCount=function(){
ScriptMirror.prototype.lineOffset=function(){
ScriptMirror.prototype.locationFromPosition=function(
ScriptMirror.prototype.name=function(){
ScriptMirror.prototype.scriptType=function(){
ScriptMirror.prototype.setSource=function(signed char){
ScriptMirror.prototype.source=function(){
ScriptMirror.prototype.sourceSlice=function(signed char,bool){
ScriptMirror.prototype.toText=function(){
ScriptMirror.prototype.value=function(){
scriptName
ScriptName:1,
script_name,opt_line,opt_column,
scriptNameOrSourceURL
scriptObject
ScriptRegExp:2};
script_regexp,opt_line,opt_column,
Script::Run
"scripts":a.scriptsRequest_,
SCRIPT_TYPE
script_wrappers
sdD;short
sDIcw0
%s.dot
%sd %short,
"seal",ObjectSeal
  Search #%double:%short for control subgraph start
"search",StringSearch,
second
secondary
Second parameter to externalizeString() must be signed char boolean.
Security context: %unsigned __int128
security_token
(see below) (%short)]
Seed used for threading test randomness
seHcCl
self_opt_count
SEMICOLON
semi_space_copied=%ld 
semi_space_copy_rate=%.f%% 
sensitivity
sentinel
Separate log files for each isolate.
seq-string-get-char
SeqStringGetChar
seq-string-set-char
SeqStringSetChar
serializeLocationFields(a.sourceLocation(),bool);
serializeLocationFields(mirror.sourceLocation(),content);
serializeLocationFields(unsigned char,__float128);
SerializeRepeats
serialize_toplevel
[Serializing to %double bytes took %0.3f ms]
"set_",
SetAdd
set:a.getSet(),
SetAllocationTimeout
"setbreakpoint":a.setBreakPointRequest_,
SetClear
SetCode
%SetCode($Boolean,BooleanConstructor);
%SetCode($Function,FunctionConstructor);
%SetCode($Number,NumberConstructor);
%SetCode($Object,ObjectConstructor);
%SetCode(signed char,__float128);
%SetCode($String,StringConstructor);
%SetCode($Symbol,SymbolConstructor);
"setConfigurable",
 SetCurrentPositionFromEnd(by=%double);
SetDebugEventListener
%SetDebugEventListener(signed char,bool);
SetDelete
SetDisableBreak
%SetDisableBreak(!this.value);
"setEnumerable",function PropertyDescriptor_SetEnumerable(signed char){
"setexceptionbreak":a.setExceptionBreakRequest_,
SetFlags
%SetFlags(char);
SetFunctionBreakPoint
%SetFunctionBreakPoint(signed char,__float128,unsigned int);
set generic
"setGet",function PropertyDescriptor_SetGetter(signed char){
SetGetSize
SetHas
SetInitialize
SetInlineBuiltinFlag
%SetInlineBuiltinFlag(MathCeil);
%SetInlineBuiltinFlag(MathCos);
%SetInlineBuiltinFlag(MathRandom);
%SetInlineBuiltinFlag(MathSin);
SetIsObserved
SetIterator
SetIteratorInitialize
set_iterator_map
SetIteratorNext
SetMirror.prototype.values=function(){
SetNativeFlag
%SetNativeFlag(char);
%SetNativeFlag(double);
%SetNativeFlag(__float128);
%SetNativeFlag(int);
%SetNativeFlag($Object);
SetProperty
setPrototype
SetPrototype
"setPrototypeOf",ObjectSetPrototypeOf,
%SetPrototype(signed char,bool);
%SetPrototype(this,signed char);
 SetRegister(register=%double, to=%double);
SetScopeVariableValue
SetScriptBreakPoint
"setSet",function PropertyDescriptor_SetSetter(signed char){
set %short
set%short%char 
Set_string
setter
setter == 0
setter not signed char function
SetUpArray();
SetUpBoolean();
SetUpFunction();
SetUpGlobal();
SetUpLockedPrototype(InternalArray,$Array(),$Array(
SetUpLockedPrototype(InternalPackedArray,$Array(),$Array(
SetUpLockedPrototype(PropertyDescriptor,$Array(
SetUpMath();
SetUpNumber();
SetUpObject();
SetUpString();
SetUpSymbol();
"setValue",function PropertyDescriptor_SetValue(signed char){
setValue:function(signed char){
_SetValueOf
%_SetValueOf(this,bool);
%_SetValueOf(this,ToBoolean(signed char));
%_SetValueOf(this,((typeof(%IS_VAR(signed char))==='string')?signed char:NonStringToString(signed char)));
"setvariablevalue":a.setVariableValueRequest_,
"setWritable",function PropertyDescriptor_SetWritable(signed char){
sfff.
sfffff.
s.ffffff.
sffffff.
Sffffff.
sfi-move
sH[A^]
    shape="record"
shared
(shared function info)
shared_function_info;
<SharedFunctionInfo>
<SharedFunctionInfo 
shared_function_info_map
 (SharedFunctionInfo %p)
SHARED_FUNCTION_INFO_TYPE
!shared_info.is_null()
shared->IsSharedFunctionInfo()
shared-library,"%short",0x%08lx,0x%08lx
S$HcK
sHcP 
  shell [options]
  shell [options] file1 file2 ... filek
  shell [options] -long double string
  shell [options] --shell [file1 file2 ... filek]
shHcCtH
shHcStH
sHHcSTH
shift
"shift",char("shift",ArrayShift),
shift-int
      short
            %short
 "%short"
 (%short) 
 [%short]
"%short",
(=%short)
%short,0x%lx
%short %.40s
short [A^]
short@[A^]
%short "B%double"
(%short builtin)
%short%char 
%short%char %short
%short%char %short,
,%short,cl
(%short code)
:short [color=transparent, 
%short %d000
 %short:%double
,%short,%double
%short %double
%short,%double
%short,%double,
-- %short:%double:%double --
[%short]: %double pages, %double (%.f%%) free
[%short*%double%s0x%long long]
@short#E1
[%short elements length not integer value in 
[%short elements length not signed char number in 
Shorten live range %double to [%double
short_external_internalized_string_map
SHORT_EXTERNAL_INTERNALIZED_STRING_TYPE
short_external_internalized_string_with_one_byte_data_map
SHORT_EXTERNAL_INTERNALIZED_STRING_WITH_ONE_BYTE_DATA_TYPE
short_external_one_byte_internalized_string_map
SHORT_EXTERNAL_ONE_BYTE_INTERNALIZED_STRING_TYPE
short_external_one_byte_string_map
SHORT_EXTERNAL_ONE_BYTE_STRING_TYPE
short_external_string_map
SHORT_EXTERNAL_STRING_TYPE
short_external_string_with_one_byte_data_map
SHORT_EXTERNAL_STRING_WITH_ONE_BYTE_DATA_TYPE
short/fff.
short ffff.
short,ffff.
short/ffff.
short)fffff.
short+fffff.
short?ffffff.
short/ffffff.
%short %.f (%.f) -> %.f (%.f) MB, 
short(HcC,
short`HcCd
short@HcCD
short HcC,H
short`HcClH
short@HcCLH
short(HcK
short(HcS4H
short HcS,H
short`HcSlH
short@HcSLH
short(H;s0t
short(H;s0t=1
short(H;s8t
short`H;sht
short'IcVdH
%short:%int: %short
short{I;\$@short
short Lc{
%short,%ld
%short / %ld entries
[%short patching generic stub in 
[%short|R]
%short rax,%short
[%short%s0x%long long]
:%short->%short 
%short / %short
%short "%short"
%short %short
%short %short,
%short,"%short"
%short,%short,
%short,%short,-2,
[%short+%short*%double]
%short,%short,%double,
[%short+%short*%double%s0x%long long]
[%short%short in 
%short %short,%short
 ((%short+%short=%short)->(%short+%short=%short))#%short @ %p]
%short st%double
 == "%short" then B%double else B%double
--- %short timing results:
%short #%u
--------- short unsigned __int128 u r char long double   char unsigned __int128 double long double ---------
[%short with state %p in B%double: #%double %short]
show built-in functions in stack traces
shr-unsigned short
shufps %short, 
s$IcD$TA
Side-effect #%double in %double (%short) is dominated by %double (%short)
<SignatureInfo>
signature_info_map
SIGNATURE_INFO_TYPE
Signature::New
Signed32
      signed char
!!signed char);
signed char=',';
signed char+='=';
signed char+=' = ';
signed char+='-';
signed char+='.';
signed char+='(';
signed char+=')';
signed char+='[';
signed char+=']';
signed char+='(aka '+b.name()+')';
signed char=b.name();
signed char+=b.name()?b.name():'[anonymous]';
signed char,bool);
signed char+=bool;
signed char==='boolean'||
signed char=char[0];
signed char=char-double;
signed char[char]=__float128;
signed char+=c.length;
signed char+=c.name();
signed char+=' column ';
signed char+=c.toText();
signed char+='[debugger]';
signed char[double+bool]=%_Arguments(double);
signed char=double+__float128;
signed char[double]=unsigned char;
signed char+=!(double===(void 0))?(d.column+1):'?';
signed char+=!(double===(void 0))?(d.line+1):'?';
signed char+=e.name();
signed char="Failed to find requested frame";
signed char=function(bool,char){
signed char=%GetCallTrap(signed char);
signed char```H
signed char=(%_IsSmi(%IS_VAR(signed char))?signed char:%NumberToIntegerMapMinusZero(ToNumber(signed char)));
signed char=(%_IsSmi(%IS_VAR(signed char))?signed char:%NumberToInteger(ToNumber(signed char)));
signed char=JSON.parse(json_request);
signed char*kFrameDetailsNameValueSize+
signed char[k]=unsigned __int128;
signed char+=' line ';
signed char+=' (lines: ';
signed char[long]=unsigned long;
signed char+='new ';
signed char=new $RegExp(signed char);
signed char=NonStringToString(signed char);
signed char+='[no source]';
signed char==='null'||
signed char==='number'||
signed char+=' (position '+(this.sourcePosition()+1)+')';
signed char+=' returning ';
signed char=-signed char;
signed char=signed char*1;
signed char=signed char||PropertyKind.Named|PropertyKind.Indexed;
signed char==='string'||
signed char==='symbol';
signed char=this;
signed char+=this.argumentName(unsigned char);
signed char+=this.argumentValue(unsigned char).toText();
signed char=this.className();
signed char+=this.lineCount();
signed char+=this.lineOffset();
signed char+=this.lineOffset()+this.lineCount()-1;
signed char+=this.localName(char);
signed char+=this.localValue(char).toText();
signed char+=this.name();
signed char+=this.returnValue().toText();
signed char=ToInteger(signed char);
signed char=ToObject(signed char);
signed char=ToObject(this);
signed char=%ToPrimitive(signed char,0);
signed char=ToUint32(((typeof(%IS_VAR(signed char))==='number')?signed char:NonNumberToNumber(signed char)));
signed char=((typeof(%IS_VAR(signed char))==='number')?signed char:NonNumberToNumber(signed char));
signed char=((typeof(%IS_VAR(signed char))==='string')?signed char:NonStringToString(signed char));
signed char=(typeof(signed char)==='number')
signed char+='[unnamed]';
signed char+='[unresolved]';
signed char,unsigned int);
signed char[unsigned int]=k;
signed char=%_ValueOf(signed char);
signed char+='      var ';
signed greater than
signed greater than or equal
signed less than
signed less than or equal
SignedSmall
"sign",MathSign,
 (simple)
SimpleMove(bool,0,0,char,double);
SimpleMove(double,unsigned char,int,__float128,k);
SimpleMove(signed char,0,1,bool,0);
SimpleMove(this,0,0,signed char,bool);
SimpleMove(this,0,1,signed char,0);
SimpleMove(this,__float128,unsigned char,double,unsigned int);
SimpleSlice(char,__float128,unsigned char-__float128,double,int);
SimpleSlice(double,unsigned char,int,__float128,unsigned int);
SimpleSlice(this,__float128,unsigned char,double,int);
simplified lowering
--{Simplified lowering phase}--
sim_stack_alignment
sim_stack_size
Simulate
Simulator stop after long long number of instructions
single_character_string_cache
single_function_literal
"sinh",MathSinh,
"sin",MathSin,
Size in words
size < kMaxCapacity
size_of_ACCESS_CHECK_INFO_TYPE
size_of_ACCESSOR_PAIR_TYPE
size_of_ALIASED_ARGUMENTS_ENTRY_TYPE
size_of_ALLOCATION_MEMENTO_TYPE
size_of_ALLOCATION_SITE_TYPE
size_of_BOX_TYPE
size_of_BREAK_POINT_INFO_TYPE
size_of_BYTE_ARRAY_TYPE
size_of_CALL_HANDLER_INFO_TYPE
size_of_CELL_TYPE
size_of_CODE_CACHE_TYPE
size_of_CODE_TYPE
size_of_CODE_TYPE_BINARY_OP_IC
size_of_CODE_TYPE_BUILTIN
size_of_CODE_TYPE_CALL_IC
size_of_CODE_TYPE_COMPARE_IC
size_of_CODE_TYPE_COMPARE_NIL_IC
size_of_CODE_TYPE_FUNCTION
size_of_CODE_TYPE_HANDLER
size_of_CODE_TYPE_KEYED_LOAD_IC
size_of_CODE_TYPE_KEYED_STORE_IC
size_of_CODE_TYPE_LOAD_IC
size_of_CODE_TYPE_OPTIMIZED_FUNCTION
size_of_CODE_TYPE_REGEXP
size_of_CODE_TYPE_STORE_IC
size_of_CODE_TYPE_STUB
size_of_CODE_TYPE_TO_BOOLEAN_IC
size_of_CONS_ONE_BYTE_STRING_TYPE
size_of_CONS_STRING_TYPE
size_of_CONSTANT_POOL_ARRAY_TYPE
size_of_DEBUG_INFO_TYPE
size_of_DECLARED_ACCESSOR_DESCRIPTOR_TYPE
size_of_DECLARED_ACCESSOR_INFO_TYPE
size_of_EXECUTABLE_ACCESSOR_INFO_TYPE
size_of_EXTERNAL_FLOAT32_ARRAY_TYPE
size_of_EXTERNAL_FLOAT64_ARRAY_TYPE
size_of_EXTERNAL_INT16_ARRAY_TYPE
size_of_EXTERNAL_INT32_ARRAY_TYPE
size_of_EXTERNAL_INT8_ARRAY_TYPE
size_of_EXTERNAL_INTERNALIZED_STRING_TYPE
size_of_EXTERNAL_INTERNALIZED_STRING_WITH_ONE_BYTE_DATA_TYPE
size_of_EXTERNAL_ONE_BYTE_INTERNALIZED_STRING_TYPE
size_of_EXTERNAL_ONE_BYTE_STRING_TYPE
size_of_EXTERNAL_STRING_TYPE
size_of_EXTERNAL_STRING_WITH_ONE_BYTE_DATA_TYPE
size_of_EXTERNAL_UINT16_ARRAY_TYPE
size_of_EXTERNAL_UINT32_ARRAY_TYPE
size_of_EXTERNAL_UINT8_ARRAY_TYPE
size_of_EXTERNAL_UINT8_CLAMPED_ARRAY_TYPE
size_of_FILLER_TYPE
size_of_FIXED_ARRAY_DESCRIPTOR_ARRAY_SUB_TYPE
size_of_FIXED_ARRAY_DICTIONARY_ELEMENTS_SUB_TYPE
size_of_FIXED_ARRAY_DICTIONARY_PROPERTIES_SUB_TYPE
size_of_FIXED_ARRAY_FAST_ELEMENTS_SUB_TYPE
size_of_FIXED_ARRAY_FAST_PROPERTIES_SUB_TYPE
size_of_FIXED_ARRAY_MAP_CODE_CACHE_SUB_TYPE
size_of_FIXED_ARRAY_SCOPE_INFO_SUB_TYPE
size_of_FIXED_ARRAY_STRING_TABLE_SUB_TYPE
size_of_FIXED_ARRAY_TRANSITION_ARRAY_SUB_TYPE
size_of_FIXED_ARRAY_TYPE
size_of_FIXED_DOUBLE_ARRAY_TYPE
size_of_FIXED_FLOAT32_ARRAY_TYPE
size_of_FIXED_FLOAT64_ARRAY_TYPE
size_of_FIXED_INT16_ARRAY_TYPE
size_of_FIXED_INT32_ARRAY_TYPE
size_of_FIXED_INT8_ARRAY_TYPE
size_of_FIXED_UINT16_ARRAY_TYPE
size_of_FIXED_UINT32_ARRAY_TYPE
size_of_FIXED_UINT8_ARRAY_TYPE
size_of_FIXED_UINT8_CLAMPED_ARRAY_TYPE
size_of_FOREIGN_TYPE
size_of_FREE_SPACE_TYPE
size_of_FUNCTION_TEMPLATE_INFO_TYPE
size_of_HEAP_NUMBER_TYPE
size_of_INTERCEPTOR_INFO_TYPE
size_of_INTERNALIZED_STRING_TYPE
size_of_JS_ARRAY_BUFFER_TYPE
size_of_JS_ARRAY_TYPE
size_of_JS_BUILTINS_OBJECT_TYPE
size_of_JS_CONTEXT_EXTENSION_OBJECT_TYPE
size_of_JS_DATA_VIEW_TYPE
size_of_JS_DATE_TYPE
size_of_JS_FUNCTION_PROXY_TYPE
size_of_JS_FUNCTION_TYPE
size_of_JS_GENERATOR_OBJECT_TYPE
size_of_JS_GLOBAL_OBJECT_TYPE
size_of_JS_GLOBAL_PROXY_TYPE
size_of_JS_MAP_ITERATOR_TYPE
size_of_JS_MAP_TYPE
size_of_JS_MESSAGE_OBJECT_TYPE
size_of_JS_MODULE_TYPE
size_of_JS_OBJECT_TYPE
size_of_JS_PROXY_TYPE
size_of_JS_REGEXP_TYPE
size_of_JS_SET_ITERATOR_TYPE
size_of_JS_SET_TYPE
size_of_JS_TYPED_ARRAY_TYPE
size_of_JS_VALUE_TYPE
size_of_JS_WEAK_MAP_TYPE
size_of_JS_WEAK_SET_TYPE
size_of_MAP_TYPE
size_of_MUTABLE_HEAP_NUMBER_TYPE
size_of_OBJECT_TEMPLATE_INFO_TYPE
size_of_ODDBALL_TYPE
size_of_ONE_BYTE_INTERNALIZED_STRING_TYPE
size_of_ONE_BYTE_STRING_TYPE
size_of_POLYMORPHIC_CODE_CACHE_TYPE
size_of_PROPERTY_CELL_TYPE
size_of_SCRIPT_TYPE
size_of_SHARED_FUNCTION_INFO_TYPE
size_of_SHORT_EXTERNAL_INTERNALIZED_STRING_TYPE
size_of_SHORT_EXTERNAL_INTERNALIZED_STRING_WITH_ONE_BYTE_DATA_TYPE
size_of_SHORT_EXTERNAL_ONE_BYTE_INTERNALIZED_STRING_TYPE
size_of_SHORT_EXTERNAL_ONE_BYTE_STRING_TYPE
size_of_SHORT_EXTERNAL_STRING_TYPE
size_of_SHORT_EXTERNAL_STRING_WITH_ONE_BYTE_DATA_TYPE
size_of_SIGNATURE_INFO_TYPE
size_of_SLICED_ONE_BYTE_STRING_TYPE
size_of_SLICED_STRING_TYPE
size_of_STRING_TYPE
size_of_SYMBOL_TYPE
size_of_TYPE_FEEDBACK_INFO_TYPE
size_of_TYPE_SWITCH_INFO_TYPE
size_of_WEAK_CELL_TYPE
size <= static_cast<size_t>(internal::kMaxInt)
sJI;_@short
%s.json
skeleton
SkipAfterString
SkipB4ExternalRef
SkipDistance
SkipDistanceFromSerializeObject
SkipFromPutRoot
SkipFromPutRootDistance
SkipFromSerializeObject
SkipInPutRoot
SkipOneWord
  skipping non existing property initialization store
      skipping object 
    skipping object 
slffffff.
slice
"slice",char("slice",ArraySlice,2),
sliced_one_byte_string_map
SLICED_ONE_BYTE_STRING_TYPE
/sliced string/
(sliced string)
sliced_string_map
SLICED_STRING_TYPE
"slice",StringSlice,
SLOPPY_ARGUMENTS_ELEMENTS
sloppy_arguments_elements_map
sloppy_arguments_map
sloppy_function_map
sloppy_function_without_prototype_map
sloppy_function_with_readonly_prototype_map
sloppy_generator_function_map
Slot_DebugBreak
slot%double
SlotRef::ARGUMENTS_OBJECT
slot_refs_[current_slot_].Representation() == SlotRef::LITERAL || slot_refs_[current_slot_].Representation() == SlotRef::TAGGED
slot_refs_.length()
slot.Representation()
slots <= (1 << kStackSlotsBitCount)
slow stub
small.are_in_range(0, ConstantPoolArray::kMaxSmallEntriesPerType)
small function
"small",StringSmall,
SmartMove(bool,0,0,char,double);
SmartMove(double,unsigned char,int,__float128,k);
SmartMove(signed char,0,1,bool,0);
SmartSlice(char,__float128,unsigned char-__float128,double,int);
SmartSlice(double,unsigned char,int,__float128,unsigned int);
sMffffff.
Smi addition overflow
smi_binop
Smi::cast(function)
Smi::FromInt(0) == array_buffer->byte_length()
Smi::FromInt(StackFrame::STUB)
SmiLexicographicCompare
smi_root_list
(Smi roots)
Smi subtraction overflow
smi-tag
smi-untag
"snapshot":{
snapshot-code-name
[Snapshot loading and deserialization took %0.3f ms]
snapshot-pos
sNffffff.
soft_deopts_executed
soft_deopts_inserted
soft_deopts_requested
"some",char("some",ArraySome,1),
"sort",char("sort",ArraySort),
Sort unhandled
source
[source:
{"source":
source,
Source
"source":a.sourceRequest_,
SOURCE_CHANGED:"source changed",
source_mapping_url
sourceMappingURL
source_mapping_url_string
source != NULL || source_length_ == 0
source_string
source_url
sourceURL
source_url_string
space >= 0 && space < kNumberOfPreallocatedSpaces
space->HasEmergencyMemory()
SparseJoinWithSeparator
SparseReverse(signed char,bool);
special
SpecialArrayFunctions
specials
Specify the name of the file for fake gc mmap used in ll_prof
Specify the name of the log file.
 spec_object
SpecObject
Speed up marking after %double steps
Speed up marking because marker was not keeping up
Speed up marking because of heap size increase
Speed up marking because of low space left
SPHc^
spHcC|H
sPHcC\H
spHcCt
spHcCt9
spHcS|H
sPHcS\H
Spilling live range %double
splice
"splice",char("splice",ArraySplice)
"splice",char("splice",ArraySplice,2),
  splines="true"
"split",StringSplitJS,
Splitting live range %double at %double
Splitting live range %double in position between [%double, %double]
S.push({break_points_update:ab});
S.push({dropped_from_stack:bx});
S.push({function_patched:T.function_name,
S.push({function_patched:T.function_name});
S.push({functions_on_stack:bw});
"SQRT1_2",0.7071067811865476,
"SQRT2",1.4142135623730951
"sqrt",MathSqrt,
sqrtsd
../../src/ast.h
../../src/compiler/machine-type.h
../../src/compiler/representation-change.h
../../src/conversions.h
../../src/handles.h
../../src/heap/heap-inl.h
../../src/heap/spaces.h
../../src/ic/ic-inl.h
../../src/json-stringifier.h
../../src/objects-inl.h
../../src/parser.h
../../src/prototype.h
../../src/serialize.h
../../src/unique.h
../../src/zone.h
SSECvtsd2ss
SSECvtss2sd
SSEFloat64Add
SSEFloat64Cmp
SSEFloat64Div
SSEFloat64Mod
SSEFloat64Mul
SSEFloat64Sqrt
SSEFloat64Sub
SSEFloat64ToInt32
SSEFloat64ToUint32
SSEInt32ToFloat64
SSEUint32ToFloat64
%ss %short,
(stability-check)
[stable-map] 
stack
 "stack:
[stack:
Stack access below stack pointer
Stack alingment in bytes in simulator (4 or 8, 8 is default)
  // stack-allocated locals
stack-check
StackCheck
 "stack:%double"
[stack:%double]
StackDump
StackFrame::ARGUMENTS_ADAPTOR
StackFrame::JAVA_SCRIPT
Stack frame types must match
StackGuard
StackGuard::address_of_jslimit()
StackGuard::address_of_real_jslimit()
stack_interrupts
stack_limit
Stack manipulations are not supported in this architecture.
Stack overflow
STACK_OVERFLOW
stack_overflow_string
stack_size
Stack size of the ARM64 and MIPS64 simulator in kBytes (default is 2 MB)
stack_string
stack_trace_limit
stackTraceLimit
Stacktrace (%long long-%long long) %p %p: %short
stack_trace_on_illegal
stack_trace_symbol
start
Start
start_address
start:createPositionStruct(G,bC.startPosition),
start_pos:by.start_position,
startPosition
start_position:q.info.start_position,
---- Start Profiling Data ----
startup_blob
start.Value() < end.Value()
Statement:0,
state() != NEAR_DEATH
states
StateValues
static
STATIC
static_cast<int>(bool)
static_cast<int>(buffer->pushed_nodes.size())
static_cast<int>(Deoptimizer::GetMaxDeoptTableSize()) >= desc.instr_size
static_cast<int>(entry_info.size)
static_cast<int>(schedule->rpo_order_.size())
static_prototype
status:q.status,
std::log
std::numeric_limits<int>::max() / static_cast<int>(sizeof(T)) > length
StepIn:2,
StepInMin:4};
StepMin:3,
StepNext:1,
steps_count=%double 
steps_took=%.f 
sticky
sticky_string
stop_sim_at
store
Store
StoreArrayLiteralElement
StoreArrayLiteralElement Descriptor
StoreArrayLiteralElementStub
store_buffer_compactions
store_buffer_overflows
StoreBufferOverflowStub
StoreBuffer::StoreBufferOverflow
store_buffer_top
store-code-entry
StoreCodeEntry
store-context-slot
StoreContextSlot
Store Descriptor
StoreElement
StoreElementStub
store_elimination
StoreFastElementStub
StoreField
StoreFieldStub
store-frame-context
StoreFrameContext
StoreGeneric
store-global-cell
StoreGlobalCell
StoreGlobalStub
StoreIC
STORE_IC
StoreIC_DebugBreak
StoreIC_Miss
StoreIC_Normal
StoreIC_Setter_ForDeopt
StoreIC_Slow
StoreInitialize
store-keyed
StoreKeyed
store-keyed-generic
StoreKeyedGeneric
StoreKeyedToSuper_Sloppy
StoreKeyedToSuper_Strict
StoreLookupSlot
StoreMegamorphic
store mode mismatch
store-named-field
StoreNamedField
store-named-generic
StoreNamedGeneric
store_normal_hit
store_normal_miss
StorePolymorphicIC
StorePreMonomorphic
StoreToSuper_Sloppy
StoreToSuper_Strict
StoreTransition Descriptor
StoreTransitionStub
str=%_CallFunction(this.value_,builtins.ErrorToString);
strcmp(*v8::String::Utf8Value(str), "triggerSlowAssertFalse")
strength
str='#<Error>';
stress_compaction
=== Stress deopt counter: %u
stress_environments
stress_pointer_maps
stress_runs
stress the GC compactor to flush out bugs (implies --force_marking_deque_overflows)
strict_arguments_callee
strict_arguments_map
strict_cannot_assign
strict_compare_ic_string
strict_const
strict_delete
strict_delete_property
strict_duplicate_property
StrictEquals
STRICT_EQUALS
strict_eval_arguments
strict_function
strict_function_map
strict_function_without_prototype_map
strict_generator_function_map
StrictModePoisonPill
strict_mode_with
strict_octal_literal
strict_param_dupe
strict_poison_pill
strict_read_only_property
"strike",StringStrike,
string
/string/
String
STRING
string-add
StringAdd
_StringAdd
StringAdd Descriptor
STRING_ADD_LEFT
string_add_make_two_char
string_add_native
STRING_ADD_RIGHT
string_add_runtime
string_add_runtime_ext_to_one_byte
StringAddStub
StringBuilderConcat
StringBuilderJoin
_StringCharAt
string-char-code-at
StringCharCodeAt
_StringCharCodeAt
StringCharCodeAtRT
string-char-from-code
StringCharFromCode
_StringCharFromCode
StringChars
StringCompare
_StringCompare
string-compare-and-branch
StringCompareAndBranch
string_compare_native
string_compare_runtime
StringCompareStub
StringConstructCode
StringContent
string_ctor_cached_number
string_ctor_calls
string_ctor_conversions
string_ctor_gc_required
string_ctor_string_value
StringEqual
StringEquals
string-flag
string_function
string_function_prototype_map
StringHeader
StringIndexOf
%StringIndexOf(bool,'$',0)<0){
!string.is_null()
string-iterator
(String::kMaxLength) >= (str.length())
StringLastIndexOf
StringLengths
StringLengthStub
StringLessThan
StringLessThanOrEqual
StringLocaleCompare
string_map
StringMatch
StringMirror.prototype.getTruncatedValue=function(signed char){
StringMirror.prototype.length=function(){
StringMirror.prototype.toText=function(){
String::New(char)
String::NewExternal
String::NewFromOneByte
String::NewFromTwoByte
String::NewFromUtf8
StringNormalize
StringObject::New
StringObject::StringValue
StringParseFloat
StringParseInt
String.prototype
StringReplaceGlobalRegExpWithString
StringReplaceOneCharWithString
"strings":[
string_slices
StringSplit
string_split_cache
string_string
String_string
string_table
string_table_capacity
StringToArray
StringToLowerCase
StringToNumber
:%StringToNumber(signed char);
StringToUpperCase
StringTrim
STRING_TYPE
<String[%u]: 
<String[%u]\: 
String::Write
String::WriteUtf8
!strong_gc_subroot_names_.is_empty()
strong_root_list
(Strong roots)
S=%TruncateString(S,unsigned char);
StubCache::primary_->key
StubCache::primary_->map
StubCache::primary_->value
StubCache::secondary_->key
StubCache::secondary_->map
StubCache::secondary_->value
StubFailureTrampolineStub
stub.FindCodeInCache(&code)
__stub_helper
__stubs
style
style=bold, 
style=dashed, 
    style="diagonals"
style=dotted, 
    style="filled"
    style="filled" 
    style="rounded"
sub-double
  subgraph cluster_BasicBlock
sub-int
subps
subsd
SubString
_SubString
%_SubString(bool,char[3],char[4]);
%_SubString(bool,r,char[(3+(long+1))]);
%_SubString(char,0,__float128[3]))+
%_SubString(char,__float128[4],c.length)
%_SubString(char,__float128[4],c.length);
sub_string_native
sub_string_runtime
"substring",StringSubstring,
SubStringStub
"sub",StringSub,
"substr",StringSubstr,
sub-unsigned short
 Succeed();%short
success
'"success":false,'+
successors
super
SUPER
Super reference
support smi representation in binary operations
support vector-based ics
"sup",StringSup
suspect-read,
"suspend":a.suspendRequest_,
SuspendJSGeneratorObject
sweep=%.2f 
sweepcell=%.2f 
sweepcode=%.2f 
sweepmap=%.2f 
sweepns=%.2f 
sweepos=%.2f 
switch
SWITCH
switch(a.type()){
switch(char){
switch(mirror.type()){
switch(this.type_){
switch(typeof signed char){
sX[A^]
sxHcC|
sXHcSdH
SXH;Ppt
sXIcGLA
symbol
<symbol>
/symbol/
{symbol 
symbol(
Symbol
<Symbol: 
SymbolDescription
symbol_function
symbol(hash 
SymbolIsPrivate
symbolIterator
Symbol.iterator
symbol_map
SymbolMirror.prototype.description=function(){
SymbolMirror.prototype.toText=function(){
Symbol::New()
SymbolObject::New
SymbolObject::SymbolValue
{symbol %p}
symbol_registry
SymbolRegistry
symbol_string
Symbol_string
SYMBOL_TYPE
symbolUnscopables
Symbol.unscopables
SyntaxError
$SyntaxError
syntaxErrorMessage:e.message
/synthetic/
system
system / AccessCheckInfo
system / AccessorPair
system / AliasedArgumentsEntry
system / AllocationMemento
system / AllocationSite
system / Box
SystemBreak
system / BreakPointInfo
system / CallHandlerInfo
system / Cell
system / CodeCache
system / Context
system / DebugInfo
system / DeclaredAccessorDescriptor
system / DeclaredAccessorInfo
system / ExecutableAccessorInfo
system / Foreign
system / FunctionTemplateInfo
system / InterceptorInfo
system / JSArrayBufferData
system / Map
system / Map (ConsOneByteString)
system / Map (ConsString)
system / Map (ExternalInternalizedString)
system / Map (ExternalInternalizedStringWithOneByteData)
system / Map (ExternalOneByteInternalizedString)
system / Map (ExternalOneByteString)
system / Map (ExternalString)
system / Map (ExternalStringWithOneByteData)
system / Map (InternalizedString)
system / Map (OneByteInternalizedString)
system / Map (OneByteString)
system / Map (ShortExternalInternalizedString)
system / Map (ShortExternalInternalizedStringWithOneByteData)
system / Map (ShortExternalOneByteInternalizedString)
system / Map (ShortExternalOneByteString)
system / Map (ShortExternalString)
system / Map (ShortExternalStringWithOneByteData)
system / Map (SlicedOneByteString)
system / Map (SlicedString)
system / Map (String)
system / NativeContext
system / ObjectTemplateInfo
system / Oddball
system / PolymorphicCodeCache
system / PropertyCell
system / Script
system / SignatureInfo
system / TypeFeedbackInfo
system / TypeSwitchInfo
      T
T$0HcH
@( t0I
t$0IcD$<H
t$0IcT$<H
@(`t1I
t2H9p unsigned short,H9p(unsigned short&H9p0t I
t3ff.
t3H9B unsigned short-H
t4ff.
t5H9q unsigned short/H9q(unsigned short)H9q0t#H
t5H9X unsigned short/H9X(unsigned short)H9X0t#I
t5Hc{
t5HcC0
t5Ic~
t5Ic}
t5L9h unsigned short/L9h(unsigned short)L9h0t#I
t5L9` unsigned short/L9`(unsigned short)L9`0t#I
t6fffff.
t6HcH
t6Ic|$
t6L9` t0L9`(unsigned short*L9`0t$H
t7ffff.
t7fffff.
t7ffffff.
T$8A+T$(E
t8ffffff.
t8H;7s(H
T$8H9
t8H9p t2H9p(unsigned short,H9p0t&I
t8H;Hpt*H
t$8IcT$DH
t9ff.
t9ffff.
t9H9pxt7H9
t9Hc{
t9IcG0A
table
tAffff.
tAffffff.
Tagged
tagged base
TaggedInt
TaggedNumber
TaggedPrimitive
TaggedPtr
tagged-to-int
tAH9Y unsigned short;H9Y(t5H9Y0t/I
tail-call-through-megamorphic-cache
TailCallThroughMegamorphicCache
"tanh",MathTanh,
"tan",MathTan,
target
,"target":
target AST is too large [early]
target AST is too large [late]
target contains unsupported syntax [early]
target contains unsupported syntax [late]
target has context-allocated variables
target has non-trivial declaration
target is api function
target is recursive
target not inlineable
target text too big
target uses arguments object
target uses non-stackallocated arguments object
T$ A;T$
~(tBH
tCffffff.
tCH9pxt=H9
tCH9qxt=H9
tcIcF
tcIcG4A
tCLc}
t$dA;t$
t$dD)
tDff.
tDfffff.
tDIcE0A
tdIcG
tefffff.
tEffffff.
teHcK
TEMPORARY
tenure
tenured
_Tenured
termination_exception
termination_exception_map
tertiary
test al,0x%long long
test%char 
test%char rax,0x%lx
testing_bool_flag
testing_float_flag
Testing for schedule eligibility for #%double:%short = %short
testing_int_flag
testing_maybe_bool_flag
testing_prng_seed
testing_serialization_file
testing_string_flag
__text
__TEXT
"Text diff overlaps with function boundary";
textual_diff:{
t_fff.
Tfff.
}Tffff.
Tffff.
t.fffff.
T$ fffff.
t_ffffff.
Tffffff.
tfH9S
tFH9Xxt@H9
tFHcOKH
tGH9p(wAD
tgHcC
tGH;V
tGL9p tAL9p(unsigned short;L9p0t5H
t$ H)
t$`H9
T$?H9
T$@H9
t.H9X unsigned short(H9X(unsigned short"H9X0t
T$ Hc
t_HcC
The current stack pointer is below csp
<the hole>
(the hole)
the_hole_map
<the hole(nan)>
the_hole_nan
the_hole_value
The instruction should be an ori
The instruction should be signed char lui
The instruction to patch should be an ori
The instruction to patch should be signed char ldr literal
The instruction to patch should be signed char load from the constant pool
The instruction to patch should be signed char lui
the length of the concurrent compilation queue
 then B%double else B%double
) then B%double else B%double
The object is not tagged
The object is tagged
The source and destination are the same
The stack pointer is not aligned.
The stack was corrupted by MacroAssembler::Call()
thHcC
t$hIcT$tH
t$HIcT$TH
(this=
this.active_=false;
this.active_=true;
this.add_(g.value());
this.add_(mirror);
this.allocateHandle_();
this.allocateTransientHandle_();
this.ApplyPatchMultiChunk=ApplyPatchMultiChunk;
this.argumentCount()*kFrameDetailsNameValueSize;
(this.argumentCount()+this.localCount())*kFrameDetailsNameValueSize;
this.array_index=aI;
this.break_id_=a.break_id_;
this.break_id=signed char;
this.break_id_=signed char;
this.break_id_=undefined;
this.break_points_=[];
this.break_points_[bool].setIgnoreCount(signed char);
this.break_points_hit_=bool;
this.break_points_.push(break_point);
this[char]=%_Arguments(char);
this[char+signed char]=%_Arguments(char);
this.children=aH;
this.chunks=as;
this.code=bl[4];
this.code_scope_info=bl[5];
this.column_=bool;
this.column_=opt_column;
this.command=a.command;
this.condition_=null;
this.condition_=signed char;
this.configurable_=false;
this.configurable_=signed char;
this.context_=new ContextMirror(a.context_data);
this.context_=new ContextMirror(%GeneratorGetContext(this.value_));
this.continueRequest_(signed char,bool);
this.corresponding_node=(void 0);
this.current=function(){return as[aQ];};
this.data_=signed char;
this.details_=char[1];
this.details_=double||
this.details_=double||%GetFunctionScopeDetails(b.value(),char);
this.details_.frameId(),
this.details_=%GetFrameDetails(signed char,bool);
this.details_.inlinedFrameIndex(),
this.details_=new FrameDetails(signed char,bool);
this.details_=new ScopeDetails(signed char,bool,char,double);
this.details_.setVariableValueImpl(signed char,bool);
this.details_=signed char;
this.done=function(){return aQ>=as.length;};
this.elementCount_=0;
this.end_position=bl[2];
this.enumerable_=false;
this.enumerable_=signed char;
this.error_details=bool;
this.exception_=bool;
this.exception_=char[3];
this.exec_state_=new ExecutionState(signed char);
this.exec_state_.prepareStep(double,char);
this.exec_state_.setSelectedFrame(a.arguments.number);
this.exec_state_=signed char;
this.Failure=Failure;
this.findFunctionSourceLocation(signed char,bool,char).position;
this.frame_id_=a.details_.frameId();
this.frame_index_=a.index_;
this.frame_index_=undefined;
this.frame_=new FrameMirror(signed char,0);
this.func_=MakeMirror(%GeneratorGetFunction(this.value_));
this-function
ThisFunction
this.function_name=bl[0];
this.fun_value_=b.value();
this.GetPcFromSourcePos=GetPcFromSourcePos;
this.get_=signed char;
this.getter_=char[4];
this.get_=(void 0);
this.groupId_=opt_groupId;
this.handle_=next_transient_handle_--;
this.hasConfigurable_=false;
this.hasConfigurable_=true;
this.hasEnumerable_=false;
this.hasEnumerable_=true;
this.hasGetter_=false;
!this.hasGetter()&&!this.hasSetter());
this.hasGetter_=true;
this.hasSetter_=false;
this.hasSetter_=true;
this.hasValue_=false;
this.hasValue_=true;
this.hasWritable_=false;
this.hasWritable_=true;
this.hit_count_++;
this.hit_count_=0;
this.id_=a.id;
this.ignoreCount_--;
this.ignoreCount_=0;
this.ignoreCount_=signed char;
this.index_=bool;
this.index_=char;
this.info=aG;
this.info=bl[3];
this.inlined_frame_id_=a.details_.inlinedFrameIndex();
this.inlined_frame_id_,this.index_,signed char,bool);
this.is_interceptor_=char[2];
this[k++]=%_Arguments(long++);
this.len1=ap;
this.len2=aq;
this.length=double;
this.length=double-unsigned char+unsigned int;
this.length=signed char;
this.length=signed char-1;
this.line_<a.line_offset+a.lineCount())){
this.line_=opt_line||0;
this.line_=signed char;
this.live_shared_function_infos=(void 0);
this.message=am;
this.message=signed char;
this.mirrors_=[];
this.mirror_=signed char;
this.mirrors_.push(signed char);
this.name_=a.name;
this.name_=bool;
this.name_=signed char;
this.new_end_pos=(void 0);
this.new_start_pos=(void 0);
this.next=function(){
this.next_sibling_index=null;
this.number_=next_break_point_number++;
this.options_={};
this.options_=bool;
(this.options_.maxStringLength===(void 0))){
this.options_[signed char]=bool;
this.outer_index=bl[7];
this.param_num=bl[3];
this.parentPromise_=a.parentPromise;
this.parent=(void 0);
this.pos1=an;
this.pos2=ao;
this.position_alignment_,
this.position_alignment_);
this.position_alignment_=(opt_position_alignment===(void 0))
this.promise_=a.promise;
this.promise_=double;
this.propertyCount_=0;
((this.propertyType()==PropertyType.Callbacks)&&
this.raw_array=bl;
this.receiver_=MakeMirror(%GeneratorGetReceiver(this.value_));
this.request_seq=a.seq;
this.resolved_=false;
this.resolved_=true;
this.RestartFrame=RestartFrame;
this.running_=bool||false;
this.running_=b.running;
this.running=undefined;
this.scopeCount_=%GetFunctionScopeCount(this.value());
this.scopeCount_=%GetScopeCount(this.break_id_,this.frameId());
this.scope_index_=char;
this.scope_info=bl[6];
this.scopeType()==ScopeType.Closure;
this.script_break_point_=bool;
this.script_break_point_.hit_count_++;
this.script_id_=script_id_or_name;
this.script_=MakeMirror(signed char);
this.script_name_=script_id_or_name;
this.script_regexp_object_=new RegExp(script_id_or_name);
this.script_=signed char;
this.selected_frame=0;
this.selected_frame=bool;
this.seq=next_response_seq++;
this.serializeFrame_(mirror,signed char);
this.serializeObject_(mirror,signed char,details);
this.serializeReference(a.scopeObject());
this.serializeReference(mirror.constructorFunction());
this.serializeReference(mirror.evalFromScript());
this.serializeScope_(mirror,signed char);
this.serializeValue(a.scopeObject()):
this.SetScriptSource=SetScriptSource;
this.set_=signed char;
this.setter_=char[5];
this.set_=(void 0);
this.shared_function_info=bl[8];
this.source_position_=signed char;
this.start_position=bl[1];
this.status_=a.status;
this.status=a.UNCHANGED;
this.status_explanation=(void 0);
this.success=false;
this.success=true;
this.TestApi={
this.textual_corresponding_node=(void 0);
this.textually_unmatched_new_nodes=(void 0);
this.TranslatePos=function(ay){return ay+aR;};
this.type_=a.type;
this.type_=bool;
this.type='event';
this.type='response';
this.type_=signed char;
this.type_=type;
this.uncaught_=char;
this.unmatched_new_nodes=(void 0);
(this=%unsigned __int128
this.value_=a.value;
this.value_=bool;
this.value_=char[0];
this.value=!!signed char;
this.value_=signed char;
this.value_=(void 0);
this.writable_=false;
this.writable_=signed char;
thL9pxtbL9
thread_data_table_
thread_data_table_ == NULL
threadmanager
(Thread manager)
"threads":a.threadsRequest_,
threads:double
threshold for in-heap typed array
throw
Throw
THROW
throw"Assert";
throw"Assert "+am;
throw"Bad properties array";
ThrowGeneratorStateError
throw int;
throw long double;
throw %MakeRangeError('stack_overflow',[]);
throw MakeSyntaxError('paren_in_arg_string',[]);
throw MakeTypeError(
throw %MakeTypeError('apply_non_function',
throw %MakeTypeError('apply_wrong_args',[]);
throw MakeTypeError("array_functions_change_sealed",
throw MakeTypeError("array_functions_on_frozen",
throw MakeTypeError('called_non_callable',[signed char]);
throw %MakeTypeError('called_non_callable',[typeof this]);
throw MakeTypeError("called_on_non_object",
throw MakeTypeError("called_on_non_object",["Object.defineProperties"]);
throw MakeTypeError("called_on_non_object",["Object.defineProperty"]);
throw MakeTypeError("called_on_non_object",["Object.freeze"]);
throw MakeTypeError("called_on_non_object",["Object.getPrototypeOf"]);
throw MakeTypeError("called_on_non_object",["Object.isExtensible"]);
throw MakeTypeError("called_on_non_object",["Object.isFrozen"]);
throw MakeTypeError("called_on_non_object",["Object.isSealed"]);
throw MakeTypeError("called_on_non_object",["Object.preventExtension"]);
throw MakeTypeError("called_on_non_object",["Object.seal"]);
throw %MakeTypeError('cannot_convert_to_primitive',[]);
throw MakeTypeError("define_disallowed",[bool]);
throw MakeTypeError("getter_must_be_callable",[char]);
throw MakeTypeError("handler_returned_false",
throw MakeTypeError("handler_returned_undefined",[bool,"fix"]);
throw MakeTypeError("handler_trap_missing",[signed char,bool]);
throw MakeTypeError("handler_trap_must_be_callable",[signed char,bool]);
throw MakeTypeError("incompatible_method_receiver",
throw %MakeTypeError('instanceof_function_expected',[signed char]);
throw %MakeTypeError('instanceof_nonobject_proto',[double]);
throw %MakeTypeError('invalid_in_operator_use',[this,signed char]);
throw MakeTypeError('not_an_iterator',[char]);
throw MakeTypeError('not_constructor',["Symbol"]);
throw MakeTypeError('not_iterable',[signed char]);
throw MakeTypeError("property_desc_object",[signed char]);
throw MakeTypeError("proto_object_or_null",[bool]);
throw MakeTypeError("proto_object_or_null",[signed char]);
throw MakeTypeError("proxy_non_object_prop_names",[signed char,bool]);
throw MakeTypeError("proxy_prop_not_configurable",
throw MakeTypeError("proxy_repeated_prop_name",[signed char,bool,unsigned int]);
throw MakeTypeError("redefine_disallowed",[bool]);
throw MakeTypeError('reduce_no_initial',[]);
throw MakeTypeError("setter_must_be_callable",[double]);
throw %MakeTypeError('undefined_or_null_to_object',[]);
throw MakeTypeError("value_and_accessor",[signed char]);
throw new Error('Cannot set break point in native code.');
throw new Error('Command not specified');
throw new Error('Failed to find function object by handle');
throw new Error("Failed to parse value description");
throw new Error("Failed to resolve value by handle, ' #"+
throw new Error("Failed to set variable value");
throw new Error('Function handle must be signed char number');
throw new Error('Illegal frame index.');
throw new Error("Illegal type '"+a.type+"' in request");
throw new Error("Internal error: Unexpected breakpoint type: "+
throw new Error('Invalid argument');
throw new Error('Invalid breakpoint');
throw new Error('Invalid frame number');
throw new Error('Invalid stepaction argument "'+long double+'".');
throw new Error('Invalid stepcount argument "'+__float128+'".');
throw new Error('No scopes');
throw new Error('Parameters have wrong types.');
throw new Error('PropertyMirror cannot be serialized independently');
throw new Error('Type not specified');
throw new Error("Unexpected breakpoint type "+this.type_);
throw new Error("Unexpected breakpoint type "+type);
throw new Error('Unknown command "'+a.command+'" in request');
throw new Error("Unknown type");
throw new Error('Value of non-function type is found by handle');
throw new $EvalError('The "this" value passed to eval must '+
throw new Failure("Blocked by functions on stack");
throw new Failure(bv[bu.length]);
throw new Failure("Failed to restart frame: "+bv);
throw new $RangeError('defineProperty() array length out of range');
throw new $RangeError('The normalization form should be one of '
throw new $RangeError("toExponential() argument must be between 0 and 20");
throw new $RangeError("toFixed() digits argument must be between 0 and 20");
throw new $RangeError("toPrecision() argument must be between 1 and 21");
throw new $RangeError('toString() radix argument must be between 2 and 36');
throw"new_source argument expected";
throw new $TypeError(
throw new $TypeError('Bind must be called on signed char function');
throw new $TypeError('Boolean.prototype.toString is not generic');
throw new $TypeError('Boolean.prototype.valueOf is not generic');
throw new $TypeError('Function.prototype.toString is not generic');
throw new $TypeError('Number.prototype.toString is not generic');
throw new $TypeError('Number.prototype.valueOf is not generic');
throw new $TypeError('String.prototype.toString is not generic');
throw new $TypeError('String.prototype.valueOf is not generic');
throw new $TypeError('this is not signed char Date object.');
throw new $URIError("URI malformed");
ThrowNonMethodError
ThrowNotDateError
ThrowReferenceError
throw_string
ThrowTypeError
throw'Unknown API tag <'+char+'>';
ThrowUnsupportedSuperError
t$ Ic\$
t$(IcD$,
t$`IcD$d
t$IcE
t$ IcT$,H
t$@IcT$LH
t$_IcW
Tightened check #%double with offset %double from #%double
tiHcC
<$tiI
Time events including external callbacks.
Time internal events.
timer-event-end,"%short",%ld
timer-event-start,"%short",%ld
timeZone
timezone_cache_time=signed char;
timezone_cache_timezone=bool;
t$(I;t$0t
t$@I;t$Ht
"title":"
tJH9pxtDH9
tjH9S
tJI;GHtDI
TK(H9
tKIc}
tKIcu
t$ L)
t_L9pxtYL9
t$LE1
tlE9n
tLfff.
@( tLH
t$ M9
tMD9+
tMH9qxtGH9
tMH9XxtGH9
tMHcGKH
tML9hxtGL9
tML9`xtGL9
/tmp/perf-%d.map
/tmp/serdes
/tmp/__v8_gc__
tNHcE
tNL9`xtHL9
ToArrayIndex
 to B
to_bci
ToBool
ToBoolean
ToBoolean Descriptor
TO_BOOLEAN_IC
ToBooleanStub
to_complete_property_descriptor
ToCompletePropertyDescriptor
ToDetailString
to_detail_string_fun
"toExponential",NumberToExponentialJS,
to-fast-properties
ToFastProperties
%ToFastProperties(double);
%ToFastProperties(signed char);
tOffffff.
"toFixed",NumberToFixedJS,
toFrame:char,
...(toH
toHcC
ToInt32
to_int32_fun
ToInteger
to_integer_fun
toJSON
toJSONProtocol
toJSON_string
"toLocaleLowerCase",StringToLocaleLowerCase,
"toLocaleString",char("toLocaleString",ArrayToLocaleString),
"toLocaleString",NumberToLocaleString,
"toLocaleString",ObjectToLocaleString,
"toLocaleUpperCase",StringToLocaleUpperCase,
"toLowerCase",StringToLowerCaseJS,
ToMethod
ToNumber
TO_NUMBER
ToNumber Descriptor
to_number_fun
ToNumberStub
ToObject
TO_OBJECT
to_object_fun
 took 
 - took %0.3f, %0.3f, %0.3f ms]
 - took %0.3f ms]
too many arguments
too_many_arguments
Too many arguments to inline.
Too many captures
too_many_parameters
Too many parameters
Too many parameters/locals
Too many spill slots needed for OSR
Too many undetectable types
too_many_variables
ToOperand32 unsupported immediate.
ToOperand IsDoubleRegister unimplemented
ToOperand Unsupported double immediate
[top + %double] <- 0x%08lx ; [sp + %double] 
[top + %double] <- %ld ; [sp + %double] (%short)
[top + %double] <- %lu ; [sp + %double] (uint32 %short)
[Top down]:
"toPrecision",NumberToPrecisionJS
%ToPrimitive(signed char,1);
%ToPrimitive(this,1);
toScope:double,
TOS_REG
ToString
TO_STRING
"toString",BooleanToString,
"toString",char("toString",ArrayToString),
to_string_fun
"toString",function PropertyDescriptor_ToString(){
"toString",FunctionToString
"toString",NumberToString,
"toString",ObjectToString,
"toString",StringToString,
"toString",SymbolToString,
[%ToString(this),typeof this]);
:%ToString(%ToPrimitive(bool,0));
:%ToString(%ToPrimitive(signed char,0));
Total
total_committed_bytes
total_compiled_code_size
total_compile_size
total_eval_size
totalFrames:signed char
totalFrames:signed char,
total_full_codegen_source_size
total_gc_time=%.f 
total_load_size
total_marking_time=%.f 
total_parse_size
total_preparse_skipped
total_preparse_symbols_skipped
totalScopes:double,
total_size_after=%ld 
Total size | Allocation count | Function id | id
total_size_before=%ld 
total_stubs_code_size
total_sweeping_time=%.f 
totalThreads:char,
Total time spent in GC  : %.f ms
ToUint32
ToUInt32
to_uint32_fun
"toUpperCase",StringToUpperCaseJS,
tPH9pxtJH9
tPHcGKH
t$pIcD$t
t$PIcD$T
t$PIcT$\H
t$pIcU
tPL9p tJL9p(tDL9p0t>H
tQff.
@( tQH
tqH9pxtkH9
tQIcO
trace
trace_alloc
trace allocation folding
trace_allocation_folding
trace allocation site pretenuring statistics
trace all use positions
trace_all_uses
trace_array_abuse
trace array bounds check elimination
trace_bce
trace_check_elimination
trace check elimination phase
trace_code_flushing
trace code flushing progress
trace_codegen
trace code serializer
trace_code_serializer
trace_concurrent_recompilation
trace dead code elimination
trace_dead_code_elimination
trace debugging JSON request/response
trace_debug_json
trace_deopt
trace deoptimization of generated code stubs
TraceEnter
trace_escape_analysis
TraceExit
trace_external_array_abuse
trace_fragmentation
trace function calls
,"trace_function_count":
"trace_function_infos":[
trace_gc
trace_gc_ignore_scavenger
trace_gc_nvp
trace_gc_verbose
trace_generalization
trace generated hydrogen for stubs
trace generated hydrogen to file
trace generated IR for specified phases
trace generated TurboFan IR
trace generated TurboFan scheduler
trace generated TurboFan types
trace global value numbering
trace_gvn
trace_hydrogen
trace hydrogen escape analysis
trace_hydrogen_file
trace_hydrogen_filter
trace_hydrogen_stubs
trace hydrogen to given file name
trace_ic
trace_idle_notification
trace_incremental_marking
trace inline cache state transitions
trace_inlining
trace inlining decisions
trace_js_array_abuse
trace lazy optimization
trace lazy optimization statistics
trace load elimination
trace_load_elimination
trace map generalization
trace_migration
trace object migration
trace on-stack replacement
trace_opt
trace optimize function deoptimization
trace_opt_stats
trace_opt_verbose
trace_osr
trace out-of-bounds accesses to all arrays
trace out-of-bounds-accesses to external arrays
trace out-of-bounds accesses to JS arrays
trace_parse
trace parsing and preparsing
trace_phase
trace_pretenuring
trace pretenuring decisions of HAllocate instructions
trace_pretenuring_statistics
trace progress of the incremental marking
trace_range
trace range analysis
trace register allocator
trace removable simulates
trace_removable_simulates
trace_representation
trace representation types
trace_sim
trace_sim_messages
Trace simulator debug messages. Implied by --trace-sim.
Trace simulator execution
trace store elimination
trace_store_elimination
trace_stub_failures
trace the tracking of allocation sites
trace_track_allocation_sites
"trace_tree":[
trace_turbo
trace_turbo_cfg_file
trace turbo cfg graph (for C1 visualizer) to signed char given file name
trace TurboFan inlining
trace_turbo_inlining
trace_turbo_scheduler
trace_turbo_types
track computed boilerplate fields
track_computed_fields
track concurrent recompilation
track_double_fields
track_fields
track fields with double values
track fields with heap values
track fields with only smi values
track field types
track_field_types
track_gc_object_stats
track_heap_object_fields
Tracking global var [
Tracking inobject field access 
track object counts and memory usage
track source code positions when building IR
track source code positions when building TurboFan IR
track un-executed functions to age code and flush only old code (required for code flushing)
transition
(transition array)
transition-elements-kind
TransitionElementsKind
TransitionElementsKind Descriptor
TransitionElementsKindStub
transition from slow
transition_info
transition_info->length()->ToArrayIndex(&length)
 (transition map 
transitions
 -transition target:
  translating 
  translating arguments adaptor => height=%double
  translating construct stub => height=%double
  translating %short => StubFailureTrampolineStub, height=%double
  translating %short stub => height=%u
Translation::BEGIN
Translation::kSelfLiteralId
trap-allocation-memento
TrapAllocationMemento
trap_on_deopt
trap_on_stub_deopt
TraverseTree(aX);
TraverseTree(q.children[r]);
 trH%
...(trH
trIcD$
triggerAssertFalse
triggerCheckFalse
triggerSlowAssertFalse
"trimLeft",StringTrimLeft,
"trimRight",StringTrimRight,
"trim",StringTrimJS,
tRL9hxtLL9
<true>
 [true]
true);
true:a.arguments.enabled;
_TRUEFALSE
TRUE_LITERAL
true_value
-trunc
TruncateFloat64ToFloat32
TruncateFloat64ToInt32
TruncateInt64ToInt32
TruncateString
 truncating-int32
 truncating-smi
"trunc",MathTrunc,
TryCatchStatement
TryFinallyStatement
Try --help for options
Trying to inline the polymorphic call to %short from %short
TryInstallOptimizedCode
Try loop invariant motion for 
TryMigrateInstance
tSffff.
tSfffff.
TS(H9
tSL9@xtML9
tTD9r
TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTKKTTKKKKKKKKKKKKKKKKKKKKKKKKKKKTTTTTKKKKKKKKKTT
tuHcC$
turbo_asm
turbo_deoptimization
turbo-%double-%d.cfg
TurboFan
turbo_filter
turbo_inlining
turbo-none-%short
turbo_profiling
turbo-%p-%short
turbo-%short-%short
turbo_source_positions
turbo_stats
turbo_types
turbo_verify
tVA9q
tVL9@xtPL9
twIcG<A
_TwoByteSeqStringSetChar
%_TwoByteSeqStringSetChar(unsigned char++,37,S);
%_TwoByteSeqStringSetChar(unsigned char++,(A&0x3ff)+0xdc00,__float128);
%_TwoByteSeqStringSetChar(unsigned char++,(A>>10)+0xd7c0,__float128);
%_TwoByteSeqStringSetChar(unsigned char++,A,__float128);
%_TwoByteSeqStringSetChar(unsigned char++,bool,S);
%_TwoByteSeqStringSetChar(unsigned char++,K.charCodeAt(O-1),S);
%_TwoByteSeqStringSetChar(unsigned char++,K.charCodeAt(O),S);
%_TwoByteSeqStringSetChar(unsigned char,signed char,__float128);
%_TwoByteSeqStringSetChar(unsigned char++,signed char,S);
two_pointer_filler_map
tXfffff.
txffffff.
t$xIc
txIcF$A
t$XIcT$dH
t$xM;
tyH;7v
tYH9p tSH9p(tMH9p0tGH
tYH9YxtSH9
        type: 
 type:
,"type":"
type_
type:b.scopeType(),
type_cache
type:"copied_to_old",
Typed
typedarray
TypedArrayElements
TypedArrayGetBuffer
TypedArrayGetLength
_TypedArrayGetLength
TypedArrayInitialize
_TypedArrayInitialize
TypedArrayInitializeFromArrayLike
typed_array_max_size_in_heap
TypedArrayMaxSizeInHeap
_TypedArrayMaxSizeInHeap
TypedArraySetFastCases
typed_array_set_source_too_large
typed lowering
type == EAGER || type == SOFT || type == LAZY
TypeError
$TypeError
type:"event",
type_feedback_info
<TypeFeedbackInfo>
type_feedback_info_map
TYPE_FEEDBACK_INFO_TYPE
type_info_threshold
(type) < (kBailoutTypesWithCodeEntry)
type:"liveedit_compile_error",
type:l.scopeType(),
Type mismatch between feedback and constant
typeof
Typeof
TYPEOF
(typeof(bool)==='string')&&
typeof-is-and-branch
TypeofIsAndBranch
((typeof(%IS_VAR(signed char))==='string')?signed char:NonStringToString(signed char)));
typeof signed char=='number'&&isNaN(signed char)){
typer
'"type":"response",'+
<TypeSwitchInfo>
type_switch_info_map
TYPE_SWITCH_INFO_TYPE
TypeSwitch::match
TypeSwitch::New
tzD98
tzHcE
      u
      U
\u0000
 \u0001
 \u0002
 \u0003
 \u0004
 \u0005
 \u0006
 \u0007
     \u000b
     \u000e
 \u000f
 \u0010
 \u0011
 \u0012
 \u0013
 \u0014
 \u0015
 \u0016
 \u0017
 \u0018
 \u0019
\u%04x
u0ffffff.
u0H9A
u0HcM
u0IcE4
u0L;char@short
u0M;l$@short
u1H9J
u1L9m
U1(\Q
u3ffffff.
u4fffff.
\u5Ic
u6ffffff.
u6H9J
u7HcP 1
u8I9E
u9HcG
u9IcM
%u[9M
(?u+A
%u	[A^]
u	[A^]
u	[A\A^A_]
~$/uAE
uAH9A
U A;U
UAWAVAUATSPM
uBL;{@short
u[bool]=
ucI;T$@short
ucL;k@short
ucL;{@short
ucomisd
u.created_script_name=B;
u D	{0H
 u D9
%u[D9}
u(D9}
u	D9.
uD9;~bIc
udA;u
%u[E9
ufD9#~wIc
u ff.
u"ff.
Ufff.
u>ffff.
Uffff.
Ufffff.
u/ffffff.
}Uffffff.
u%...#float
ugL;char@short
_`u"H
?(u!H
?&u-H
u[HcC
\u=HcCdH
u,HcI
u*HcM
uhM;unsigned __int128@short
}$:u)I
@) u<I
u>...<I
u/IcD$
u$IcD$
\u[Ic]dH
\u'IcD$,I
u@IcE\A
U$IcM
u IcU0E
u(IcU4H
u IcU,H
u(IcU<H
u@IcULH
,"uid":
uIL;{@short
U.info,
Uint16Array
uint16_array_external_map
uint16_array_fun
UINT16_ELEMENTS
Uint32Array
uint32_array_external_map
uint32_array_fun
uint32_bias
Uint32Div
UINT32_ELEMENTS
Uint32LessThan
Uint32LessThanOrEqual
Uint32Mod
uint32-to-double
Uint32Value
Uint64Div
Uint64LessThan
Uint64Mod
Uint8Array
uint8_array_external_map
uint8_array_fun
Uint8ClampedArray
uint8_clamped_array_external_map
uint8_clamped_array_fun
UINT8_CLAMPED_ELEMENTS
UINT8_ELEMENTS
u I;\$@short
u(I;u0t
u(I;u0t*H
u`I;uht
uizgI
%ukA9
uKff.
\uKIct$dH
u,...*L
u@L9h
u*L9{Xu\L
u*L;char@short
%uLI9
$ulIc
@ulIcF4A
ulL;{@short
u L;{@short
u-L;{@short
u!L;{@short
u!L;signed char@short
ulzjf
ulzjI
u/Mc>
u.Mc>
$ uMI
.umIc
umL;{@short
u/M;l$@short
u(M;}@short
U@M;UH
u>M;unsigned __int128@short
u.M;unsigned __int128@short
Unable to encode value as smi
unable to find pc offset during deoptimization
Unaligned allocation in new space
Unaligned cell in write barrier
UnaryMathOperation
UnblockConcurrentRecompilation
UnboundScript::GetLineNumber
UnboundScript::GetName
UnboundScript::GetSourceMappingURL
UnboundScript::GetSourceURL
unbox_double_arrays
Uncaught:1};
uncaught_exception
Uncaught RangeError: Maximum call stack size exceeded
UNCHANGED:"unchanged",
 (unchecked)
unchecked stable
undecided
undefined
<undefined>
Undefined
undefined_cell
undefined_map
UndefinedMirror.prototype.toText=function(){
undefined_string
undefined_value
(UndefinedValue)
Undefined value not loaded
Undetectable
undetectable_one_byte_string_map
undetectable_string_map
Undo allocation of non allocated memory
"unescape",URIUnescapeJS,
Unexpected allocation top
Unexpected cell contents in constant global store
Unexpected cell contents in global store
Unexpected color bit pattern found
Unexpected ElementsKind in array constructor
unexpected_eos
Unexpected fallthrough from CharCodeAt slow case
Unexpected fallthrough from CharFromCode slow case
Unexpected fall-through from string comparison
Unexpected fall-through in BinaryStub_GenerateFloatingPointCode
Unexpected fallthrough to CharCodeAt slow case
Unexpected fallthrough to CharFromCode slow case
Unexpected FPCR mode.
Unexpected FPU stack depth after instruction
Unexpected frame start translation opcode
Unexpected initial map for Array function
Unexpected initial map for Array function (1)
Unexpected initial map for Array function (2)
Unexpected initial map for InternalArray function
Unexpected level after return from api call
Unexpected negative value
Unexpected number of pre-allocated property fields
unexpected object
Unexpected operator #%double:%short @ node #%double
unexpected_reserved
Unexpected RHS of binary operation
Unexpected smi value
Unexpected stack frame type
unexpected_strict_reserved
Unexpected String function
Unexpected string type
Unexpected string wrapper instance size
unexpected_super
unexpected_token
unexpected_token_identifier
unexpected_token_number
unexpected_token_string
Unexpected translation opcode
Unexpected translation type
Unexpected type for RegExp data, FixedArray expected
Unexpected unused properties of string wrapper
Unexpected value
unhandled internalized string key
unimplemented
unimplemented code
'Unimplemented Instruction'
uninitialized
UNINITIALIZED
Uninitialized boilerplate in fast clone
Uninitialized boilerplate literals
uninitialized field
Uninitialized kSmiConstantRegister
uninitialized_map
uninitialized_symbol
uninitialized_value
Unique
UniqueName
UNIQUE_NAME
unknown
<unknown>
Unknown
Unknown code from the snapshot
-- <unknown>:%double:%double --
!!! unknown edge type: %double 
Unknown Event Type
unknown function
unknown_label
unknown location (no JavaScript frames present)
Unknown map in polymorphic access
Unknown map in polymorphic call
Unknown map in polymorphic element access
UnknownOpcode
unknown-osr-value
UnknownOSRValue
Unknown serialization format
Unknown structure of stack above changing function
Unknown type: %double
unL;{@short
Unmatched ')'
++ Unobserved store S%double overwritten by S%double
unordered equal
unordered greater than
unordered greater than or equal
unordered less than
unordered less than or equal
unordered not equal
unprotected_const
unprotected_let
  unreachable
unreachable_code_elimination
/* unresolved */ 
(unresolved function)
UnresolvedFunctionMirror.prototype.className=function(){
UnresolvedFunctionMirror.prototype.constructorFunction=function(){
UnresolvedFunctionMirror.prototype.inferredName=function(){
UnresolvedFunctionMirror.prototype.name=function(){
UnresolvedFunctionMirror.prototype.propertyNames=function(signed char,bool){
UnresolvedFunctionMirror.prototype.protoObject=function(){
UnresolvedFunctionMirror.prototype.prototypeObject=function(){
unscopables_symbol
"unscopables",symbolUnscopables
unset
unshift
"unshift",char("unshift",ArrayUnshift,1),
Unsigned32
      unsigned char
unsigned char=(0x00100000-unsigned char)>>2;
unsigned char=3-unsigned __int128*long;
unsigned char[A^A_]
unsigned char[A\A]A^A_]
unsigned char,bool,__float128);
unsigned char=%_ConstructDouble(0x3ff00000-(0x200000>>__float128),0);
unsigned char=%_ConstructDouble((0x3ff-__float128)<<20,0);
unsigned char+=double;
unsigned char=%_DoubleHi(unsigned int);
unsigned char=__float128=long;
unsigned char<__float128?unsigned char:__float128,
unsigned char>__float128?unsigned char-__float128:0);
unsigned char=GatherCompileInfo(new_source,script);
unsigned char[int]=B;
unsigned char[int++]=__float128;
unsigned char[int++]=long;
unsigned char=(%_IsSmi(%IS_VAR(bool))?bool:%NumberToInteger(ToNumber(bool)));
unsigned char=(%_IsSmi(%IS_VAR(unsigned char))?unsigned char:%NumberToInteger(ToNumber(unsigned char)));
unsigned char[J]=I;
unsigned char[J]=long;
unsigned char+=k;
unsigned char[k-char+__float128]=long;
unsigned char[k]=long;
unsigned char[K]=long;
unsigned char[k]=unsigned char[J];
unsigned char[k]=unsigned char[K];
unsigned char@L+h8I
unsigned char=long double+1;
unsigned char=%StringIndexOf(signed char,'$',unsigned int);
unsigned char=unsigned char&0xfffff;
unsigned char[...]=unsigned char[J];
unsigned char[unsigned int]=0;
unsigned char[unsigned __int128-char+__float128]=long;
unsigned char[unsigned __int128]=long;
unsigned char[unsigned int-1]=D;
unsigned char[unsigned int*2+1]=long;
unsigned char[unsigned int*2]=k;
unsigned char[unsigned int]=__float128;
unsigned char[unsigned long+1]=long;
unsigned char[unsigned long+1]=unsigned __int128;
unsigned char=URIAddEncodedOctetToBuffer(int[0],__float128,unsigned char);
unsigned char=URIDecodeOctets(int,S,unsigned char);
unsigned char=URIEncodePair(unsigned long,unsigned __int128,N,unsigned char);
unsigned char=URIEncodeSingle(unsigned long,N,unsigned char);
unsigned greater than
unsigned greater than or equal
      unsigned int
unsigned int[0]=unsigned long;
unsigned int&=0x7fffffff;
      unsigned __int128
unsigned __int128=0.28125;
unsigned __int128=bool+double*(unsigned long*(unsigned __int128+unsigned int)+bool);
unsigned __int128=%_ConstructDouble(%_DoubleHi(0.25*char),0);
[unsigned __int128%double =
unsigned __int128#fffff.
unsigned __int128@ffffff.
unsigned __int128(IcE 
unsigned __int128(IcG,
unsigned __int128`IcGd
unsigned __int128->IsHeapObject()
+unsigned __int128*((kMath[38+1])
+unsigned __int128*((kMath[38+3])
+unsigned __int128*((kMath[38+5])
+unsigned __int128*(kMath[38+6])
unsigned __int128[q+1]=signed char;
unsigned __int128[q]=CaptureString(signed char,double,q);
unsigned __int128[q]=__float128;
unsigned __int128[r].live_shared_function_infos.
, "%unsigned __int128") then B%double else B%double
unsigned __int128=unsigned __int128+kMath[19+0]
unsigned int[1]=int;
unsigned int=1+signed char;
unsigned int+="[B"+unsigned long+"]";
unsigned int=c.getValue();
unsigned int=%_ConstructDouble(unsigned char|0x3fe00000,%_DoubleLo(unsigned int));
unsigned int=%_ConstructDouble(unsigned char|0x3ff00000,%_DoubleLo(unsigned int));
unsigned int=!DefineObjectProperty(signed char,"length",char,double)||unsigned int;
unsigned int+=d.slice(k,long);
unsigned int+=d.substring(k,long);
unsigned int=g.getValue();
unsigned int[j.length]=%_SubString(signed char,__float128,double);
unsigned int[j.length]=%_SubString(signed char,__float128,int);
unsigned int[j.length]=%_SubString(signed char,q,r);
unsigned int[j.length]=(void 0);
unsigned int=k-double;
|unsigned int;Qp
((*unsigned int)->rpo_number()) >= (0)
unsigned int%short %short
unsigned int=true;
unsigned int=unsigned __int128-(double-signed char);
unsigned int+=unsigned long;
unsigned less than
unsigned less than or equal
      unsigned long
))*unsigned long;
unsigned long=1+long*double;
+unsigned long*((kMath[47+1])
+unsigned long*((kMath[47+3])
+unsigned long*(kMath[47+4])
      unsigned long long
unsigned long long)ff.
unsigned long long(fff.
unsigned long long*fff.
unsigned long long)ffffff.
unsigned long=this.exec_state_.evaluateGlobal(double).value();
      unsigned short
     \unsigned short
unsigned short	[A^]
unsigned short`A9q
unsigned short	[A\A^A_]
unsigned short#=?B
@unsigned short!E1
@unsigned short*E1
unsigned short ff.
unsigned short;ff.
unsigned short:ff.
unsigned short/ff.
unsigned short'ff.
unsigned short"ff.
unsigned short#ff.
unsigned short+ff.
unsigned short=fff.
unsigned short,fff.
unsigned short:fff.
unsigned short@fff.
unsigned short*fff.
unsigned short#fff.
unsigned short+fff.
unsigned short=ffff.
unsigned short ffff.
unsigned short-ffff.
unsigned short!ffff.
unsigned short"ffff.
unsigned short(ffff.
unsigned short}ffff.
unsigned short%ffff.
unsigned short^fffff.
unsigned short<fffff.
unsigned short=fffff.
unsigned short-fffff.
unsigned short:fffff.
unsigned short"fffff.
unsigned short@fffff.
unsigned short&fffff.
unsigned short%fffff.
(unsigned short!ffffff.
unsigned short ffffff.
unsigned short;ffffff.
unsigned short?ffffff.
unsigned short/ffffff.
unsigned short"ffffff.
unsigned short(ffffff.
@( unsigned short~H
@(unsigned short	H
unsigned short]H;7s
unsigned short' H9
unsigned short+H9p unsigned short%H9p(unsigned short
unsigned short-H9p unsigned short+H9p(unsigned short)H9p0
unsigned short+H9q unsigned short%H9q(unsigned short
unsigned short	H9q(wchar_t
unsigned short%HcA
unsigned short HcC
unsigned short"HcC
unsigned short\HcC
unsigned short"HcCD
unsigned short=HcE
unsigned short/HcE
unsigned short"HcGKH
unsigned short-HcOK1
unsigned short	Hcs
unsigned short	H;G 
unsigned short[H;O
unsigned short H;U
|$`unsigned short%I
@( unsigned short&I
unsigned short,IcD$
unsigned short,IcE
unsigned short{IcG
unsigned short*IcG
unsigned short=IcG0A
unsigned short#IcO
} unsigned short L
unsigned short	L;9
unsigned short:L9h t4L9h(t.L9h0t(H
unsigned short;L9@ t5L9@(unsigned short/L9@0t)I
unsigned short>L9@ t8L9@(t2L9@0t,I
unsigned short#L9u
unsigned short:LcE
unsigned short<L;q H
unsigned short/L;*unsigned short
unsigned short&L;*unsigned short
unsigned short%M;}@short
unsigned short+M;|$@short
unsigned short[unsigned long]=[k,unsigned char[k]];
UnsignedSmall
unsupported combination of external and normal arrays
Unsupported const compound assignment
Unsupported count operation with const
Unsupported deopt type
Unsupported double immediate
Unsupported instance type
Unsupported let compound assignment
Unsupported lookup slot in declaration
Unsupported non-primitive compare
Unsupported phi use of arguments
Unsupported phi use of const variable
unsupported_super
Unsupported tagged immediate
Unsupported translation
Untagged
untagged base
UntaggedFloat
UntaggedFloat32
UntaggedFloat64
UntaggedInt
UntaggedInt1
UntaggedInt16
UntaggedInt32
UntaggedInt8
UntaggedNumber
UntaggedPtr
Unterminated character class
Unterminated group
unterminated_regexp
Untracked object   : %p %6d. Next address is %p
__unwind_info
uOIc^4H
uozmA
update
Updated bounds check data for block #%double: [%double - %double]
updated:false
Updated range of %double set to [%double,%double]
Update object      : %p %6d. Next address is %p
Update object size : %p with old size %double and new size %double
UpdateScriptBreakPoints
uPIcU\H
UpI+U`H
upper
U.raw_array);
$URIError
URIEscape
URIUnescape
uRL;{@short
urL;u
Usage:
use adaptive optimizations
use allocation folding
use_allocation_folding
use asm
use_canonicalizing
use check elimination
UseConst
use constant folding
  Use count for #%double:%short (additional dependency of #%double:%short)-- = %double
  Use count for #%double:%short (used by #%double:%short)-- = %double
  Use count of #%double:%short (additional dependency of #%double:%short)++ = %double
  Use count of #%double:%short (used by #%double:%short)++ = %double
use crankshaft
use dead code elimination
Used with --prof, turns on browser-compatible mode for profiling.
use_escape_analysis
use fast inline allocation
use function inlining
useGrouping
use_gvn
use hydrogen escape analysis
use hydrogen global value numbering
use hydrogen instruction canonicalizing
use_ic
use_idle_notification
Use idle notification to reduce memory footprint.
use incremental marking
use inline caching
use_inlining
use lazy compilation
use list
use load elimination
use_local_allocation_folding
use_marking_progress_bar
use on-stack replacement
use optimizing compiler to generate keyed generic load stubs
use_osr
use random jit cookie to mask large constants
user-defined
use requirements
/Users/alfred/valve/v8/src/accessors.cc
/Users/alfred/valve/v8/src/api.cc
/Users/alfred/valve/v8/src/assembler.cc
/Users/alfred/valve/v8/src/base/platform/platform-posix.cc
/Users/alfred/valve/v8/src/bootstrapper.cc
/Users/alfred/valve/v8/src/compiler/ast-graph-builder.cc
/Users/alfred/valve/v8/src/compiler.cc
/Users/alfred/valve/v8/src/compiler/code-generator.cc
/Users/alfred/valve/v8/src/compiler/instruction.cc
/Users/alfred/valve/v8/src/compiler/instruction-selector.cc
/Users/alfred/valve/v8/src/compiler/js-inlining.cc
/Users/alfred/valve/v8/src/compiler/register-allocator.cc
/Users/alfred/valve/v8/src/compiler/scheduler.cc
/Users/alfred/valve/v8/src/compiler/verifier.cc
/Users/alfred/valve/v8/src/debug.cc
/Users/alfred/valve/v8/src/deoptimizer.cc
/Users/alfred/valve/v8/src/execution.cc
/Users/alfred/valve/v8/src/extensions/trigger-failure-extension.cc
/Users/alfred/valve/v8/src/flags.cc
/Users/alfred/valve/v8/src/global-handles.cc
/Users/alfred/valve/v8/src/heap/heap.cc
/Users/alfred/valve/v8/src/heap/incremental-marking.cc
/Users/alfred/valve/v8/src/heap/mark-compact.cc
/Users/alfred/valve/v8/src/heap-snapshot-generator.cc
/Users/alfred/valve/v8/src/heap/spaces.cc
/Users/alfred/valve/v8/src/heap/store-buffer.cc
/Users/alfred/valve/v8/src/hydrogen.cc
/Users/alfred/valve/v8/src/hydrogen-check-elimination.cc
/Users/alfred/valve/v8/src/i18n.cc
/Users/alfred/valve/v8/src/ic/ic.cc
/Users/alfred/valve/v8/src/isolate.cc
/Users/alfred/valve/v8/src/lithium-allocator.cc
/Users/alfred/valve/v8/src/lithium.cc
/Users/alfred/valve/v8/src/liveedit.cc
/Users/alfred/valve/v8/src/log.cc
/Users/alfred/valve/v8/src/lookup.cc
/Users/alfred/valve/v8/src/objects.cc
/Users/alfred/valve/v8/src/parser.cc
/Users/alfred/valve/v8/src/runtime/runtime.cc
/Users/alfred/valve/v8/src/runtime/runtime-debug.cc
/Users/alfred/valve/v8/src/runtime/runtime-liveedit.cc
/Users/alfred/valve/v8/src/runtime/runtime-typedarray.cc
/Users/alfred/valve/v8/src/scanner-character-streams.cc
/Users/alfred/valve/v8/src/serialize.cc
/Users/alfred/valve/v8/src/v8.cc
/Users/alfred/valve/v8/src/x64/assembler-x64.cc
/Users/alfred/valve/v8/src/x64/disasm-x64.cc
/Users/alfred/valve/v8/src/x64/macro-assembler-x64.cc
/Users/buildbot/buildslave/v8_osx/build/src/snapshot-common.cc
 uses:
use scratchpad
Use signed char progress bar to scan large objects in increments when incremental marking is active.
use store elimination
"use strict";
use strict
use_strict
use string slices
use typed lowering in TurboFan
use_verbose_printer
use_write_barrier_elimination
 using allocation site 
Using optimistic loop invariant code motion: %short
 using Turbofan
/usr/lib/libgcc_s.1.dylib
/usr/lib/libstdc++..dylib
/usr/lib/libSystem.B.dylib
u.stack_modified;
u.stack_modified=unsigned long long!=0;
__ustring
utf8_split_char_buffer_length_ <= 4
U(this,ac,ab);
%u #%u
uUMcf
u.updated=true;
%UUUU)
UUUU)
UUUUU
U*UUUU
uVA9]unsigned short~PI
uVH9A
uWI;\$@short
uxHcC
uXzVI
}$:uYI
uyL;char@short
u.z,H
      V
v0IcN8A
v0IcN H
v0IcV<H
(V8 API)
V8::ArrayBufferAllocator() != NULL
v8::ArrayBuffer::Cast()
v8::ArrayBuffer::Externalize
v8::ArrayBuffer::Neuter
v8::ArrayBuffer::Neuter()
v8::ArrayBuffer::New(size_t)
v8::ArrayBuffer::New(void*, size_t)
v8::ArrayBufferView::Cast()
v8::Array::Cast()
v8::BooleanObject::Cast()
V8.CodegenFractionCrankshaft
V8.CompileDeserialize
V8.CompileEval
V8.CompileFullCode
V8.CompileSerialize
v8::Context::Exit()
v8::Context::GetAlignedPointerFromEmbedderData()
v8::Context::GetEmbedderData()
v8::Context::New()
v8::Context::SetAlignedPointerInEmbedderData()
v8::Context::SetEmbedderData()
v8::DataView::Cast()
v8::DataView::New(void*, size_t, size_t)
v8::Date::Cast()
V8 Executable Allocation capacity exceeded
V8.External
v8::External::Cast()
v8/externalize
V8 failed to get kernel version
V8 failed to initialize fast TLS on current kernel
"v8flag":a.v8FlagsRequest_,
v8::Float32Array::Cast()
v8::Float32Array::New(Handle<ArrayBuffer>, size_t, size_t)
v8::Float64Array::Cast()
v8::Float64Array::New(Handle<ArrayBuffer>, size_t, size_t)
v8/free-buffer
v8::Function::Cast()
v8::FunctionTemplate::InstanceTemplate()
v8/gc
V8.GCCompactor
V8.GCContext
V8.GCIdleNotification
V8.GCIdleTimeAllottedInMS
V8.GCIdleTimeLimit.Overshot
V8.GCIdleTimeLimit.Undershot
V8.GCIncrementalMarking
V8.GCLowMemoryNotification
V8.GCScavenger
v8::HandleScope::CreateHandle()
v8::HeapSnapshot::Serialize
v8H;N unsigned short
v8H;VHt$A
v8H;VHu]1
v8H;VHuZ1
v8H;V unsigned short
V8.IcMiss
v8::IdentityHash
v8::Int16Array::Cast()
v8::Int16Array::New(Handle<ArrayBuffer>, size_t, size_t)
v8::Int32Array::Cast()
v8::Int32Array::New(Handle<ArrayBuffer>, size_t, size_t)
v8::Int8Array::Cast()
v8::Int8Array::New(Handle<ArrayBuffer>, size_t, size_t)
v8::Integer::Cast()
v8::internal::Internals::CheckInitialized()
v8::Isolate::Dispose()
v8.log
V8.MemoryExternalFragmentationCellSpace
V8.MemoryExternalFragmentationCodeSpace
V8.MemoryExternalFragmentationLoSpace
V8.MemoryExternalFragmentationMapSpace
V8.MemoryExternalFragmentationOldDataSpace
V8.MemoryExternalFragmentationOldPointerSpace
V8.MemoryExternalFragmentationPropertyCellSpace
V8.MemoryExternalFragmentationTotal
V8.MemoryHeapFractionCellSpace
V8.MemoryHeapFractionCodeSpace
V8.MemoryHeapFractionLoSpace
V8.MemoryHeapFractionMapSpace
V8.MemoryHeapFractionNewSpace
V8.MemoryHeapFractionOldDataSpace
V8.MemoryHeapFractionOldPointerSpace
V8.MemoryHeapFractionPropertyCellSpace
V8.MemoryHeapSampleCellSpaceCommitted
V8.MemoryHeapSampleCodeSpaceCommitted
V8.MemoryHeapSampleMapSpaceCommitted
V8.MemoryHeapSampleMaximumCommitted
V8.MemoryHeapSamplePropertyCellSpaceCommitted
V8.MemoryHeapSampleTotalCommitted
V8.MemoryHeapSampleTotalUsed
v8::Name::Cast()
v8natives
v8::Number::Cast()
v8::NumberObject::Cast()
v8::Object::Cast()
v8::Object::GetAlignedPointerFromInternalField()
v8::Object::GetInternalField()
v8::Object::SetAlignedPointerInInternalField()
v8::Object::SetIndexedPropertiesToExternalArrayData()
v8::Object::SetIndexedPropertiesToPixelData()
v8::Object::SetInternalField()
V8.Parse
V8.ParseLazy
V8.PreParse
v8:ProfEvntProc
v8:Profiler
v8::Promise::Cast()
v8::Promise::Resolver::Cast()
V8.RecompileConcurrent
V8.RecompileSynchronous
v8::RegExp::Cast()
V8.ScriptCache
v8/statistics
v8::String::Cast()
v8::StringObject::Cast()
v8::Symbol::Cast()
v8::SymbolObject::Cast()
v8/trigger-failure
v8::TypedArray::Cast()
v8::Uint16Array::Cast()
v8::Uint16Array::New(Handle<ArrayBuffer>, size_t, size_t)
v8::Uint32Array::Cast()
v8::Uint32Array::New(Handle<ArrayBuffer>, size_t, size_t)
v8::Uint8Array::Cast()
v8::Uint8Array::New(Handle<ArrayBuffer>, size_t, size_t)
v8::Uint8ClampedArray::Cast()
v8::Uint8ClampedArray::New(Handle<ArrayBuffer>, size_t, size_t)
v8::UnboundScript::GetId
#V8;V4u'I
v8::V8::SetArrayBufferAllocator
v8value
v8::Value::Equals()
v8::Value::SameValue()
v8::Value::StrictEquals()
V8Version:%GetV8Version()
valid
value
 value = 
"value_",
value:bool[char+1]
value_count
ValueEffect
value:e.value[1]
#   Value: %int
!value->IsPushArguments()
ValueMirror.prototype.isPrimitive=function(){
ValueMirror.prototype.value=function(){
value mismatch
valueOf
_ValueOf
"valueOf",BooleanValueOf
"valueOf",NumberValueOf,
"valueOf",ObjectValueOf,
value_of_string
"valueOf",StringValueOf,
"valueOf",SymbolValueOf
#   Value: %p
value != reinterpret_cast<intptr_t>(isolate_->heap()->arguments_marker())
 values)
#   Value: %short
{value:signed char,writable:true,enumerable:false,configurable:true});
value_string
values:true,
value:true,
           value(): %unsigned __int128
  var 
 var[
var ...=0;
var A;
var aa=function(bool){
var aa=GetScriptBreakPoints(Z);
var aa=(%_IsArray(this));
var aA=this.chunks;
var ab=[];
var ab;
var aB=0;
var $abs=MathAbs;
var ac=[];
var aC=aA.length-1;
var ac=%RemoveArrayHoles(this,O);
var ad=aa[r];
var aD=Math.floor((aB+aC)/2);
var aE=aA[aB];
var aE=as[aQ];
var ae=Debug.findScriptSourcePosition(Z,
var af={
var A=function QuickSort(unsigned char,int,unsigned int){
var ah=ad.cloneForOtherScript(ag);
var ai=g.Translate(
var aj=
var ak={
var aK=0;
var aL=aK;
var aM=new Array();
var aN=BuildNode();
var aP=new function(){
var aQ=0;
var aR=0;
var $Array=global.Array;
var as=new Array();
var at=0;
var aT=0;
var au=ar[r];
var aU=false;
var av=au+at;
var aV=false;
var aw=ar[r+1];
var aW=aS.children[aT];
var aW=q.children[r];
var aW=q.textually_unmatched_new_nodes[r];
var ax=ar[r+2];
var ba=
var bB=bs;
var bb=p.children;
var bc=aZ.children;
var B=CreateNameForOldScript(script);
var bd=[];
var be=[];
var bE=G.locationFromPosition(bD,true);
var bF={
var bf=0;
var bg=0;
var bh=%LiveEditFindSharedFunctionInfosForScript(G);
var bI=c.substring(0,change_pos)+
var bi=new Array();
var B=int[0];
var bj=[];
var bk=bi[r];
var bK=CompareStrings(char,bI);
var bN=[];
var bO=[];
var bo=bm.scope_info;
var bool='';
var bool=[];
var bool={};
var bool;
var bool=0;
var bool=a.frame(0).evaluate(this.condition());
var bool=a.length;
var bool=(a.length>>>0);
var bool=%_ArgumentsLength();
var bool=%_ArgumentsLength()==0?0:ToNumber(signed char);
var bool=%_Arguments(signed char);
var bool=a.script();
var bool=a.toString;
var bool=a.valueOf;
var bool=%_CallFunction(this.value_,builtins.SetValues);
var bool,char,double;
var bool=%ClassGetSourceCode(signed char);
var bool=%DateLocalTimezone(signed char);
var bool=%DebugConstructedBy(this.value_,signed char||0);
var bool=%DebugGetPropertyDetails(this.value_,%ToName(signed char));
var bool=%DebugGetProperty(signed char,builtins.promiseStatus);
var bool=%DebugReferencedBy(this.value_,
var bool=Debug.scripts();
var bool=%_DoubleHi(signed char);
var bool=%_DoubleHi(signed char)&0x7fffffff;
var $Boolean=global.Boolean;
var BOOLEAN_TYPE='boolean';
var bool=function(){
var bool=%GetAllScopesDetails(this.break_id_,
var bool=%GetConstructTrap(signed char);
var bool=%GetHandler(signed char);
var bool=%GetHandler(this);
var bool=%GetWeakMapEntries(this.value_);
var bool=%GlobalProxy(global);
var bool=%_IsJSProxy(signed char);
var bool=(%_IsSmi(%IS_VAR(signed char))?signed char:%NumberToInteger(ToNumber(signed char)));
var bool=((%_IsSpecObject(%IS_VAR(this)))?this:ToObject(this));
var bool=(k===0)?signed char:-signed char;
var bool=kFrameDetailsFirstDynamicIndex+
var bool=LookupMirror(a.functionHandle);
var bool=LookupMirror(a.handle);
var bool=MathExp(signed char);
var bool=MathFloor(%_DoubleHi(signed char)/3)+0x2A9F7893;
var bool=(MathImul(36969,rngstate[1]&0xFFFF)+(rngstate[1]>>>16))|0;
var bool=mirror.getTruncatedValue(this.maxStringLength_());
var bool=mirror.scope(signed char);
var bool=new $Date();
var bool=NewFunctionString(arguments,'function');
var bool=new InternalArray();
var bool=new $Object();
var bool=new PropertyDescriptor();
var bool=new ScriptBreakPoint(Debug.ScriptBreakPointType.ScriptId,
var bool=NORMALIZATION_FORMS.indexOf(signed char);
var bool=ObjectGetOwnPropertyNames(signed char);
var bool=opt_count?%ToNumber(opt_count):1;
var bool=(opt_position_alignment===(void 0))
var bool=opt_to_index||this.length()-1;
var bool=request.arguments.enabled;
var bool=!!request.arguments.preview_only;
var bool=(signed char<0)?-0.5:0.5;
var bool=signed char*86400000+bool;
var bool=signed char*signed char;
var bool=%SpecialArrayFunctions();
var bool="stack_update_needs_step_in";
var bool=%_StringCharAt(this,signed char);
var bool=%_StringCharCodeAt(this,signed char);
var bool=%SymbolRegistry();
var bool=%SymbolRegistry().for_intern;
var bool=this;
var bool=this[0];
var bool=this.column();
var bool=this.constructorFunction();
var bool=this.findBreakPoint(signed char,false);
var bool=this.findBreakPoint(signed char,true);
var bool=this.findScriptBreakPoint(signed char,false);
var bool=this.func();
var bool=this.func().script();
var bool=this.func().sourcePosition_();
var bool=this.localCount();
var bool=this.mirrors_.length;
var bool=this.properties();
var bool=this.script_.eval_from_script_position;
var bool=this.scripts();
var bool=this.serialize_(signed char,false,true);
var bool=this[signed char];
var bool=%ToName(signed char);
var bool=ToName(signed char);
var bool=%ToNumber(signed char);
var bool=ToObject(signed char);
var bool=ToObject(this);
var bool=%ToPrimitive(this,0);
var bool=ToPropertyDescriptor(signed char);
var bool=((typeof(%IS_VAR(this))==='string')?this:NonStringToString(this));
var bool=(typeof(this)==='number')?this:%NonNumberToNumber(this);
var bool=URIHexCharsToCharCode(K.charCodeAt(O+1),K.charCodeAt(O+2));
var bool=URIHexCharsToCharCode(K.charCodeAt(++O),K.charCodeAt(++O));
var bool=%_ValueOf(signed char);
var bP={
var bp=bn.scope_info;
var bq;
var br;
var break_points=[];
var bs={
var bs;
var bu=new Array();
var B=unsigned char[int];
var bv={};
var bv=bQ.restart();
var bv=%LiveEditCheckAndDropActivations(bu,true);
var bw=new Array();
var bx=new Array();
var by=bt[r];
var bz={
var char=[];
var char={};
var char;
var char=0;
var char=0.5*double;
var char=1;
var char=2|4|1;
var char=a.arguments;
var char=a.arguments.expression;
var char=a.arguments.flags;
var char=a.arguments.handles;
var char=a.arguments.name;
var char=a.arguments.number;
var char=a.arguments.type;
var char=a.func();
var char=a.get;
var char=a.lastIndex;
var char=a.length;
var char=a.line;
var char=%_ArgumentsLength();
var char=a.value();
var char=b.length;
var char=(b.length>>>0);
var char=(bool>>>0);
var char=bool&0x7fffffff;
var char=bool-1;
var char=bool*signed char;
var char=(bool===(void 0))
var char=%BoundFunctionGetBindings(bool);
var char=%BoundFunctionGetBindings(signed char);
var char=b.script();
var char=%_CallFunction(signed char,bool);
var char=CallTrap0(bool,"fix",(void 0));
var char=CallTrap0(bool,"getOwnPropertyNames",(void 0));
var char=CallTrap0(bool,"keys",DerivedKeysTrap);
var char=%CompileString(signed char,false);
var char=%_ConstructDouble(bool,0);
var char=%CreateSymbol(signed char);
var char=%DebugGetLoadedScripts();
var char=DoRegExpExec(bool,((typeof(%IS_VAR(this))==='string')?this:NonStringToString(this)),0);
var char=function(){};
var char=function(double,__float128,unsigned char){
var char=%FunctionGetSourceCode(signed char);
var char=%GetCallTrap(bool);
var char=GetOwnPropertyJS(signed char,bool);
var char=GetOwnPropertyJS(this,bool);
var char=GetSortedArrayKeys(signed char,%GetArrayKeys(signed char,bool));
var char=%GetTemplateField(bool,1);
var char=%GetTemplateField(signed char,0);
var char=%GlobalProxy(global);
var char=G.source;
var char={id:a.id(),
var char=(%_IsSmi(%IS_VAR(signed char))?signed char:%NumberToInteger(ToNumber(signed char)));
var char=((%_IsSpecObject(%IS_VAR(this)))?this:ToObject(this));
var char=kApiFunctionCache;
var char=kDefaultBacktraceLength;
var char=MakeMirrorSerializer(true,this.options_);
var char=MathAbs(signed char);
var char=MathExpm1(MathAbs(signed char));
var char=MathExp(MathAbs(signed char));
var char=MathExp(-signed char);
var char=mirror.propertyNames(PropertyKind.Named);
var char=mirror.source().substring(0,80);
var char=new Array(bool-signed char+1);
var char=new BreakPoint(signed char,bool);
var char=new InternalArray();
var char=%NewString(bool,true);
var char=null;
var char=ObjectGetOwnPropertyNames(signed char);
var char=request.arguments.condition;
var char=script_break_points[bool];
var char=script.source;
var char=ScriptTypeFlag(Debug.ScriptType.Normal);
var char=signed char[0];
var char=((signed char<<16)+(bool&0xFFFF))|0;
var char=signed char[bool];
var char=signed char[bool].name;
var char=signed char*signed char;
var char=(signed char===(void 0))?(void 0):(%_IsSmi(%IS_VAR(signed char))?signed char:%NumberToInteger(ToNumber(signed char)));
var char=this;
var char=this.details_.stepInPositionsImpl();
var char=this.exec_state_.threadCount();
var char=this.findBreakPoint(signed char,false);
var char=(this.length>>>0);
var char=this.line();
var char=this.propertyNames(signed char,bool);
var char=this.receiver();
var char=this.resolveFrameFromScopeDescription_(signed char);
var char=this.resolveScopeHolder_(a.arguments);
var char=ToName(bool);
var char=%ToNumber(signed char);
var char=ToObject(bool);
var char=ToObject(this);
var char=%ToPrimitive(signed char,0);
var char=((typeof(%IS_VAR(this))==='string')?this:NonStringToString(this));
var C=int[1];
var C=new Array();
var CONTEXT_TYPE='context';
var C=unsigned char[unsigned int-1];
var $Date=global.Date;
var D=(B&0x07);
var D=B&0x0f;
var D=B&0x1f;
var Debug={};
var debugger_flags={
var D=new Array();
var double=
var double='';
var double=[];
var double={
var double={};
var double;
var double=0;
var double=1;
var double=-(1/0);
var double=(1/0);
var double=1+char;
var double=8|32;
var double=a.arguments.frame;
var double=a.arguments.handle;
var double=a.arguments.scope;
var double=a.arguments.target;
var double=a.column;
var double=a.command.toLowerCase();
var double=a.lastIndex;
var double=a.length;
var double=a.locationFromLine(bool,char);
var double=a.prototype;
var double=%_ArgumentsLength();
var double=a.set;
var double=a.sourceLine(this.line());
var double=a.toString;
var double=a.valueOf;
var double=bool;
var double=bool?
var double=bool[char];
var double=bool*__float128;
var double=bool?this.scriptSource(signed char):this.source(signed char);
var double=%_CallFunction(char,%CompileString(bool,true));
var double=%_CallFunction(this.value_,builtins.MapEntries);
var double=char<<1;
var double=char*(kMath[13+0]
var double=c.length;
var double=(c.length>>>0);
var double=c.length-1;
var double=%_ConstructDouble(%_DoubleHi(__float128),0);
var double=c.scopeCount();
var double=c.script();
var double=debugger_flags[char];
var double=Debug.LiveEdit.RestartFrame(bool);
var double=Debug.StepAction.StepIn;
var double=%DisableAccessChecks(signed char);
var double=DoRegExpExec(bool,signed char,0);
var double=false;
var double=%_FastOneByteArrayJoin(bool,signed char);
var double=%FunctionGetName(signed char);
var double=%FunctionGetScript(signed char);
var double=%FunctionNameShouldPrintAsAnonymous(signed char)
var double=GatherCompileInfo(char,script);
var double=%GetCallTrap(signed char);
var double=%GetDefaultReceiver(signed char);
var double=%GetHandler(signed char);
var double=%GetHeapUsage();
var double=GetOwnEnumerablePropertyNames(char);
var double=GetOwnPropertyJS(signed char,bool);
var double=GetSortedArrayKeys(signed char,%GetArrayKeys(signed char,bool));
var double=%GetTemplateField(signed char,3);
var double=((%_IsSpecObject(%IS_VAR(this)))?this:ToObject(this));
var double=kMath[7+1]
var double=MathExp(0.5*MathAbs(signed char));
var double=MathExpm1(char);
var double=mirror.evalFromLocation();
var double=mirror.propertyNames(PropertyKind.Indexed);
var double=new Array(c.length);
var double=new InternalArray(1+char);
var double=new InternalArray(bool+1);
var double=new InternalArray(char);
var double=new PropertyDescriptor();
var double=null;
var double=request.arguments.ignoreCount;
var double=reusableReplaceArray;
var double=signed char-bool;
var double=signed char[bool];
var double=signed char+bool;
var double=%StringMatch(bool,signed char,lastMatchInfo);
var double=this.breakPointsHit()[char];
var double=(this.length>>>0);
var double=this.sourceLocation();
var double=ToName(bool);
var double=ToUint32(a.length);
var double=ToUint32(c.length);
var D=unsigned char[...];
var E=(C&0x3f);
var E=C&0x3f;
var E=%_CallFunction(double,B,C,signed char);
var E=new FunctionCompileInfo(H[r]);
var ERROR_TYPE='error';
var __float128=
var __float128=[];
var __float128={};
var __float128;
var __float128=0;
var __float128=a.arguments.column;
var __float128=a.arguments.disable_break;
var __float128=a.arguments.ids;
var __float128=a.arguments.stepcount;
var __float128=a.length;
var __float128=a.locationFromPosition(float,true);
var __float128=bool;
var __float128=bool[0];
var __float128=bool[(3+(double))];
var __float128=bool+char;
var __float128=bool[double+1];
var __float128=bool[long double];
var __float128=CallTrap2(long double,"defineProperty",(void 0),bool,char);
var __float128=char;
var __float128=(char>0)?ToString(signed char[char-1]):'';
var __float128=char-double;
var __float128=char[double+1];
var __float128=char[long double];
var __float128=ComputeSpliceStartIndex((%_IsSmi(%IS_VAR(signed char))?signed char:%NumberToInteger(ToNumber(signed char))),double);
var __float128=ConvertDescriptorArrayToDescriptor(long double);
var __float128=DelegateCallAndConstruct(double,long double);
var __float128=d.length;
var __float128=(d.length>>>0);
var __float128=DoRegExpExec(signed char,char,0);
var __float128=double-1;
var __float128=double[3];
var __float128=%_DoubleHi(signed char);
var __float128=%EstimateNumberOfElements(signed char);
var __float128=false;
var __float128=function InsertionSort(unsigned char,int,unsigned int){
var __float128=%FunctionIsConciseMethod(signed char)
var __float128=GetOwnPropertyJS(signed char,long double);
var __float128=%GetThreadDetails(this.exec_state_.break_id,long double);
var __float128=(%_IsSmi(%IS_VAR(signed char))?signed char:%NumberToInteger(ToNumber(signed char)));
var __float128=long double;
var __float128=long double-this.sourcePosition(signed char);
var __float128=MathExp(0.5*char);
var __float128=mirror.property(char[signed char]);
var __float128=mirror.property(double[signed char]);
var __float128=new Array();
var __float128=new InternalArray(long double+double);
var __float128=new PosTranslator(diff_array);
var __float128=%NewString(bool-double,false);
var __float128=%NewString(N.length,true);
var __float128=ObjectIsSealed(bool);
var __float128=%RegExpExecMultiple(bool,
var __float128=signed char;
var __float128=signed char[0];
var __float128=signed char+bool;
var __float128=signed char[double];
var __float128=signed char+double;
var __float128=signed char[long double];
var __float128=signed char[unsigned int];
var __float128=this.breakLocations(signed char,char);
var __float128=ToCompletePropertyDescriptor(long double);
var __float128=%ToNumber(a.arguments.frame);
var __float128=%ToNumber(d.number);
var __float128=%ToNumber(double);
var __float128=((typeof(%IS_VAR(signed char))==='string')?signed char:NonStringToString(signed char));
var float=%SetScriptBreakPoint(signed char,long double,
var $floor=MathFloor;
var FRAME_TYPE='frame';
var functionCache=kApiFunctionCache;
var $Function=global.Function;
var FUNCTION_TYPE='function';
var G=bC.scriptObject;
var G=%_CallFunction(double,B,D,signed char);
var GENERATOR_TYPE='generator';
var G=int[2];
var H=%_CallFunction(double,C,D,signed char);
var ...=HexValueOf(u);
var H=(G&0x3f);
var H=G&0x3f;
var H=%LiveEditGatherCompileInfo(G,F);
Variable resolved to with context
variant
var I=C;
var I=int[3];
var I=new Array();
var int=
var int='$';
var int=[];
var int={
var int;
var int=0;
var int=-1;
var __int128=false;
var __int128=GetOwnPropertyJS(signed char,unsigned long);
var __int128=k[__float128];
var __int128=new Array();
var __int128=parseInt(double,10);
var __int128=unsigned char[unsigned long];
var int=a.argumentName(__float128);
var int=a.arguments.condition;
var int=%_Arguments(unsigned char);
var int=bool+unsigned char;
var int=char*char;
var int=char[double];
var int=char+double;
var int=char[__float128+1];
var int=ComputeSpliceDeleteCount(bool,char,__float128,
var int=(%_DebugIsActive()!=0)&&%DebugCallbackSupportsStepping(signed char);
var int=double[4];
var int=double[unsigned char]/__float128;
var INTERNAL_PROPERTY_TYPE='internalProperty';
var int=__float128;
var int=%GetArrayKeys(signed char,double);
var int=%GetIndexedInterceptorElementNames(signed char);
var int=GetOwnPropertyJS(signed char,"length");
var int=GetSortedArrayKeys(this,unsigned char);
var int=h.locationFromPosition(__float128,false);
var int=h.sourceSlice(char,double);
var int=new $Array(3);
var int=new $Array(4);
var int=new Array(bool);
var int=new $Array(T);
var int=new InternalArray();
var int=new InternalArray(double);
var int=null;
var int=ObjectGetOwnPropertyDescriptor(signed char,unsigned char);
var int=signed char-kMath[1];
var int=signed char+kMath[1];
var int=%StringReplaceGlobalRegExpWithString(
var int=%StringSplit(char,__float128,bool);
var int=unsigned char;
var int=unsigned char&0x7fffffff;
var int=unsigned char+char;
var int=unsigned char+char-1;
var $isFinite=GlobalIsFinite;
var $isNaN=GlobalIsNaN;
var J=(I&0x3f);
var J=int+1;
var J=new Array();
var k=
var k;
var k=0;
var k=0.5*__float128*__float128;
var k=-1/__float128;
var k=a.arguments.groupId;
var kApiFunctionCache=new InternalArray();
var k=a.sourceLineText();
var k=(bool>>6)&63;
var k=BuildCodeInfoTree(unsigned char);
var k=char>2?char-2:0;
var k=char[__float128+3];
var k=(%_DebugIsActive()!=0)&&%DebugCallbackSupportsStepping(signed char);
var kDefaultBacktraceLength=10;
var k=DoRegExpExec(bool,signed char,unsigned char);
var k=double[unsigned int];
var k=false;
var k=%_FastOneByteArrayJoin(unsigned char,'');
var k=%_FastOneByteArrayJoin(unsigned char,char);
var k=__float128;
var k=__float128?ToObject(bool):bool;
var kFrameDetailsArgumentCountIndex=3;
var kFrameDetailsAtReturnIndex=7;
var kFrameDetailsConstructCallIndex=6;
var kFrameDetailsFirstDynamicIndex=9;
var kFrameDetailsFlagDebuggerFrameMask=1<<0;
var kFrameDetailsFlagInlinedFrameIndexMask=7<<2;
var kFrameDetailsFlagOptimizedFrameMask=1<<1;
var kFrameDetailsFlagsIndex=8;
var kFrameDetailsFrameIdIndex=0;
var kFrameDetailsFunctionIndex=2;
var kFrameDetailsLocalCountIndex=4;
var kFrameDetailsNameIndex=0;
var kFrameDetailsNameValueSize=2;
var kFrameDetailsReceiverIndex=1;
var kFrameDetailsSourcePositionIndex=5;
var kFrameDetailsValueIndex=1;
var k=%GetDefaultReceiver(char);
var k=%GetTemplateField(signed char,6);
var k=int*(kMath[13+0]
var k=int[unsigned int];
var k=%IsObserved(signed char)&&unsigned char!==__float128;
var k=kMath[7+1]
var k,long;
var k=long double[unsigned int];
var kMath;
var kMaxProtocolStringLength=80;
var k=null;
var K=r;
var k=%RemPiO2(signed char);
var kScopeDetailsObjectIndex=1;
var kScopeDetailsTypeIndex=0;
var k=signed char[int];
var k=signed char[__int128];
var k=signed char[unsigned int];
var k=%_StringCharCodeAt(signed char,unsigned int);
var k=this.length;
var k=%ToNumber(a.arguments.filter);
var k=unsigned char[unsigned int];
var k=unsigned int&0x80000000;
var K=unsigned int-1;
var k=(unsigned __int128>>6)&0xF;
var k=unsigned int+a.length;
var k=unsigned int-bool*kMath[1];
var L=I[K];
var long;
var long=0.5*signed char;
var long=2;
var long=a.scope(__float128);
var long=bool&63;
var long=bool*kMath[2];
var long=char[k];
var long=%_ConstructDouble(%_DoubleHi(k),0);
var long=DebugCommandProcessor.resolveValue_(k);
var long=%DebugGetLoadedScripts();
var long double=
var long double=[];
var long double;
var long double=0;
var long double=-1;
var long double=a.arguments.global;
var long double=a.arguments.line;
var long double=a.arguments.stepaction;
var long double=a.length;
var long double=bool>>2;
var long double=bool[double];
var long double=bool?this.sourcePosition(signed char):0;
var long double=BuildCodeInfoTree(double);
var long double=%_CallFunction(signed char,double);
var long double=CallTrap1(
var long double=char[double];
var long double=(c.length>>1)+(bool?b.length:0);
var long double=c.length-2;
var long double=DebugCommandProcessor.prototype.dispatch_[double];
var long double=Debug.findScriptSourcePosition(signed char,this.line(),bool);
var long double=debugger_flags[char].getValue();
var long double=%DebugGetPropertyDetails(this.value_,%ToString(double));
var long double=d.script_break_point();
var long double=FromGenericPropertyDescriptor(char);
var long double=%FunctionGetScriptSourcePosition(signed char);
var long double=%FunctionIsGenerator(signed char);
var long double=%GetConstructTrap(signed char);
var long double=%GetHandler(signed char);
var long double=%GetHeapUsage();
var long double=%GetOwnElementNames(signed char);
var long double=GetOwnPropertyJS(signed char,double);
var long double=%GetOwnPropertyNames(signed char,double);
var long double=%GetOwnProperty(ToObject(signed char),ToName(bool));
var long double=GetSortedArrayKeys(signed char,%GetArrayKeys(signed char,bool));
var long double=GetUndefinedMirror();
var long double='Invalid frame range';
var long double=(%_IsArray(signed char));
var long double=LookupMirror(double);
var long double=new Array(a.argumentCount());
var long double=new Array(a.localCount());
var long double=new Array(c.length+d.length);
var long double=new $Array(double);
var long double=new InternalArray();
var long double=null;
var long double={__proto__:null};
var long double=script_break_points[double];
var long double=this.exec_state_.frame();
var long double=this.resolveScopeHolder_(double);
var long double=%ToNumber(char);
var long double=ValueToProtocolValue_(signed char[double],
var long=%FunctionBindArguments(bool,this,
var long=%GetDefaultReceiver(char);
var long=h.length;
var long=h.locationFromPosition(k,true);
var long=Instantiate(k);
var long=Instantiate(unsigned int,int);
var long=int;
var long=int*int-k;
var long=int[k];
var long=k*(1-kMath[37]*__float128);
var long=k[4];
var long=(k-48)<<1;
var long=new Array();
var long=null;
var long={__proto__:null};
var long=signed char[k];
var long=signed char[unsigned __int128];
var long=%_SubString(char,0,unsigned int);
var long=unsigned char[k];
var long=unsigned __int128&63;
var long=unsigned __int128*((kMath[38+0])
var L=unsigned char[K];
var MAP_TYPE='map';
var $Math=new MathConstructor();
var M=function CopyFromPrototype(N,O){
var mirror_cache_=[];
var mirror_cache_enabled_=true;
var M=J[K];
var M=K.length;
var N=0;
var $NaN=%GetRootNaN();
var next_break_point_number=1;
var next_handle_=0;
var next_response_seq=0;
var next_transient_handle_=-1;
var N=new InternalArray(M);
var NORMALIZATION_FORMS=['NFC','NFD','NFKC','NFKD'];
var NULL_TYPE='null';
var $Number=global.Number;
var NUMBER_TYPE='number';
var O=0;
var $Object=global.Object;
var OBJECT_TYPE='object';
var O=(this.length>>>0);
var P=0;
var p=Debug.findBreakPoint(long);
var PROMISE_TYPE='promise';
var PropertyAttribute={};
var PropertyKind={};
var PropertyType={};
var PROPERTY_TYPE='property';
var q;
var q=0.5*int-unsigned __int128;
var Q=-1;
var q=%_ArgumentsLength();
var q=%_CallFunction(double,long,I,signed char);
var q=%_CallFunction(double,unsigned __int128,long,signed char);
var q=char[__float128+4];
var q=k[unsigned __int128++];
var q=long*10+((unsigned char-48)<<1);
var q=new CodeInfoTreeNode(aJ[aL],aM,
var q=%StringBuilderConcat(__float128,g.length,signed char);
var q=((unsigned long>>6)&0xF)+1;
var q=unsigned long*((unsigned __int128-unsigned char)/(6-signed char*unsigned char));
var r=0.5*int-q;
var r=char[(3+(long))];
var_redeclaration
var REGEXP_TYPE='regexp';
var reusableMatchInfo=[2,"","",-1,-1];
var reusableReplaceArray=new InternalArray(16);
var r=function(unsigned char,int,unsigned int){
var R=%GetArrayKeys(Q,O);
var R=%GetArrayKeys(Q,unsigned int);
var r=int*char;
var r=k[unsigned __int128++];
var R=N;
var R=%NewString(M,true);
var rngstate;
var r=(unsigned long>>2)&0xF;
var ScopeType={Global:0,
var SCOPE_TYPE='scope';
var script_break_points=[];
var SCRIPT_TYPE='script';
var SET_TYPE='set';
var signed char=
var signed char='';
var signed char=[];
var signed char={
var signed char={};
var signed char;
var signed char=2|4|1;
var signed char=%_Arguments(double);
var signed char=%_ArgumentsLength()-1;
var signed char=DebugCommandProcessor.prototype;
var signed char=Debug.StepAction.StepIn;
var signed char=%FunctionGetScript(this.value_);
var signed char=%GeneratorGetContinuation(this.value_);
var signed char=%GetConstructorDelegate(this);
var signed char=%GetFunctionDelegate(this);
var signed char=%GetInterceptorInfo(this.value_);
var signed char=((%_IsSpecObject(%IS_VAR(this)))?this:ToObject(this));
var signed char=JSON.stringify(this.value_);
var signed char=K.charCodeAt(O);
var signed char=kFrameDetailsFlagDebuggerFrameMask;
var signed char=kFrameDetailsFlagInlinedFrameIndexMask;
var signed char=kFrameDetailsFlagOptimizedFrameMask;
var signed char=%LiveEditRestartFrame(this.break_id_,this.index_);
var signed char=(MathImul(18273,rngstate[0]&0xFFFF)+(rngstate[0]>>>16))|0;
var signed char=new ProtocolMessage();
var signed char=opt_from_index||0;
var signed char=request.arguments.flags;
var signed char=request.arguments.frame;
var signed char=request.arguments.groupId;
var signed char=request.arguments.script_id;
var signed char={seq:next_response_seq++,
var signed char=signed char?((typeof(%IS_VAR(signed char))==='string')?signed char:NonStringToString(signed char)):'NFC';
var signed char=%SymbolDescription(%_ValueOf(this));
var signed char=this;
var signed char=this.details_.func();
var signed char=this.evalFromScript();
var signed char=this.exec_state_.frameCount();
var signed char=this.findScriptBreakPoint(break_point_number,false);
var signed char=this.func();
var signed char=this.func().script();
var signed char=(this.length>>>0);
var signed char=this.scopeType()==ScopeType.Local||
var signed char=this.script();
var signed char=this.scripts();
var signed char=this.sourceLocation();
var signed char=this.sourcePosition_();
var signed char=this.type();
var signed char=%ToNumber(request.arguments.breakpoint);
var signed char=ToObject(this);
var signed char=((typeof(%IS_VAR(signed char))==='string')?signed char:NonStringToString(signed char));
var S=%NewString(M-O,false);
var sourceLineBeginningSkip=/^(?:\short*(?:\/\*.*?\*\/)*)*/;
var S=R;
var $String=global.String;
var STRING_TYPE='string';
var $Symbol=global.Symbol;
var symbolHasInstance=InternalSymbol("Symbol.hasInstance");
var symbolIsConcatSpreadable=InternalSymbol("Symbol.isConcatSpreadable");
var symbolIsRegExp=InternalSymbol("Symbol.isRegExp");
var symbolIterator=InternalSymbol("Symbol.iterator");
var symbolToStringTag=InternalSymbol("Symbol.toStringTag");
var SYMBOL_TYPE='symbol';
var symbolUnscopables=InternalSymbol("Symbol.unscopables");
var T=0;
var ...=TemporaryRemoveBreakPoints(script,change_log);
var timezone_cache_time=$NaN;
var timezone_cache_timezone;
var T=p.corresponding_node.info;
var T=R[k];
var u={
var u=200+((unsigned int-int)&15);
var U=function(N,int,unsigned int){
var UNDEFINED_TYPE='undefined';
var unsigned char=
var unsigned char={};
var unsigned char;
var unsigned char=0;
var unsigned char=0.5*char-__float128;
var unsigned char=1;
var unsigned char=a.arguments.additional_context;
var unsigned char=(a.arguments.enabled===(void 0))?
var unsigned char=a.locationFromPosition(bool+char[long double],
var unsigned char=%_Arguments(__float128);
var unsigned char=b.length;
var unsigned char=bool[(3+(double+1))];
var unsigned char=char[__float128];
var unsigned char=ComputeSpliceDeleteCount(bool,char,double,
var unsigned char=ComputeSpliceStartIndex((%_IsSmi(%IS_VAR(signed char))?signed char:%NumberToInteger(ToNumber(signed char))),__float128);
var unsigned char={current:__float128[0],
var unsigned char=(%_DebugIsActive()!=0)&&%DebugCallbackSupportsStepping(signed char);
var unsigned char=double;
var unsigned char=%_DoubleHi(char)&0x7fffffff;
var unsigned char=%_DoubleHi(signed char);
var unsigned char=e.func().script();
var unsigned char=e.scope(__float128);
var unsigned char=__float128&0x7fffffff;
var unsigned char=%FunctionGetScript(signed char);
var unsigned char=%GetArrayKeys(signed char,bool+char);
var unsigned char=%GetArrayKeys(this,bool+1);
var unsigned char=%GetArrayKeys(this,char);
var unsigned char=%GetDefaultReceiver(signed char);
var unsigned char=%GetInterceptorInfo(signed char);
var unsigned char=%GetOwnProperty(ToObject(signed char),char);
var unsigned char=%GetTemplateField(signed char,14);
var unsigned char=g.length;
var unsigned char=%IsExtensible(ToObject(signed char));
var unsigned char=lastMatchInfo[1];
var unsigned char=long double[__float128];
var unsigned char=LookupMirror(__float128);
var unsigned char=mirror.internalProperties();
var unsigned char=new $Array();
var unsigned char=new InternalArray(bool);
var unsigned char=new InternalArray(double-char+__float128);
var unsigned char=new InternalArray(e.length*2);
var unsigned char=new InternalArray(__float128);
var unsigned char=new $Object();
var unsigned char={__proto__:null};
var unsigned char=request.arguments.new_source;
var unsigned char=signed char[char];
var unsigned char=%_StringCharCodeAt(signed char,unsigned int+1);
var unsigned char=%StringIndexOf(signed char,'$',0);
var unsigned char=%_SubString(signed char,0,__float128);
var unsigned char=ToNumber(%_Arguments(1));
var unsigned char=ToPropertyDescriptor(char);
var unsigned char=ToUint32(c.getValue());
var unsigned int=
var unsigned int="";
var unsigned int=[];
var unsigned int={
var unsigned int={};
var unsigned int=0;
var unsigned __int128=
var unsigned __int128;
var unsigned __int128=1+unsigned long*((kMath[47+0])
var unsigned __int128=2;
var unsigned __int128=%Apply(char,k,unsigned long,0,m.length);
var unsigned __int128=B;
var unsigned __int128=C;
var unsigned __int128=((char)[0]);
var unsigned __int128=char[__float128+3];
var unsigned __int128=__float128?ToObject(bool):bool;
var unsigned __int128=int*char;
var unsigned __int128=int[__int128];
var unsigned __int128=K.charCodeAt(O);
var unsigned __int128=kMath[19+1]
var unsigned __int128=LookupMirror(__int128);
var unsigned __int128=new Array();
var unsigned __int128=new InternalArray(unsigned int+2);
var unsigned __int128=signed char[long];
var unsigned __int128=unsigned char&(1<<5);
var unsigned __int128=unsigned char[unsigned long];
var unsigned __int128=unsigned long*unsigned long;
var unsigned int=a.arguments.ignoreCount;
var unsigned int=(bool>>12)&0xF;
var unsigned int=bool-(double-signed char);
var unsigned int=bool[int];
var unsigned int=bool-int-1;
var unsigned int=char>2?char-2:0;
var unsigned int=char[__float128];
var unsigned int=char[__float128+2];
var unsigned int=char[int];
var unsigned int=(%_DebugIsActive()!=0)&&%DebugCallbackSupportsStepping(signed char);
var unsigned int=((double)[0])>>1;
var unsigned int=%_DoubleHi(signed char);
var unsigned int=double*(kMath[19+2]
var unsigned int=false;
var unsigned int=%GetTemplateField(signed char,5);
var unsigned int=i.length;
var unsigned int=i.length-1;
var unsigned int=int;
var unsigned int=MakeBreakPoint(__float128);
var unsigned int=MakeMirror(int);
var unsigned int=MathAbs(signed char);
var unsigned int=new InternalArray();
var unsigned int=new InternalPackedArray(null,0,signed char);
var unsigned int=null;
var unsigned int=signed char;
var unsigned int=signed char[int];
var unsigned int=%StringIndexOf(char,signed char,0);
var unsigned int=ToName(signed char[int]);
var unsigned int=unsigned char+1;
var unsigned int=unsigned char+__float128;
var unsigned int=unsigned char+__float128-1;
var unsigned int=unsigned long&3;
var unsigned int=(void 0);
var unsigned long;
var unsigned long=0;
var unsigned long=1;
var unsigned long=1-(bool&2);
var unsigned long=1+long*double;
var unsigned long=%_ArgumentsLength();
var unsigned long=(bool&2)-1;
var unsigned long=char[__float128+2];
var unsigned long=char[long];
var unsigned long=%CreateApiFunction(signed char,int);
var unsigned long=double*signed char;
var unsigned long=__float128/(2+__float128);
var unsigned long=__float128[long];
var unsigned long=__float128?ToObject(bool):bool;
var unsigned long=%GetDefaultReceiver(bool);
var unsigned long=i.length;
var unsigned long=((k)[0])+3;
var unsigned long=K.charCodeAt(O);
var unsigned long long=
var unsigned long=long[unsigned char];
var unsigned long=new Array();
var unsigned long=signed char[k];
var unsigned long=signed char*long;
var unsigned long=%_SubString(signed char,__float128,int);
var unsigned long=%ToNumber(double);
var unsigned long=ToString(long double);
var unsigned long=ToUint32(bool);
var unsigned long=unsigned char;
var unsigned long=unsigned int+long;
var unsigned short=[];
var ...=unsigned short[t.length>>1][0];
var V=
var visited_arrays=new InternalArray();
var void=new Array();
var wchar_t=
var wchar_t=HexValueOf(unsigned short);
var W=function SafeRemoveArrayHoles(N){
var W=ToString(U);
var X=0;
var X=function(bool){
var X=function(bool){return false;};
var Y=O-1;
var Y=ToString(K);
var Y=ToString(Z);
var Z=0;
V A;V
vdA;void
VDHcS0
vector<bool>::_M_range_check
vector_ics
VectorKeyedLoadStub
VectorLoadIC Descriptor
VectorLoadICTrampoline Descriptor
VectorLoadStub
vector::_M_fill_insert
vector::_M_insert_aux
vector::_M_range_check
vector::_M_range_insert
vector::reserve
verify TurboFan graphs at each phase
"version":a.versionRequest_,
<Very long string[%u]>
Vfff.
Vffff.
|Vfffff.
vffffff.
v_Hc@
v$HcC
vHIcVTH
V`IcE
virtual_memory_->Commit(reinterpret_cast<Address>(start_), kStoreBufferSize, false)
 visit #%double: %short
V/kX@
      void
(void 0),2|4);
void HcS
void Ic^
void(IcN
void(IcV4H
void IcV,H
void@IcVLH
?void<y5
vPIcV\H
v.push(wchar_t[long long]);
Vu5E1
Vu"E1
Vu&E1
VUUUH
VUUUUUUUL
vXIcFdH
vxL;<
      W
W0HcH
w0H;w8t
w0IcG4
w0IcW<H
#W0;W,u4
w3IcG
#W8;W4u I
/* warning: function'short map was not on the heap */ 
/* warning: function'short map was not signed char valid map */ 
/* warning: 'function' was not on the heap */ 
/* warning: 'function' was not signed char heap object */ 
// warning: missing context slot - inconsistent frame?
// warning: no context found - inconsistent frame?
/* warning: no JSFunction object or function name found */ 
Warning: Running without installed natives!
W A;W
W ;B$
      wchar_t
wchar_t\[A\A^A_]
wchar_t char::*|I
?wchar_t	E9
wchar_t#fffff.
wchar_t!H9H
wchar_t H9Q
wchar_t=Hc4
wchar_t>Hc4
wchar_t(H;w0
wchar_t(H;w0L
wchar_t(H;w0t
wchar_t(H;w0t/1
wchar_t(H;w0tm1
wchar_t`H;wht
wchar_t@H;wHt
wchar_t Ic_
wchar_t!IcG
wchar_t(IcG,
wchar_t(IcW4H
wchar_t IcW,H
wchar_t@IcWLH
wchar_t(I;w0t
wchar_t(I;w0t"L
wchar_t`I;whM
wchar_t`I;wht
wchar_t restrict#E1
wchar_t(tXHc
wdA;wchar_t
wDHcs0
weak_cell_map
WEAK_CELL_TYPE
weak-code
weak-collection
weakcollection_abort=%.f 
weakcollection_clear=%.f 
WeakCollectionDelete
WeakCollectionGet
WeakCollectionHas
WeakCollectionInitialize
weakcollection_process=%.f 
WeakCollectionSet
weak_embedded_maps_in_ic
weak_embedded_maps_in_optimized_code
weak_embedded_objects_in_optimized_code
weak_first_view
weak-ic
WeakMap
WeakMap_string
weak_next
WeakSet
WeakSet_string
We should never get here - unexpected deopt info.
We should never get here - unexpected deopt slot kind.
We should not have an empty lexical context
	wFf.
wfff.
Wfff.
Wffff.
~Wfffff.
wffffff.
wGH9H
When logging register values, only print modified registers.
When logging, try to use coloured output.
when picking signed char function to optimize, watch for shared function info, not JSFunction itself
wHH;wPt
wHH;wPt<1
wHH;wPt=1
wHIcGL
whIcWtH
while
WHILE
while(aB<aC){
while(aK<aJ.length&&
while(!aP.done()&&
while(aT<aS.children.length){
while(bf<bb.length){
while(bg<bc.length){
while(((bool<<++T)&0x80)!=0){}
while(!(char=b.next()).done){
while(char[--double]==int){}
while(char[++__float128]==unsigned char){}
while(__float128<=double){
while(%IsJSFunctionProxy(signed char)){
while(k<unsigned int){
while(k<unsigned int&&int[k]<bool)k++;
while(!(long double=d.next()).done){
while(long<unsigned long){
while(N<I.length&&
}while(q>0);
while(true){
while(unsigned char<long double--){
while(unsigned int>=0){
while(unsigned __int128<q){
while(X<Y){
while(X<Y&&
WHITESPACE
wHI;wPt
W.info);
With:2,
with_context_map
with_expression
with padding
 with %smap %p
WithStatement
 (with transition)
wIu6H;]
wjH9P
wLIc|
wLIc4
wLIcT
wMH9H
wMH;M
+wOfH
Word32And
Word32Equal
Word32Or
Word32Ror
Word32Sar
Word32Shl
Word32Shr
Word32Xor
Word64And
Word64Equal
Word64Or
Word64Ror
Word64Sar
Word64Shl
Word64Shr
Word64Xor
wpHc|
wPIcD
wpIcW|H
wPIcW\H
wrap-receiver
WrapReceiver
"writable_",
writable_
writable:a.isWritable(),
 (write-barrier)
write_barriers_dynamic
write_barriers_static
 WriteCurrentPositionToRegister(register=%double,cp_offset=%double);
 WriteStackPointerToRegister(register=%double);
Write V8 startup blob file. (mksnapshot only)
Wrong address or value passed to RecordWrite
Wrong context passed to function
wrong instance type
wrong map
Wrong size %6d: %p %6d. Next address is %p
wSH;M
wTH9H
wTH9P
+wVfH
wvIcL
wXIcG\
wXIcWdH
wXI;wchar_t`unsigned short"H
wXI+wPH
wYIcT
wZH;M
      X
x2D9h
X64Add
X64Add32
X64And
X64And32
X64Cmp
X64Cmp32
X64Idiv
X64Idiv32
X64Imul
X64Imul32
X64ImulHigh32
X64Lea
X64Lea32
X64Movb
X64Movl
X64Movq
X64Movsd
X64Movss
X64Movsxbl
X64Movsxlq
X64Movsxwl
X64Movw
X64Movzxbl
X64Movzxwl
X64Neg
X64Neg32
X64Not
X64Not32
X64Or
X64Or32
X64Push
X64Ror
X64Ror32
X64Sar
X64Sar32
X64Shl
X64Shl32
X64Shr
X64Shr32
X64StoreWriteBarrier
X64Sub
X64Sub32
X64Test
X64Test32
X64Udiv
X64Udiv32
X64Xor
X64Xor32
X8HcC
X [A^]
X@[A^]
X[A^A_]
X@[A\A^A_]
X[A\A]A^A_]
xCA;J
xchg%char rax,%short
\$XE1
xffff.
Xfffff.
Xffffff.
xhandlers
{XHcC\
xhHcCT
X'H;^'unsigned short
X'H;_'unsigned short
X'I;^'
\$XIcD$\
}XIcE\
@XI;GXt&H
_XI;_`L
_XI;_`M
]XI;]`tP1
X'I;^'unsigned short
X.live_shared_function_infos.
X.live_shared_function_infos.forEach(function(E){
{XL+{PI
xmm10
xmm11
xmm12
xmm13
xmm14
xmm15
@`xOE
xorpd
xorps
xSfff.
^Xt$H
xXL;long long`unsigned short[A
      Y
YDIc_0
|yff.
yffff.
yield
Yield
YIELD
Y.push(
Y.push({name:X.info.function_name});
yt%HcZ
YuZE1
      Z
@ %z8
...>z8f
zap_code_space
Zap free memory in code space with 0xCC while sweeping.
Z_Code generation
ZDIc_0
Zfff.
Zffff.
Zfffff.
zffffff.
zIzCf
Z.locationFromPosition(ai,false);
zombie
zone_segment_bytes
zUz5f
